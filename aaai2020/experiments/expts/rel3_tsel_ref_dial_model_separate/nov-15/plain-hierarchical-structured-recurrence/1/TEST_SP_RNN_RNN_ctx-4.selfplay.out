8bca2339d900b1b4c0358c0bc0ea759807fad025
diff --git a/aaai2020/experiments/agent.py b/aaai2020/experiments/agent.py
index 474c324..21664a9 100644
--- a/aaai2020/experiments/agent.py
+++ b/aaai2020/experiments/agent.py
@@ -144,8 +144,8 @@ class RnnAgent(Agent):
         # POLICY BLOCK
         self.policy = args.policy
         #if self.name == "Alice":
-        if True:
-        #if False:
+        #if True:
+        if False:
             self.policy = "beta_bernoulli" # JUST FOR DEBUGGING
 
             # random fake ground truth vector here
diff --git a/aaai2020/experiments/selfplay.py b/aaai2020/experiments/selfplay.py
index 73ab30c..853fe98 100644
--- a/aaai2020/experiments/selfplay.py
+++ b/aaai2020/experiments/selfplay.py
@@ -28,18 +28,22 @@ def dump_json(file, path):
         raise Exception('Error writing JSON to %s' % path)
 
 class SelfPlay(object):
-    def __init__(self, dialog, ctx_gen, args, logger=None):
+    def __init__(self, dialog, ctx_gen, args, logger=None, max_n=1000):
         self.dialog = dialog
         self.ctx_gen = ctx_gen
         self.args = args
         self.logger = logger if logger else DialogLogger()
+        self.max_n = max_n
 
     def run(self):
+        max_n = self.max_n
         n = 0
         success = 0
         for ctxs in self.ctx_gen.iter():
             n += 1
-            if self.args.smart_alice and n > 1000:
+            if self.args.smart_alice and n > max_n:
+                break
+            if n > max_n:
                 break
             self.logger.dump('=' * 80)
             self.logger.dump(f'dialog {n}')
@@ -128,6 +132,9 @@ def make_parser():
                         help='record markables and referents')
     parser.add_argument('--repeat_selfplay', action='store_true', default=False,
                         help='repeat selfplay')
+    parser.add_argument('--num_contexts', type=int, default=-1,
+                        help='num_contexts')
+
 
     RnnAgent.add_args(parser)
 
@@ -193,7 +200,7 @@ def main():
         scenarios = {scenario['uuid']: scenario for scenario in scenario_list}
         logger = DialogLogger(verbose=args.verbose, log_file=args.log_file, scenarios=scenarios)
 
-        selfplay = SelfPlay(dialog, ctx_gen, args, logger)
+        selfplay = SelfPlay(dialog, ctx_gen, args, logger, max_n = args.num_contexts)
         result = selfplay.run()
         repeat_results.append(result)
 
@@ -209,4 +216,4 @@ def main():
 
 
 if __name__ == '__main__':
-    main()
\ No newline at end of file
+    main()
selfplay.py --alice_model_file=expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/1_ep-12.th --bob_model_file=expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/1_ep-12.th --context_file=shared_4 --cuda --markable_detector_file=serialized_models/markable_detector_with_dict_1.th --verbose --num_contexts 100 --log_file=expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/TEST_SP_RNN_RNN_ctx-4.selfplay.log
{'alice_forward_model_file': None,
 'alice_model_file': 'expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/1_ep-12.th',
 'bob_model_file': 'expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/1_ep-12.th',
 'bsz': 16,
 'context_file': 'shared_4',
 'cuda': True,
 'data': 'data/onecommon',
 'domain': 'one_common',
 'eps': 0.0,
 'language_beam_keep_all_finished': False,
 'language_beam_size': 1,
 'language_inference': 'beam',
 'language_rerank': False,
 'language_rerank_weight': 1.0,
 'language_sample_temperature': 0.25,
 'log_attention': False,
 'log_file': 'expts/rel3_tsel_ref_dial_model_separate/nov-15/plain-hierarchical-structured-recurrence/1/TEST_SP_RNN_RNN_ctx-4.selfplay.log',
 'markable_detector_file': 'serialized_models/markable_detector_with_dict_1.th',
 'markables_file': 'selfplay_markables.json',
 'max_sentences': 20,
 'max_turns': 20,
 'next_mention_candidate_generation': 'topk',
 'next_mention_reranking': False,
 'next_mention_reranking_k': 10,
 'next_mention_reranking_max_mentions': 2,
 'next_mention_reranking_score': 'log_max_probability',
 'next_mention_reranking_use_stop_scores': False,
 'next_mention_reranking_weight': 1.0,
 'num_contexts': 100,
 'plot_metrics': False,
 'policy': 'rnn',
 'record_markables': False,
 'ref_text': None,
 'referents_file': 'selfplay_referents.json',
 'repeat_selfplay': False,
 'reranking_confidence': False,
 'reranking_confidence_exp_score_threshold': 0.9,
 'reranking_confidence_score': 'l0',
 'reranking_confidence_type': 'first_above_threshold',
 'rollout_bsz': 3,
 'rollout_count_threshold': 3,
 'rollout_model_file': '',
 'seed': 1,
 'selection_model_file': '',
 'smart_alice': False,
 'smart_bob': False,
 'unk_threshold': 10,
 'verbose': True,
 'visual': False}
overwriting key bsz with value 8 with value 16
overwriting key bsz with value 8 with value 16
100: dialog_len=3.02 sent_len=15.58 agree=60.00% moving_agree=60.00% advantage=0.00 moving_advantage=0.00 time=0.680s comb_rew=1.20 agree_comb_rew=1.97 alice_rew=0.60 alice_moving_rew=0.60 agree_alice_rew=0.98 alice_make_sel=49.00% alice_unique=117 alice_ref_resolution_score=0.00 alice_language_model_score=0.00 alice_joint_score=0.00 bob_rew=0.60 bob_moving_rew=0.60 agree_bob_rew=0.98 bob_make_sel=51.00% bob_unique=114 bob_ref_resolution_score=0.00 bob_language_model_score=0.00 bob_joint_score=0.00
dump selfplay_markables.json
dump selfplay_referents.json
repeat selfplay results 0.59405941 ( 0.00000000 )
