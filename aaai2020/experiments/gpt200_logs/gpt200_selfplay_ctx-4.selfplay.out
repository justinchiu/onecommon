0b064dba825c7bf0382977f4615a8b4f6d221240
gpt_selfplay.py --context_file=shared_4 --markable_detector_file=serialized_models/markable_detector_with_dict_1.th --verbose --num_contexts 200 --log_file=gpt200_logs/gpt200_selfplay_ctx-4.selfplay.log
{'alice_forward_model_file': None,
 'alice_model_file': None,
 'belief_alice': False,
 'belief_bob': False,
 'bob_model_file': None,
 'bsz': 16,
 'context_file': 'shared_4',
 'cuda': False,
 'data': 'data/onecommon',
 'dialog_log_dir': 'analysis_log',
 'domain': 'one_common',
 'eps': 0.0,
 'log_attention': False,
 'log_file': 'gpt200_logs/gpt200_selfplay_ctx-4.selfplay.log',
 'markable_detector_file': 'serialized_models/markable_detector_with_dict_1.th',
 'markables_file': 'selfplay_markables.json',
 'max_turns': 20,
 'must_contain': None,
 'num_contexts': 200,
 'plot_metrics': False,
 'record_markables': False,
 'ref_text': None,
 'referents_file': 'selfplay_referents.json',
 'repeat_selfplay': False,
 'rollout_bsz': 3,
 'rollout_count_threshold': 3,
 'rollout_model_file': '',
 'seed': 1,
 'selection_model_file': '',
 'smart_alice': False,
 'smart_bob': False,
 'symbolic': False,
 'unk_threshold': 10,
 'verbose': True,
 'visual': False}
Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey?
Type:
Classify: 2.1247111363336444 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
88
Understand: 14.758644175715744 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.295, 0.16, 0.6666666666666666, 0.6666666666666666], [-0.18, 0.435, 0.3333333333333333, 0.9866666666666667], [0.34, -0.19, -0.6666666666666666, 0.32], [0.4, -0.445, 1.0, 0.3333333333333333], [-0.65, 0.215, 0.3333333333333333, 0.06666666666666667], [0.6, 0.025, 0.0, 0.9466666666666667], [0.65, 0.575, 0.0, -0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 16.938199987635016 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7166821124599929
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and light-colored dot to the right and above those?
Type:
Classify: 3.069272509776056 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)
```
56
Understand: 10.553794817067683 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.42, -0.265, -0.3333333333333333, 0.8933333333333333], [-0.43, 0.135, -0.6666666666666666, 0.32], [-0.37, -0.12, 1.0, 0.3333333333333333], [0.305, -0.9, -0.3333333333333333, -0.92], [-0.475, -0.665, 0.0, 0.25333333333333335], [-0.17, 0.35, 0.0, 0.9466666666666667], [-0.12, 0.9, 0.0, -0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_right_a
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 5)]
Read after code: 13.658011563122272 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9063875361705668
GENERATE SELECT
[('large', 'grey')] [('small', 'grey'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 2.109164895489812 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 6.1927456352859735 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.295, 0.16, 0.6666666666666666, 0.6666666666666666], [-0.18, 0.435, 0.3333333333333333, 0.9866666666666667], [0.34, -0.19, -0.6666666666666666, 0.32], [0.4, -0.445, 1.0, 0.3333333333333333], [-0.65, 0.215, 0.3333333333333333, 0.06666666666666667], [0.6, 0.025, 0.0, 0.9466666666666667], [0.65, 0.575, 0.0, -0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 8.336603751406074 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey?
Type:
Classify: 3.0124373864382505 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
91
Understand: 14.659381105564535 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.545, 0.56, -1.0, 1.0], [0.385, 0.785, -0.6666666666666666, 0.8266666666666667], [-0.285, 0.175, -1.0, 0.29333333333333333], [-0.645, -0.49, -1.0, 0.92], [0.275, 0.005, -1.0, -0.08], [0.19, -0.165, 0.0, 0.5466666666666666], [-0.435, -0.415, 0.3333333333333333, -0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 17.742351781576872 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7070184813916363
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the right and above those?
Type:
Classify: 3.2739780312404037 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
83
Understand: 13.687778271734715 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.55, -0.45, 0.3333333333333333, -0.92], [-0.725, -0.445, -0.6666666666666666, 0.06666666666666667], [0.08, 0.94, -1.0, 0.29333333333333333], [-0.28, 0.28, -1.0, 0.92], [0.555, 0.6, 0.0, 0.5466666666666666], [-0.77, 0.37, 0.6666666666666666, -0.28], [-0.07, 0.355, 0.3333333333333333, -0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 6)]
Read after code: 16.99396762624383 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.897483225993319
GENERATE SELECT
[('medium', 'grey')] [('small', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.506279326044023 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 5.060467505827546 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.545, 0.56, -1.0, 1.0], [0.385, 0.785, -0.6666666666666666, 0.8266666666666667], [-0.285, 0.175, -1.0, 0.29333333333333333], [-0.645, -0.49, -1.0, 0.92], [0.275, 0.005, -1.0, -0.08], [0.19, -0.165, 0.0, 0.5466666666666666], [-0.435, -0.415, 0.3333333333333333, -0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 7.599924935027957 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light?
Type:
Classify: 1.9258411321789026 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 13.20595028437674 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.57, 0.51, 1.0, 0.8533333333333334], [-0.5, -0.535, 0.6666666666666666, 0.96], [-0.255, 0.005, 0.3333333333333333, 0.4], [-0.085, -0.61, 0.6666666666666666, 0.6133333333333333], [0.24, -0.84, 0.6666666666666666, 0.25333333333333335], [-0.275, 0.525, -0.3333333333333333, 0.8], [0.695, 0.02, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.174647755920887 seconds
Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
Type:
Classify: 3.2585479905828834 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 16.133337719365954 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.085, 0.225, 1.0, 0.8533333333333334], [0.74, 0.395, -0.3333333333333333, -0.92], [0.635, -0.455, -0.6666666666666666, -0.92], [0.155, 0.56, 0.3333333333333333, 0.9333333333333333], [-0.735, -0.28, 0.3333333333333333, 0.4], [-0.76, 0.24, -0.3333333333333333, 0.8], [0.215, -0.27, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.43547290097922 seconds
Do you see a pair of dots, where the bottom dot is large-sized and light and the top dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom dot is large-sized and light, and the top dot is medium-sized and light?
Type:
Classify: 1.9472887506708503 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is large-sized and light, and the top dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 11.5296452594921 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.57, 0.51, 1.0, 0.8533333333333334], [-0.5, -0.535, 0.6666666666666666, 0.96], [-0.255, 0.005, 0.3333333333333333, 0.4], [-0.085, -0.61, 0.6666666666666666, 0.6133333333333333], [0.24, -0.84, 0.6666666666666666, 0.25333333333333335], [-0.275, 0.525, -0.3333333333333333, 0.8], [0.695, 0.02, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is large-sized and light, and the top dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_large
                    and check_a_light
                    and check_b_top
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 5), (1, 2)]
Read after code: 13.521352757699788 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7079518834034662
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and light and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a large size and light color dot to the right and below those?
Type:
Classify: 2.4234897438436747 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 13.408168287016451 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.085, 0.225, 1.0, 0.8533333333333334], [0.74, 0.395, -0.3333333333333333, -0.92], [0.635, -0.455, -0.6666666666666666, -0.92], [0.155, 0.56, 0.3333333333333333, 0.9333333333333333], [-0.735, -0.28, 0.3333333333333333, 0.4], [-0.76, 0.24, -0.3333333333333333, 0.8], [0.215, -0.27, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.863262988626957 seconds
Followup config inclusion prob: 0.7178955451057155
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and light and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, is there a small size and dark color dot to the right and below those?
Type:
Classify: 2.771476640366018 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 100.25673194881529 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.57, 0.51, 1.0, 0.8533333333333334], [-0.5, -0.535, 0.6666666666666666, 0.96], [-0.255, 0.005, 0.3333333333333333, 0.4], [-0.085, -0.61, 0.6666666666666666, 0.6133333333333333], [0.24, -0.84, 0.6666666666666666, 0.25333333333333335], [-0.275, 0.525, -0.3333333333333333, 0.8], [0.695, 0.02, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5), (1, 2)]


# Turn 0
# Them: No, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 103.06719706300646 seconds
Followup config inclusion prob: 0.7079518834034662
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and light and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, is there a large size and light color dot to the left and below those?
Type:
Classify: 2.79621385037899 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a large size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)```
59
Understand: 9.411138214170933 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.085, 0.225, 1.0, 0.8533333333333334], [0.74, 0.395, -0.3333333333333333, -0.92], [0.635, -0.455, -0.6666666666666666, -0.92], [0.155, 0.56, 0.3333333333333333, 0.9333333333333333], [-0.735, -0.28, 0.3333333333333333, 0.4], [-0.76, 0.24, -0.3333333333333333, 0.8], [0.215, -0.27, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: No, is there a large size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_left
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 4)]
Read after code: 12.246722240932286 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8890161425298375
GENERATE SELECT
[('large', 'light')] [('medium', 'light'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and light and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Is there a large size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the large size and light color one. <selection>.
Type:
Classify: 2.393107384443283 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 4.255515245720744 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.57, 0.51, 1.0, 0.8533333333333334], [-0.5, -0.535, 0.6666666666666666, 0.96], [-0.255, 0.005, 0.3333333333333333, 0.4], [-0.085, -0.61, 0.6666666666666666, 0.6133333333333333], [0.24, -0.84, 0.6666666666666666, 0.25333333333333335], [-0.275, 0.525, -0.3333333333333333, 0.8], [0.695, 0.02, -1.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 5)]


# Turn 0
# Them: Yes, let's select the large size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,), (2,)]
Read after code: 6.680190273560584 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
Type:
Classify: 1.6647584279999137 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 19.270529728382826 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.45, -0.08, -0.6666666666666666, 0.88], [-0.53, -0.755, 0.6666666666666666, 0.8933333333333333], [0.29, 0.955, -0.3333333333333333, -0.04], [0.19, 0.76, -0.6666666666666666, 0.2], [0.755, 0.14, 0.6666666666666666, -0.6133333333333333], [-0.48, 0.485, 0.0, -0.37333333333333335], [0.39, -0.855, 0.0, 0.3466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 20.973534340970218 seconds
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark?
Type:
Classify: 2.1698043569922447 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
94
Understand: 16.107577173039317 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.205, 0.625, -0.3333333333333333, -0.04], [0.9, -0.435, 0.6666666666666666, 0.37333333333333335], [-0.305, 0.43, -0.6666666666666666, 0.2], [0.535, 0.59, 0.6666666666666666, -0.8666666666666667], [0.26, -0.19, 0.6666666666666666, -0.6133333333333333], [0.305, 0.785, 0.0, 0.76], [-0.97, 0.155, 0.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 18.32066665776074 seconds
Do you see a pair of dots, where the bottom right dot is large-sized and light and the top left dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom right dot is large-sized and light, and the top left dot is large-sized and dark?
Type:
Classify: 1.8407797385007143 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is large-sized and light, and the top left dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 15.868057264946401 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.45, -0.08, -0.6666666666666666, 0.88], [-0.53, -0.755, 0.6666666666666666, 0.8933333333333333], [0.29, 0.955, -0.3333333333333333, -0.04], [0.19, 0.76, -0.6666666666666666, 0.2], [0.755, 0.14, 0.6666666666666666, -0.6133333333333333], [-0.48, 0.485, 0.0, -0.37333333333333335], [0.39, -0.855, 0.0, 0.3466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is large-sized and light, and the top left dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_large
                    and check_a_light
                    and check_b_top_left
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.75133111514151 seconds
Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is large-sized and light and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and dark?
Type:
Classify: 1.4725360600277781 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 13.163527471013367 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.205, 0.625, -0.3333333333333333, -0.04], [0.9, -0.435, 0.6666666666666666, 0.37333333333333335], [-0.305, 0.43, -0.6666666666666666, 0.2], [0.535, 0.59, 0.6666666666666666, -0.8666666666666667], [0.26, -0.19, 0.6666666666666666, -0.6133333333333333], [0.305, 0.785, 0.0, 0.76], [-0.97, 0.155, 0.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_light
                    and check_b_top
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.678320902399719 seconds
Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is large-sized and light and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey?
Type:
Classify: 1.634729878976941 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 12.88502197060734 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.45, -0.08, -0.6666666666666666, 0.88], [-0.53, -0.755, 0.6666666666666666, 0.8933333333333333], [0.29, 0.955, -0.3333333333333333, -0.04], [0.19, 0.76, -0.6666666666666666, 0.2], [0.755, 0.14, 0.6666666666666666, -0.6133333333333333], [-0.48, 0.485, 0.0, -0.37333333333333335], [0.39, -0.855, 0.0, 0.3466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 14.559643154032528 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6968198699498283
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is large-sized and light and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: Yes, is there a medium-sized and dark-colored dot to the left and below those?
Type:
Classify: 3.2304145842790604 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
58
Understand: 9.174260742031038 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.205, 0.625, -0.3333333333333333, -0.04], [0.9, -0.435, 0.6666666666666666, 0.37333333333333335], [-0.305, 0.43, -0.6666666666666666, 0.2], [0.535, 0.59, 0.6666666666666666, -0.8666666666666667], [0.26, -0.19, 0.6666666666666666, -0.6133333333333333], [0.305, 0.785, 0.0, 0.76], [-0.97, 0.155, 0.0, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 6)]
Read after code: 12.438780236057937 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8914032746740913
GENERATE SELECT
[('small', 'grey')] [('small', 'grey'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is large-sized and light and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 5: Yes. Is there a medium size and dark color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.3431572737172246 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 3.6589092034846544 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.45, -0.08, -0.6666666666666666, 0.88], [-0.53, -0.755, 0.6666666666666666, 0.8933333333333333], [0.29, 0.955, -0.3333333333333333, -0.04], [0.19, 0.76, -0.6666666666666666, 0.2], [0.755, 0.14, 0.6666666666666666, -0.6133333333333333], [-0.48, 0.485, 0.0, -0.37333333333333335], [0.39, -0.855, 0.0, 0.3466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,), (2,)]
Read after code: 6.034227301366627 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type:
Classify: 3.7050543632358313 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 17.366989770904183 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.165, -0.745, -0.6666666666666666, -0.38666666666666666], [0.22, -0.73, 0.3333333333333333, 0.5466666666666666], [0.19, 0.8, -0.6666666666666666, -0.84], [0.735, 0.49, 0.6666666666666666, -0.30666666666666664], [-0.41, 0.8, 0.0, 0.3333333333333333], [0.285, 0.37, -1.0, -0.5866666666666667], [0.825, 0.185, -0.3333333333333333, 0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 5)]
Read after code: 21.113600814715028 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7177299586302506
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot to the right of those?
Type:
Classify: 2.7900036284700036 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and grey color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
45
Understand: 7.0126879857853055 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, 0.38, 1.0, -0.14666666666666667], [-0.775, 0.385, -0.6666666666666666, -0.84], [-0.23, 0.075, 0.6666666666666666, -0.30666666666666664], [0.15, 0.215, 0.3333333333333333, -0.3333333333333333], [-0.68, -0.045, -1.0, -0.5866666666666667], [-0.14, -0.23, -0.3333333333333333, 0.16], [0.625, -0.625, -0.3333333333333333, -0.92]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: Yes. Is there a large size and grey color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 4), (0, 1, 4), (1, 3, 4)]
Read after code: 9.837467819452286 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.617721253520683
GENERATE SELECT
[('small', 'dark')] [('small', 'dark'), ('large', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.9578329371288419 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.221750946715474 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.165, -0.745, -0.6666666666666666, -0.38666666666666666], [0.22, -0.73, 0.3333333333333333, 0.5466666666666666], [0.19, 0.8, -0.6666666666666666, -0.84], [0.735, 0.49, 0.6666666666666666, -0.30666666666666664], [-0.41, 0.8, 0.0, 0.3333333333333333], [0.285, 0.37, -1.0, -0.5866666666666667], [0.825, 0.185, -0.3333333333333333, 0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (2,)]
Read after code: 6.214162578806281 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey?
Type:
Classify: 2.0552379013970494 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 14.604766159318388 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.545, 0.81, -0.3333333333333333, -0.14666666666666667], [0.66, -0.54, -1.0, 0.30666666666666664], [0.19, -0.57, 0.3333333333333333, -0.26666666666666666], [-0.055, 0.015, -0.3333333333333333, -0.7066666666666667], [-0.335, 0.735, 0.6666666666666666, -1.0], [0.63, -0.18, 0.6666666666666666, 0.7333333333333333], [0.525, 0.075, -0.6666666666666666, 0.24]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 16.700436680577695 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5623125488424998
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the right and below those?
Type:
Classify: 1.9687960501760244 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 9.078947952017188 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.56, -0.31, 0.3333333333333333, -0.26666666666666666], [-0.55, -0.63, 0.6666666666666666, 0.7866666666666666], [0.32, 0.275, -0.3333333333333333, -0.7066666666666667], [-0.76, 0.06, -0.6666666666666666, -0.5733333333333334], [0.035, 0.995, 0.6666666666666666, -1.0], [0.9, 0.335, -0.6666666666666666, 0.24], [0.16, -0.77, 0.6666666666666666, 0.22666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.079686106182635 seconds
Followup config inclusion prob: 0.5669145843218872
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a medium-sized and grey-colored dot below those?
Type:
Classify: 2.758650335483253 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and grey-colored dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_below_ab = is_below(c, [a, b], ctx)
47
Understand: 7.494674596004188 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.545, 0.81, -0.3333333333333333, -0.14666666666666667], [0.66, -0.54, -1.0, 0.30666666666666664], [0.19, -0.57, 0.3333333333333333, -0.26666666666666666], [-0.055, 0.015, -0.3333333333333333, -0.7066666666666667], [-0.335, 0.735, 0.6666666666666666, -1.0], [0.63, -0.18, 0.6666666666666666, 0.7333333333333333], [0.525, 0.075, -0.6666666666666666, 0.24]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: No, is there a medium-sized and grey-colored dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 6), (0, 3, 6)]
Read after code: 10.290319711901248 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6384884112360643
GENERATE SELECT
[('small', 'dark')] [('medium', 'grey'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a medium size and grey color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.1873818738386035 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.487294732593 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.56, -0.31, 0.3333333333333333, -0.26666666666666666], [-0.55, -0.63, 0.6666666666666666, 0.7866666666666666], [0.32, 0.275, -0.3333333333333333, -0.7066666666666667], [-0.76, 0.06, -0.6666666666666666, -0.5733333333333334], [0.035, 0.995, 0.6666666666666666, -1.0], [0.9, 0.335, -0.6666666666666666, 0.24], [0.16, -0.77, 0.6666666666666666, 0.22666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 5)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2,)]
Read after code: 6.710438794456422 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey?
Type:
Classify: 1.6785488100722432 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 14.06247807200998 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, -0.985, -1.0, -0.5866666666666667], [0.355, 0.37, 0.6666666666666666, 0.14666666666666667], [0.67, 0.465, 0.0, -0.7733333333333333], [0.29, 0.935, -0.3333333333333333, -0.09333333333333334], [0.485, -0.265, -0.6666666666666666, 0.8533333333333334], [0.32, -0.275, -0.6666666666666666, 0.29333333333333333], [-0.385, -0.53, -0.6666666666666666, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_light
                    and check_b_bottom_left
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5)]
Read after code: 15.779204421676695 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5628458944595224
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot above those?
Type:
Classify: 2.9161015013232827 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and grey color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
45
Understand: 9.28326484002173 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.335, -1.0, -0.5866666666666667], [-0.48, -0.2, 0.0, 0.10666666666666667], [-0.895, -0.08, -0.6666666666666666, -0.7333333333333333], [-0.685, -0.36, -0.6666666666666666, 0.17333333333333334], [0.71, 0.385, -0.6666666666666666, 0.8533333333333334], [0.545, 0.375, -0.6666666666666666, 0.29333333333333333], [-0.16, 0.125, -0.6666666666666666, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes. Is there a large size and grey color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.234421763569117 seconds
Followup config inclusion prob: 0.48648940950398695
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the left and below those?
Type:
Classify: 1.9762390796095133 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_left_b = is_left(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
83
Understand: 15.99121893197298 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, -0.985, -1.0, -0.5866666666666667], [0.355, 0.37, 0.6666666666666666, 0.14666666666666667], [0.67, 0.465, 0.0, -0.7733333333333333], [0.29, 0.935, -0.3333333333333333, -0.09333333333333334], [0.485, -0.265, -0.6666666666666666, 0.8533333333333334], [0.32, -0.275, -0.6666666666666666, 0.29333333333333333], [-0.385, -0.53, -0.6666666666666666, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_left_b = is_left(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    and check_c_below_a
                    and check_c_left_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5, 6)]
Read after code: 18.005108029581606 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8564524458258977
GENERATE SELECT
[('small', 'light')] [('small', 'grey'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and light and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 2.4812029907479882 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 7.512991241179407 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.335, -1.0, -0.5866666666666667], [-0.48, -0.2, 0.0, 0.10666666666666667], [-0.895, -0.08, -0.6666666666666666, -0.7333333333333333], [-0.685, -0.36, -0.6666666666666666, 0.17333333333333334], [0.71, 0.385, -0.6666666666666666, 0.8533333333333334], [0.545, 0.375, -0.6666666666666666, 0.29333333333333333], [-0.16, 0.125, -0.6666666666666666, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5, 6)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (4,)]
Read after code: 10.021276754327118 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark, and the top left dot is small-sized and grey?
Type:
Classify: 1.9263464799150825 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom right dot is large-sized and dark, and the top left dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
94
Understand: 15.403296931646764 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.875, 0.425, 0.6666666666666666, -0.8533333333333334], [0.79, 0.575, -0.6666666666666666, -0.08], [0.765, -0.325, -0.3333333333333333, -0.013333333333333334], [-0.465, -0.66, 0.3333333333333333, -0.9466666666666667], [0.11, 0.95, 0.0, 0.9333333333333333], [0.835, -0.525, 1.0, 0.9066666666666666], [-0.73, 0.655, 0.6666666666666666, -0.09333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom right dot is large-sized and dark, and the top left dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1)]
Read after code: 17.368958129547536 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.702477523973068
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 2.174504751339555 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
59
Understand: 8.983220604248345 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.125, 0.505, -0.3333333333333333, -0.68], [0.28, -0.025, 0.6666666666666666, -0.8533333333333334], [0.195, 0.125, -0.6666666666666666, -0.08], [0.895, -0.215, -0.3333333333333333, 0.8666666666666667], [0.17, -0.775, -0.3333333333333333, -0.013333333333333334], [-0.485, 0.495, 0.0, 0.9333333333333333], [0.525, -0.66, 1.0, -0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 4)]
Read after code: 11.190969087183475 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.622540140715528
GENERATE SELECT
[('small', 'grey')] [('large', 'dark'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.066611778922379 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 6.0104095954447985 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.875, 0.425, 0.6666666666666666, -0.8533333333333334], [0.79, 0.575, -0.6666666666666666, -0.08], [0.765, -0.325, -0.3333333333333333, -0.013333333333333334], [-0.465, -0.66, 0.3333333333333333, -0.9466666666666667], [0.11, 0.95, 0.0, 0.9333333333333333], [0.835, -0.525, 1.0, 0.9066666666666666], [-0.73, 0.655, 0.6666666666666666, -0.09333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 2)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,), (2,)]
Read after code: 8.108235298655927 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey?
Type:
Classify: 2.385201352648437 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
91
Understand: 17.867773912847042 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.32, -0.48, 0.0, 0.8533333333333334], [-0.115, -0.095, 0.3333333333333333, 0.04], [-0.53, -0.455, -0.6666666666666666, 0.41333333333333333], [0.395, -0.815, -0.6666666666666666, -0.05333333333333334], [-0.745, -0.085, -0.6666666666666666, -0.7466666666666667], [0.895, -0.405, 0.6666666666666666, -0.2], [0.085, 0.265, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 20.295213744975626 seconds
Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light?
Type:
Classify: 2.827942283824086 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
89
Understand: 14.474679544568062 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.685, -0.205, 0.3333333333333333, 0.04], [0.81, -0.23, 0.0, 0.8933333333333333], [-0.175, -0.925, -0.6666666666666666, -0.05333333333333334], [-0.215, 0.905, 0.0, -0.9733333333333334], [0.325, -0.515, 0.6666666666666666, -0.2], [0.545, -0.335, 1.0, -0.16], [-0.485, 0.155, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.34587535262108 seconds
Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey?
Type:
Classify: 2.004733723588288 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 13.97073429916054 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.32, -0.48, 0.0, 0.8533333333333334], [-0.115, -0.095, 0.3333333333333333, 0.04], [-0.53, -0.455, -0.6666666666666666, 0.41333333333333333], [0.395, -0.815, -0.6666666666666666, -0.05333333333333334], [-0.745, -0.085, -0.6666666666666666, -0.7466666666666667], [0.895, -0.405, 0.6666666666666666, -0.2], [0.085, 0.265, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_grey
                    and check_b_top_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.016905858181417 seconds
Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark?
Type:
Classify: 2.4108958737924695 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 14.538924570195377 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.685, -0.205, 0.3333333333333333, 0.04], [0.81, -0.23, 0.0, 0.8933333333333333], [-0.175, -0.925, -0.6666666666666666, -0.05333333333333334], [-0.215, 0.905, 0.0, -0.9733333333333334], [0.325, -0.515, 0.6666666666666666, -0.2], [0.545, -0.335, 1.0, -0.16], [-0.485, 0.155, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_top_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 6)]
Read after code: 16.992038758471608 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7028218056012766
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 4: Yes, is there a large size and grey color dot to the right and below those?
Type:
Classify: 2.3844606038182974 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and grey color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
83
Understand: 10.717820476740599 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.32, -0.48, 0.0, 0.8533333333333334], [-0.115, -0.095, 0.3333333333333333, 0.04], [-0.53, -0.455, -0.6666666666666666, 0.41333333333333333], [0.395, -0.815, -0.6666666666666666, -0.05333333333333334], [-0.745, -0.085, -0.6666666666666666, -0.7466666666666667], [0.895, -0.405, 0.6666666666666666, -0.2], [0.085, 0.265, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: Yes, is there a large size and grey color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5, 6)]
Read after code: 13.134554420597851 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8838619805830756
GENERATE SELECT
[('medium', 'grey')] [('large', 'grey'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a large size and grey color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.8947173552587628 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 5.869661933742464 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.685, -0.205, 0.3333333333333333, 0.04], [0.81, -0.23, 0.0, 0.8933333333333333], [-0.175, -0.925, -0.6666666666666666, -0.05333333333333334], [-0.215, 0.905, 0.0, -0.9733333333333334], [0.325, -0.515, 0.6666666666666666, -0.2], [0.545, -0.335, 1.0, -0.16], [-0.485, 0.155, 1.0, -0.9466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 7.793199621140957 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light?
Type:
Classify: 1.6666249725967646 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 21.07787191029638 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.365, -0.37, 1.0, 0.9466666666666667], [0.32, -0.01, 0.6666666666666666, -0.25333333333333335], [0.645, 0.125, 0.6666666666666666, -0.36], [0.055, -0.14, 0.3333333333333333, 0.8], [-0.555, 0.32, 0.3333333333333333, 0.49333333333333335], [0.815, 0.13, 0.3333333333333333, -0.7866666666666666], [0.535, -0.225, 0.3333333333333333, -0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_large
                    and check_a_light
                    and check_b_top_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 22.786927418783307 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7191858563576707
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and grey color dot to the right and above those?
Type:
Classify: 3.9465768579393625 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_above = is_above(c, [a,b], ctx)
```
59
Understand: 8.663974977098405 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.445, 0.075, 1.0, -0.32], [0.065, 0.23, 1.0, 0.9466666666666667], [0.75, 0.595, 0.6666666666666666, -0.25333333333333335], [0.49, 0.46, 0.3333333333333333, 0.8], [-0.125, 0.92, 0.3333333333333333, 0.49333333333333335], [0.39, -0.43, -0.6666666666666666, 0.05333333333333334], [-0.955, 0.165, 0.0, -0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes, is there a large size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_above = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    and check_c_right
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 3)]
Read after code: 12.643175994977355 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9032533288425209
GENERATE SELECT
[('large', 'light')] [('large', 'grey'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and light color one. <selection>.
Type:
Classify: 1.6124718468636274 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 5.109321195632219 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.365, -0.37, 1.0, 0.9466666666666667], [0.32, -0.01, 0.6666666666666666, -0.25333333333333335], [0.645, 0.125, 0.6666666666666666, -0.36], [0.055, -0.14, 0.3333333333333333, 0.8], [-0.555, 0.32, 0.3333333333333333, 0.49333333333333335], [0.815, 0.13, 0.3333333333333333, -0.7866666666666666], [0.535, -0.225, 0.3333333333333333, -0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 3)]


# Turn 0
# Them: Yes, let's select the large size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,), (3,)]
Read after code: 6.753156221471727 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey?
Type:
Classify: 1.5539473332464695 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 14.28270859271288 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.335, -0.8, -1.0, -0.9866666666666667], [0.565, 0.465, -1.0, -0.5466666666666666], [0.34, -0.245, 0.3333333333333333, 0.38666666666666666], [-0.03, 0.985, 0.6666666666666666, -0.8533333333333334], [-0.235, -0.065, 1.0, 0.7066666666666667], [-0.56, 0.815, 0.0, -0.6], [0.755, 0.54, -0.6666666666666666, -0.18666666666666668]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_dark
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 6)]
Read after code: 15.878157502040267 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5712118963988926
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and dark-colored dot to the left and above those?
Type:
Classify: 1.9288223423063755 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_above = is_above(c, [a,b], ctx)
```
58
Understand: 7.99899438675493 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.92, 0.37, 0.6666666666666666, 0.013333333333333334], [0.415, 0.425, 1.0, 0.8666666666666667], [0.0, 0.48, -1.0, -0.5466666666666666], [-0.225, -0.23, 0.3333333333333333, 0.38666666666666666], [0.11, -0.92, 0.0, -0.9466666666666667], [-0.8, -0.045, 1.0, 0.7066666666666667], [0.19, 0.555, -0.6666666666666666, -0.18666666666666668]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_above = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_left
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.962500721216202 seconds
Followup config inclusion prob: 0.7180991543246131
GENERATE SELECT
[('small', 'dark')] [('small', 'grey')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.2593670673668385 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.044788476079702 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.335, -0.8, -1.0, -0.9866666666666667], [0.565, 0.465, -1.0, -0.5466666666666666], [0.34, -0.245, 0.3333333333333333, 0.38666666666666666], [-0.03, 0.985, 0.6666666666666666, -0.8533333333333334], [-0.235, -0.065, 1.0, 0.7066666666666667], [-0.56, 0.815, 0.0, -0.6], [0.755, 0.54, -0.6666666666666666, -0.18666666666666668]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: No, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 6.333799839951098 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey?
Type:
Classify: 3.16374833881855 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 13.670798692852259 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.55, 0.58, -1.0, -0.8133333333333334], [-0.125, 0.465, 1.0, 0.52], [0.16, -0.385, -0.3333333333333333, -0.7866666666666666], [-0.19, 0.935, 0.3333333333333333, 0.06666666666666667], [-0.125, -0.33, -0.6666666666666666, 0.41333333333333333], [0.63, 0.32, -0.3333333333333333, -0.6933333333333334], [0.1, 0.21, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5, 6), (0, 6), (2, 6)]
Read after code: 16.877826487645507 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.18007378291474047
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and light color dot to the left and below those?
Type:
Classify: 2.521012299694121 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 9.76077701151371 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.14, 0.03, 0.6666666666666666, 0.68], [-0.38, 0.725, -1.0, -0.8133333333333334], [-0.77, -0.24, -0.3333333333333333, -0.7866666666666666], [0.07, -0.92, 0.0, -0.8133333333333334], [-0.295, 0.47, -0.3333333333333333, -0.6933333333333334], [0.285, 0.145, 0.0, -0.6266666666666667], [-0.825, 0.355, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.315300901420414 seconds
Followup config inclusion prob: 0.5510757460642983
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a medium-sized and dark-colored dot to the right and below those?
Type:
Classify: 3.601595614105463 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and dark-colored dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
58
Understand: 9.393731631338596 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.55, 0.58, -1.0, -0.8133333333333334], [-0.125, 0.465, 1.0, 0.52], [0.16, -0.385, -0.3333333333333333, -0.7866666666666666], [-0.19, 0.935, 0.3333333333333333, 0.06666666666666667], [-0.125, -0.33, -0.6666666666666666, 0.41333333333333333], [0.63, 0.32, -0.3333333333333333, -0.6933333333333334], [0.1, 0.21, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6), (0, 6), (2, 6)]


# Turn 0
# Them: No, is there a medium-sized and dark-colored dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.032539024017751 seconds
Followup config inclusion prob: 0.18007378291474047
Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a medium size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
Type:
Classify: 1.75092014670372 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 15.353882684372365 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.14, 0.03, 0.6666666666666666, 0.68], [-0.38, 0.725, -1.0, -0.8133333333333334], [-0.77, -0.24, -0.3333333333333333, -0.7866666666666666], [0.07, -0.92, 0.0, -0.8133333333333334], [-0.295, 0.47, -0.3333333333333333, -0.6933333333333334], [0.285, 0.145, 0.0, -0.6266666666666667], [-0.825, 0.355, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.14903207588941 seconds
Followup config inclusion prob: 0.5510757460642983
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a medium size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No, is there a large size and light color dot to the right and below those?
Type:
Classify: 2.424550587311387 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)```
59
Understand: 11.338919159956276 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.55, 0.58, -1.0, -0.8133333333333334], [-0.125, 0.465, 1.0, 0.52], [0.16, -0.385, -0.3333333333333333, -0.7866666666666666], [-0.19, 0.935, 0.3333333333333333, 0.06666666666666667], [-0.125, -0.33, -0.6666666666666666, 0.41333333333333333], [0.63, 0.32, -0.3333333333333333, -0.6933333333333334], [0.1, 0.21, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6), (0, 6), (2, 6)]


# Turn 0
# Them: No, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.801312662661076 seconds
Followup config inclusion prob: 0.18007378291474047
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a medium size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type:
Classify: 1.6992198815569282 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 17.083638289012015 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.14, 0.03, 0.6666666666666666, 0.68], [-0.38, 0.725, -1.0, -0.8133333333333334], [-0.77, -0.24, -0.3333333333333333, -0.7866666666666666], [0.07, -0.92, 0.0, -0.8133333333333334], [-0.295, 0.47, -0.3333333333333333, -0.6933333333333334], [0.285, 0.145, 0.0, -0.6266666666666667], [-0.825, 0.355, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4)]
Read after code: 18.82352081872523 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.785975610799373
GENERATE SELECT
[('small', 'dark')] [('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a medium size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Is there a large size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 6: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.8778373459354043 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 3.4067413629963994 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.55, 0.58, -1.0, -0.8133333333333334], [-0.125, 0.465, 1.0, 0.52], [0.16, -0.385, -0.3333333333333333, -0.7866666666666666], [-0.19, 0.935, 0.3333333333333333, 0.06666666666666667], [-0.125, -0.33, -0.6666666666666666, 0.41333333333333333], [0.63, 0.32, -0.3333333333333333, -0.6933333333333334], [0.1, 0.21, 0.6666666666666666, -0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (0,)]
Read after code: 6.317217914387584 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is medium-sized and dark and the bottom right dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and dark and the bottom right dot is small-sized and light?
Type:
Classify: 1.9544007498770952 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is medium-sized and dark and the bottom right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 13.980687730945647 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.395, 0.015, 0.3333333333333333, -0.4266666666666667], [0.5, -0.505, -1.0, -0.9733333333333334], [0.35, 0.675, 1.0, 0.14666666666666667], [-0.06, -0.315, -0.6666666666666666, 0.92], [-0.095, 0.785, 1.0, -0.5333333333333333], [-0.575, -0.56, 0.0, 0.68], [-0.235, 0.575, 1.0, 0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is medium-sized and dark and the bottom right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 15.977304204367101 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7250857068728683
GENERATE SELECT
[('medium', 'dark')] [('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and dark and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.6053492492064834 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 6.929374598897994 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.335, 0.3, 0.3333333333333333, -0.4266666666666667], [-0.835, 0.345, -0.3333333333333333, 0.3466666666666667], [0.675, -0.03, -0.6666666666666666, 0.92], [0.105, -0.85, 0.3333333333333333, -0.2], [0.16, -0.275, 0.0, 0.68], [-0.405, 0.475, -1.0, -0.48], [0.5, 0.865, 1.0, 0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 8.562165972776711 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and grey?
Type:
Classify: 1.5829575909301639 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
91
Understand: 12.83957314118743 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.22, 0.565, 0.6666666666666666, -0.6], [0.645, -0.085, 0.3333333333333333, 0.18666666666666668], [0.245, -0.58, 0.0, -0.3333333333333333], [0.395, 0.14, 0.3333333333333333, -0.7066666666666667], [0.39, 0.555, -0.6666666666666666, 0.06666666666666667], [-0.805, 0.575, -1.0, 0.6133333333333333], [-0.465, 0.47, 1.0, 1.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_dark
                    and check_b_top
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 4)]
Read after code: 14.465571901760995 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7213859047440406
GENERATE SELECT
[('medium', 'dark')] [('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.7753754798322916 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 3.881725713610649 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.585, -0.615, 1.0, -0.8266666666666667], [0.52, 0.255, -1.0, -0.5333333333333333], [0.045, -0.015, 0.3333333333333333, 0.18666666666666668], [-0.355, -0.51, 0.0, -0.3333333333333333], [-0.205, 0.21, 0.3333333333333333, -0.7066666666666667], [-0.205, 0.625, -0.6666666666666666, 0.06666666666666667], [0.88, 0.415, -0.3333333333333333, 0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 5.684482846409082 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey?
Type:
Classify: 1.8826715452596545 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 12.320700936950743 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.245, 0.395, 0.0, 0.4666666666666667], [-0.675, 0.48, 0.3333333333333333, -0.5866666666666667], [-0.03, -0.81, -0.6666666666666666, -0.05333333333333334], [0.44, 0.27, 0.6666666666666666, 0.6], [0.01, -0.145, 0.3333333333333333, -0.25333333333333335], [-0.33, 0.545, 0.6666666666666666, -0.06666666666666667], [0.11, -0.7, 0.3333333333333333, -0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4)]
Read after code: 14.244708826765418 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.1895121428314866
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and grey color dot to the left and above those?
Type:
Classify: 2.081364693120122 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and grey color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
57
Understand: 10.115873055532575 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.61, 0.16, 0.0, 0.4666666666666667], [-0.775, 0.03, -0.3333333333333333, 0.3333333333333333], [0.185, 0.25, 0.3333333333333333, -0.5866666666666667], [-0.65, -0.23, 0.0, 0.7733333333333333], [0.865, -0.38, 0.3333333333333333, -0.25333333333333335], [0.525, 0.31, 0.6666666666666666, -0.06666666666666667], [-0.02, -0.98, -0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes, is there a large size and grey color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4, 5)]
Read after code: 12.229467833414674 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8656601691118009
GENERATE SELECT
[('medium', 'grey')] [('medium', 'light'), ('large', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.8952800016850233 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 5.641744911670685 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.245, 0.395, 0.0, 0.4666666666666667], [-0.675, 0.48, 0.3333333333333333, -0.5866666666666667], [-0.03, -0.81, -0.6666666666666666, -0.05333333333333334], [0.44, 0.27, 0.6666666666666666, 0.6], [0.01, -0.145, 0.3333333333333333, -0.25333333333333335], [-0.33, 0.545, 0.6666666666666666, -0.06666666666666667], [0.11, -0.7, 0.3333333333333333, -0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 7.569265220314264 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light?
Type:
Classify: 1.6861240165308118 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 21.022083344869316 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.035, 0.18, -0.3333333333333333, 0.7333333333333333], [-0.02, 0.775, -1.0, -0.6266666666666667], [0.115, -0.23, -0.6666666666666666, 0.8], [-0.03, -0.66, 1.0, -0.9333333333333333], [-0.33, 0.805, -0.6666666666666666, -0.17333333333333334], [-0.915, -0.285, -0.6666666666666666, 0.7866666666666666], [0.95, 0.115, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_large
                    and check_a_dark
                    and check_b_top
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 22.74928248208016 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5438667600888923
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot above those?
Type:
Classify: 2.4354918263852596 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
43
Understand: 7.112601567059755 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.26, 0.445, -0.3333333333333333, 0.7333333333333333], [0.34, 0.04, -0.6666666666666666, 0.8], [0.195, -0.395, 1.0, -0.9333333333333333], [0.695, -0.715, -0.6666666666666666, -0.2], [-0.365, -0.585, -1.0, 0.17333333333333334], [-0.72, -0.595, 1.0, -0.7333333333333333], [-0.69, -0.02, -0.6666666666666666, 0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.57924170885235 seconds
Followup config inclusion prob: 0.3421551943028316
Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey?
Type:
Classify: 2.3192073153331876 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 16.062880913726985 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.035, 0.18, -0.3333333333333333, 0.7333333333333333], [-0.02, 0.775, -1.0, -0.6266666666666667], [0.115, -0.23, -0.6666666666666666, 0.8], [-0.03, -0.66, 1.0, -0.9333333333333333], [-0.33, 0.805, -0.6666666666666666, -0.17333333333333334], [-0.915, -0.285, -0.6666666666666666, 0.7866666666666666], [0.95, 0.115, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 18.422948015853763 seconds
Followup config inclusion prob: 0.5438667600888923
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 3: No. Is there a small size and light color dot left of those?
Type:
Classify: 5.876235885545611 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_ab = is_left(c, [a,b], ctx)
43
Understand: 5.888393610715866 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.26, 0.445, -0.3333333333333333, 0.7333333333333333], [0.34, 0.04, -0.6666666666666666, 0.8], [0.195, -0.395, 1.0, -0.9333333333333333], [0.695, -0.715, -0.6666666666666666, -0.2], [-0.365, -0.585, -1.0, 0.17333333333333334], [-0.72, -0.595, 1.0, -0.7333333333333333], [-0.69, -0.02, -0.6666666666666666, 0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6)]


# Turn 0
# Them: No. Is there a small size and light color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5, 6), (0, 5, 6)]
Read after code: 11.801891087554395 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5876507748298074
GENERATE SELECT
[('large', 'dark')] [('small', 'light'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the large size and dark color one. <selection>.
Type:
Classify: 2.021113763563335 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 3.9470475390553474 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.035, 0.18, -0.3333333333333333, 0.7333333333333333], [-0.02, 0.775, -1.0, -0.6266666666666667], [0.115, -0.23, -0.6666666666666666, 0.8], [-0.03, -0.66, 1.0, -0.9333333333333333], [-0.33, 0.805, -0.6666666666666666, -0.17333333333333334], [-0.915, -0.285, -0.6666666666666666, 0.7866666666666666], [0.95, 0.115, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the large size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 6.000982353463769 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark?
Type:
Classify: 1.9812098713591695 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 14.574131732806563 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.76, 0.525, 0.0, 0.7466666666666667], [0.35, -0.735, 0.6666666666666666, -0.7866666666666666], [-0.8, -0.09, 0.3333333333333333, 0.08], [0.55, -0.34, -0.3333333333333333, 0.7733333333333333], [-0.26, -0.875, -0.6666666666666666, -0.09333333333333334], [-0.045, -0.365, -0.3333333333333333, -0.4266666666666667], [0.86, -0.015, -0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_large
                    and check_a_dark
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 16.60138059593737 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7167731328435036
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and light color dot to the right and above those?
Type:
Classify: 4.215609668754041 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
59
Understand: 9.6630122018978 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.485, -0.005, 0.6666666666666666, -0.7866666666666666], [0.105, 0.365, 0.0, 0.13333333333333333], [0.625, -0.34, 1.0, -0.6666666666666666], [-0.285, 0.39, -0.3333333333333333, 0.7733333333333333], [0.25, 0.24, 1.0, -0.22666666666666666], [-0.88, 0.365, -0.3333333333333333, -0.4266666666666667], [0.025, 0.715, -0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 5)]
Read after code: 13.910063710063696 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8350012208175176
GENERATE SELECT
[('small', 'dark')] [('large', 'dark'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.9354123510420322 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 7.1965696308761835 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.76, 0.525, 0.0, 0.7466666666666667], [0.35, -0.735, 0.6666666666666666, -0.7866666666666666], [-0.8, -0.09, 0.3333333333333333, 0.08], [0.55, -0.34, -0.3333333333333333, 0.7733333333333333], [-0.26, -0.875, -0.6666666666666666, -0.09333333333333334], [-0.045, -0.365, -0.3333333333333333, -0.4266666666666667], [0.86, -0.015, -0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3, 5)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 10.16884929779917 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light?
Type:
Classify: 2.9149907268583775 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
83
Understand: 11.460119417868555 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.125, 0.865, 0.3333333333333333, 0.6], [0.135, -0.925, 0.6666666666666666, -0.8933333333333333], [-0.61, 0.165, 0.6666666666666666, -0.3466666666666667], [0.265, -0.01, 0.0, -0.8933333333333333], [0.735, -0.53, -1.0, -0.05333333333333334], [0.34, 0.195, -0.6666666666666666, -0.52], [0.315, 0.785, -0.6666666666666666, -0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_large = is_large(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.416720098815858 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark?
Type:
Classify: 3.3566887211054564 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 19.43207492493093 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.05, -0.475, 0.6666666666666666, -0.8933333333333333], [-0.96, -0.205, 0.0, 0.16], [0.305, -0.545, 0.6666666666666666, 0.56], [0.605, -0.29, 0.6666666666666666, -0.14666666666666667], [0.075, 0.44, 0.0, -0.8933333333333333], [0.55, -0.08, -1.0, -0.05333333333333334], [0.155, 0.645, -0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_dark
                    and check_b_top
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 22.830524500459433 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7042467316549932
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a small size and grey color dot to the right and below those?
Type:
Classify: 94.85114933457226 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
59
Understand: 13.307666284963489 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.125, 0.865, 0.3333333333333333, 0.6], [0.135, -0.925, 0.6666666666666666, -0.8933333333333333], [-0.61, 0.165, 0.6666666666666666, -0.3466666666666667], [0.265, -0.01, 0.0, -0.8933333333333333], [0.735, -0.53, -1.0, -0.05333333333333334], [0.34, 0.195, -0.6666666666666666, -0.52], [0.315, 0.785, -0.6666666666666666, -0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 5)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 4, 5)]
Read after code: 108.19109529536217 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6287989010905577
GENERATE SELECT
[('medium', 'dark')] [('small', 'grey'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and grey color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 2.1228947918862104 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 5.016430741176009 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.05, -0.475, 0.6666666666666666, -0.8933333333333333], [-0.96, -0.205, 0.0, 0.16], [0.305, -0.545, 0.6666666666666666, 0.56], [0.605, -0.29, 0.6666666666666666, -0.14666666666666667], [0.075, 0.44, 0.0, -0.8933333333333333], [0.55, -0.08, -1.0, -0.05333333333333334], [0.155, 0.645, -0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5, 6)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 7.171366079710424 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark?
Type:
Classify: 2.0817908346652985 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
84
Understand: 12.953480101190507 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.15, 0.135, 0.3333333333333333, -0.9733333333333334], [-0.74, 0.24, 0.0, 0.26666666666666666], [0.4, -0.34, 0.6666666666666666, -0.37333333333333335], [0.215, 0.66, -0.3333333333333333, -0.6666666666666666], [0.035, -0.16, 1.0, -0.7866666666666666], [-0.485, -0.675, -0.3333333333333333, -0.76], [0.275, 0.505, 0.6666666666666666, 0.68]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4), (2, 4)]
Read after code: 15.079586001113057 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5684087942728873
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and grey-colored dot to the left and above those?
Type:
Classify: 2.9059950578957796 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and grey-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
58
Understand: 11.658681272529066 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.22, 0.855, 0.3333333333333333, -0.9733333333333334], [0.77, 0.38, 0.6666666666666666, -0.37333333333333335], [-0.5, -0.43, 0.0, -0.4533333333333333], [0.405, 0.56, 1.0, -0.7866666666666666], [-0.035, -0.4, 0.0, -0.3333333333333333], [-0.115, 0.04, -0.3333333333333333, -0.76], [0.96, -0.175, 0.6666666666666666, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and grey-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4, 6)]
Read after code: 14.5978920198977 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.3272863048828939
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, is there a medium-sized and dark-colored dot above those?
Type:
Classify: 2.223529643379152 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_medium = is_medium_size(d, ctx)
check_d_dark = is_dark(d, ctx)
check_d_above_abc = is_above(d, [a,b,c], ctx)
47
Understand: 7.854770206846297 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.15, 0.135, 0.3333333333333333, -0.9733333333333334], [-0.74, 0.24, 0.0, 0.26666666666666666], [0.4, -0.34, 0.6666666666666666, -0.37333333333333335], [0.215, 0.66, -0.3333333333333333, -0.6666666666666666], [0.035, -0.16, 1.0, -0.7866666666666666], [-0.485, -0.675, -0.3333333333333333, -0.76], [0.275, 0.505, 0.6666666666666666, 0.68]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 4)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_medium = is_medium_size(d, ctx)
                check_d_dark = is_dark(d, ctx)
                
                if (
                    True 
                    and check_d_medium
                    and check_d_dark
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 4, 5), (0, 1, 3, 4)]
Read after code: 10.110338461585343 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.656846692294436
GENERATE SELECT
[('medium', 'dark')] [('medium', 'grey'), ('large', 'dark'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and grey color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 2: Yes. Is there a medium size and dark color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 3.029857199639082 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,d,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 6.071866596117616 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.22, 0.855, 0.3333333333333333, -0.9733333333333334], [0.77, 0.38, 0.6666666666666666, -0.37333333333333335], [-0.5, -0.43, 0.0, -0.4533333333333333], [0.405, 0.56, 1.0, -0.7866666666666666], [-0.035, -0.4, 0.0, -0.3333333333333333], [-0.115, 0.04, -0.3333333333333333, -0.76], [0.96, -0.175, 0.6666666666666666, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 3, 4)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c,d, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,), (0,)]
Read after code: 9.133501859381795 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark?
Type:
Classify: 2.2074651243165135 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 15.592564944177866 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, 0.02, 0.0, 0.14666666666666667], [-0.055, -0.455, 0.0, 0.21333333333333335], [-0.26, -0.39, 0.3333333333333333, -0.21333333333333335], [0.405, -0.375, -1.0, 0.52], [0.715, 0.49, -1.0, -0.64], [-0.055, 0.85, 0.6666666666666666, 0.52], [-0.66, 0.065, 1.0, -0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_small
                    and check_a_dark
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.8408787753433 seconds
Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark?
Type:
Classify: 2.208102038130164 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 17.58569780085236 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.175, -0.52, 0.0, 0.14666666666666667], [0.51, 0.59, 0.3333333333333333, 0.7466666666666667], [0.13, -0.92, -1.0, 0.52], [0.79, -0.375, -1.0, -0.76], [-0.58, 0.57, 0.6666666666666666, 0.6266666666666667], [0.44, -0.05, -1.0, -0.64], [-0.33, 0.305, 0.6666666666666666, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_medium
                    and check_a_grey
                    and check_b_top_left
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.83462244272232 seconds
Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and light?
Type:
Classify: 1.5999508704990149 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 12.33462867513299 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, 0.02, 0.0, 0.14666666666666667], [-0.055, -0.455, 0.0, 0.21333333333333335], [-0.26, -0.39, 0.3333333333333333, -0.21333333333333335], [0.405, -0.375, -1.0, 0.52], [0.715, 0.49, -1.0, -0.64], [-0.055, 0.85, 0.6666666666666666, 0.52], [-0.66, 0.065, 1.0, -0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.978596935980022 seconds
Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark?
Type:
Classify: 1.7959720119833946 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 13.635057238861918 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.175, -0.52, 0.0, 0.14666666666666667], [0.51, 0.59, 0.3333333333333333, 0.7466666666666667], [0.13, -0.92, -1.0, 0.52], [0.79, -0.375, -1.0, -0.76], [-0.58, 0.57, 0.6666666666666666, 0.6266666666666667], [0.44, -0.05, -1.0, -0.64], [-0.33, 0.305, 0.6666666666666666, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_top_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.471436699852347 seconds
Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the top dot is medium-sized and light and the bottom dot is small-sized and dark?
Type:
Classify: 1.8977969577535987 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is medium-sized and light and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.288142867386341 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, 0.02, 0.0, 0.14666666666666667], [-0.055, -0.455, 0.0, 0.21333333333333335], [-0.26, -0.39, 0.3333333333333333, -0.21333333333333335], [0.405, -0.375, -1.0, 0.52], [0.715, 0.49, -1.0, -0.64], [-0.055, 0.85, 0.6666666666666666, 0.52], [-0.66, 0.065, 1.0, -0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is medium-sized and light and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.227820485830307 seconds
Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light?
Type:
Classify: 2.0920224906876683 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
91
Understand: 19.87816353328526 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.175, -0.52, 0.0, 0.14666666666666667], [0.51, 0.59, 0.3333333333333333, 0.7466666666666667], [0.13, -0.92, -1.0, 0.52], [0.79, -0.375, -1.0, -0.76], [-0.58, 0.57, 0.6666666666666666, 0.6266666666666667], [0.44, -0.05, -1.0, -0.64], [-0.33, 0.305, 0.6666666666666666, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2)]
Read after code: 22.013630045577884 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6910642776860744
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: Yes, is there a small size and dark color dot to the right and above those?
Type:
Classify: 2.3782140146940947 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
81
Understand: 12.559055270627141 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.1, 0.02, 0.0, 0.14666666666666667], [-0.055, -0.455, 0.0, 0.21333333333333335], [-0.26, -0.39, 0.3333333333333333, -0.21333333333333335], [0.405, -0.375, -1.0, 0.52], [0.715, 0.49, -1.0, -0.64], [-0.055, 0.85, 0.6666666666666666, 0.52], [-0.66, 0.065, 1.0, -0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3, 4)]
Read after code: 14.969817043282092 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6082080100950834
GENERATE SELECT
[('small', 'light')] [('medium', 'grey'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is medium-sized and grey and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 6: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 1.839921835809946 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 4.893800479359925 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.175, -0.52, 0.0, 0.14666666666666667], [0.51, 0.59, 0.3333333333333333, 0.7466666666666667], [0.13, -0.92, -1.0, 0.52], [0.79, -0.375, -1.0, -0.76], [-0.58, 0.57, 0.6666666666666666, 0.6266666666666667], [0.44, -0.05, -1.0, -0.64], [-0.33, 0.305, 0.6666666666666666, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 5)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2,)]
Read after code: 6.7657615300267935 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
Type:
Classify: 1.9482164094224572 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 14.970189987681806 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.01, 0.59, -0.3333333333333333, -0.49333333333333335], [-0.305, -0.335, 0.0, -0.92], [-0.135, -0.715, 0.6666666666666666, 0.7066666666666667], [0.41, 0.545, -0.6666666666666666, 0.5333333333333333], [0.39, -0.805, 1.0, -0.30666666666666664], [0.805, -0.465, 0.3333333333333333, -0.7066666666666667], [0.52, 0.75, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.961390111595392 seconds
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
Type:
Classify: 1.7597632827237248 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 14.778643843717873 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.1, 0.94, -1.0, -0.22666666666666666], [0.725, 0.2, -0.6666666666666666, 0.04], [-0.715, 0.06, -0.3333333333333333, -0.49333333333333335], [-0.315, 0.015, -0.6666666666666666, 0.5333333333333333], [0.43, -0.125, -0.6666666666666666, 0.18666666666666668], [0.08, -0.995, 0.3333333333333333, -0.7066666666666667], [-0.205, 0.215, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.57980833761394 seconds
Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
Type:
Classify: 2.6011760560795665 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 14.000890802592039 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.01, 0.59, -0.3333333333333333, -0.49333333333333335], [-0.305, -0.335, 0.0, -0.92], [-0.135, -0.715, 0.6666666666666666, 0.7066666666666667], [0.41, 0.545, -0.6666666666666666, 0.5333333333333333], [0.39, -0.805, 1.0, -0.30666666666666664], [0.805, -0.465, 0.3333333333333333, -0.7066666666666667], [0.52, 0.75, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.64585765823722 seconds
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and light?
Type:
Classify: 1.6471335180103779 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a, b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 11.333641440607607 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.1, 0.94, -1.0, -0.22666666666666666], [0.725, 0.2, -0.6666666666666666, 0.04], [-0.715, 0.06, -0.3333333333333333, -0.49333333333333335], [-0.315, 0.015, -0.6666666666666666, 0.5333333333333333], [0.43, -0.125, -0.6666666666666666, 0.18666666666666668], [0.08, -0.995, 0.3333333333333333, -0.7066666666666667], [-0.205, 0.215, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a, b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 13.022258191369474 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7068522590216105
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: Yes, is there a small size and grey color dot to the right and above those?
Type:
Classify: 2.9397829761728644 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
61
Understand: 9.525864752940834 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.01, 0.59, -0.3333333333333333, -0.49333333333333335], [-0.305, -0.335, 0.0, -0.92], [-0.135, -0.715, 0.6666666666666666, 0.7066666666666667], [0.41, 0.545, -0.6666666666666666, 0.5333333333333333], [0.39, -0.805, 1.0, -0.30666666666666664], [0.805, -0.465, 0.3333333333333333, -0.7066666666666667], [0.52, 0.75, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.49951465241611 seconds
Followup config inclusion prob: 0.7014380327818333
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, is there a small size and dark color dot to the right and above those?
Type:
Classify: 3.6407759254798293 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_above = is_above(c, [a,b], ctx)
56
Understand: 7.0331687312573195 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.1, 0.94, -1.0, -0.22666666666666666], [0.725, 0.2, -0.6666666666666666, 0.04], [-0.715, 0.06, -0.3333333333333333, -0.49333333333333335], [-0.315, 0.015, -0.6666666666666666, 0.5333333333333333], [0.43, -0.125, -0.6666666666666666, 0.18666666666666668], [0.08, -0.995, 0.3333333333333333, -0.7066666666666667], [-0.205, 0.215, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3)]


# Turn 0
# Them: No, is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 6), (0, 2, 3)]
Read after code: 10.711797125637531 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9052937902801634
GENERATE SELECT
[('small', 'light')] [('small', 'dark'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 2.046234678477049 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 4.328915272839367 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.01, 0.59, -0.3333333333333333, -0.49333333333333335], [-0.305, -0.335, 0.0, -0.92], [-0.135, -0.715, 0.6666666666666666, 0.7066666666666667], [0.41, 0.545, -0.6666666666666666, 0.5333333333333333], [0.39, -0.805, 1.0, -0.30666666666666664], [0.805, -0.465, 0.3333333333333333, -0.7066666666666667], [0.52, 0.75, -0.3333333333333333, -0.6266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 6)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 6.407714829780161 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark?
Type:
Classify: 1.8045412339270115 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 10.325506852939725 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.595, -0.015, 0.6666666666666666, -0.76], [0.325, 0.375, 0.3333333333333333, -0.48], [-0.1, -0.38, 0.3333333333333333, -0.49333333333333335], [-0.235, -0.19, 0.0, 0.12], [0.865, 0.46, 0.6666666666666666, -0.8266666666666667], [0.335, 0.145, 0.0, -0.9466666666666667], [0.06, 0.245, 0.0, 0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_light
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.169854485429823 seconds
Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
Type:
Classify: 2.551573283970356 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 13.08597510214895 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.06, 0.645, 0.6666666666666666, 0.56], [0.58, -0.385, 0.3333333333333333, -0.48], [0.29, 0.51, 0.3333333333333333, -0.36], [-0.475, 0.75, 0.3333333333333333, -0.88], [0.015, -0.95, 0.0, 0.12], [0.585, -0.61, 0.0, -0.9466666666666667], [0.315, -0.515, 0.0, 0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.677740051411092 seconds
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
Type:
Classify: 1.5765934120863676 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_b_bottom = is_below(b, a, ctx)
check_a_medium = is_medium_size(a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_a_dark = is_dark(a, ctx)
check_b_dark = is_dark(b, ctx)
```
86
Understand: 13.378262878395617 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.595, -0.015, 0.6666666666666666, -0.76], [0.325, 0.375, 0.3333333333333333, -0.48], [-0.1, -0.38, 0.3333333333333333, -0.49333333333333335], [-0.235, -0.19, 0.0, 0.12], [0.865, 0.46, 0.6666666666666666, -0.8266666666666667], [0.335, 0.145, 0.0, -0.9466666666666667], [0.06, 0.245, 0.0, 0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_b_bottom
                    and check_a_medium
                    and check_b_medium
                    and check_a_dark
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 14.997084920294583 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7237696452346583
GENERATE SELECT
[('medium', 'dark')] [('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 2.8871377194300294 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 5.166469791904092 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.06, 0.645, 0.6666666666666666, 0.56], [0.58, -0.385, 0.3333333333333333, -0.48], [0.29, 0.51, 0.3333333333333333, -0.36], [-0.475, 0.75, 0.3333333333333333, -0.88], [0.015, -0.95, 0.0, 0.12], [0.585, -0.61, 0.0, -0.9466666666666667], [0.315, -0.515, 0.0, 0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (1,)]
Read after code: 8.089537655003369 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark?
Type:
Classify: 1.857121104374528 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 13.307472474873066 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, -0.71, 0.6666666666666666, 0.06666666666666667], [-0.845, 0.125, -0.6666666666666666, 0.10666666666666667], [-0.065, -0.425, -0.6666666666666666, 0.7466666666666667], [0.55, 0.29, 0.3333333333333333, 0.8133333333333334], [0.64, -0.675, -0.3333333333333333, -0.9733333333333334], [0.55, 0.59, 0.3333333333333333, 0.32], [0.28, 0.64, 0.3333333333333333, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4)]
Read after code: 15.206692088395357 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6927601682568755
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and light color dot to the left and above those?
Type:
Classify: 3.341147104278207 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 7.731737903319299 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.43, -0.17, 0.6666666666666666, 0.06666666666666667], [0.31, 0.775, 0.0, 0.30666666666666664], [0.775, -0.54, -0.6666666666666666, -0.22666666666666666], [-0.9, 0.115, -0.6666666666666666, 0.7466666666666667], [0.135, 0.28, 0.3333333333333333, -0.52], [-0.285, 0.83, 0.3333333333333333, 0.8133333333333334], [-0.2, -0.135, -0.3333333333333333, -0.9733333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 6)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 6)]
Read after code: 11.105269722640514 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8964885135288552
GENERATE SELECT
[('small', 'dark')] [('large', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.7556531894952059 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.323180314153433 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, -0.71, 0.6666666666666666, 0.06666666666666667], [-0.845, 0.125, -0.6666666666666666, 0.10666666666666667], [-0.065, -0.425, -0.6666666666666666, 0.7466666666666667], [0.55, 0.29, 0.3333333333333333, 0.8133333333333334], [0.64, -0.675, -0.3333333333333333, -0.9733333333333334], [0.55, 0.59, 0.3333333333333333, 0.32], [0.28, 0.64, 0.3333333333333333, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 4)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.112807184457779 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is large-sized and light?
Type:
Classify: 1.8955968152731657 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 21.563213012181222 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.095, -0.4, 0.6666666666666666, -0.8933333333333333], [0.775, -0.37, 0.6666666666666666, 0.7466666666666667], [0.325, -0.605, 1.0, 0.6133333333333333], [-0.6, 0.015, 0.6666666666666666, -0.16], [0.535, 0.33, -0.6666666666666666, -0.28], [0.48, -0.655, 0.3333333333333333, 0.44], [-0.28, 0.56, -1.0, 0.09333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2), (0, 5)]
Read after code: 23.503329746425152 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7217938124763807
GENERATE SELECT
[('large', 'dark')] [('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the large size and dark color one. <selection>.
Type:
Classify: 2.7704365346580744 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 4.253789386712015 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.46, 0.165, 0.6666666666666666, -0.8933333333333333], [-0.525, -0.235, -0.6666666666666666, 0.41333333333333333], [0.69, -0.04, 1.0, 0.6133333333333333], [-0.775, 0.625, 0.3333333333333333, 0.05333333333333334], [-0.235, 0.58, 0.6666666666666666, -0.16], [-0.215, -0.93, 0.6666666666666666, 0.3466666666666667], [0.845, -0.09, 0.3333333333333333, 0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, let's select the large size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 7.055809684097767 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey?
Type:
Classify: 1.4302902109920979 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 12.10953716095537 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.72, 0.67, 0.0, -0.18666666666666668], [-0.015, -0.18, -0.6666666666666666, -0.96], [-0.675, -0.72, -0.6666666666666666, -0.96], [0.33, -0.075, 0.6666666666666666, 0.5466666666666666], [0.61, -0.78, 0.3333333333333333, -0.8933333333333333], [-0.45, 0.54, 0.0, 0.04], [-0.715, -0.025, -0.3333333333333333, 0.38666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 5)]
Read after code: 13.576042542234063 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6978168824524075
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and dark color dot to the right and below those?
Type:
Classify: 2.5946544781327248 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
81
Understand: 11.835651760920882 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.97, -0.16, 1.0, -0.88], [-0.805, -0.055, 0.0, -0.18666666666666668], [-0.1, -0.91, -0.6666666666666666, -0.96], [0.25, -0.8, 0.6666666666666666, 0.5466666666666666], [0.04, 0.545, -0.6666666666666666, 0.25333333333333335], [-0.535, -0.19, 0.0, 0.04], [-0.355, 0.415, 0.0, 0.68]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 5)]
Read after code: 14.462522800080478 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8953776261312636
GENERATE SELECT
[('medium', 'grey')] [('medium', 'grey'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.5971344150602818 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 4.950416157953441 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.72, 0.67, 0.0, -0.18666666666666668], [-0.015, -0.18, -0.6666666666666666, -0.96], [-0.675, -0.72, -0.6666666666666666, -0.96], [0.33, -0.075, 0.6666666666666666, 0.5466666666666666], [0.61, -0.78, 0.3333333333333333, -0.8933333333333333], [-0.45, 0.54, 0.0, 0.04], [-0.715, -0.025, -0.3333333333333333, 0.38666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 5)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (0,)]
Read after code: 6.578016450628638 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey?
Type:
Classify: 1.54971026442945 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a, b], ctx)
check_a_left = a == get_left([a, b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a, b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
93
Understand: 14.728802459314466 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.92, 0.6666666666666666, 0.6], [0.88, 0.285, 1.0, 0.5733333333333334], [-0.47, -0.57, 0.0, -0.8133333333333334], [0.765, -0.125, 0.3333333333333333, 0.6933333333333334], [-0.4, 0.175, 1.0, -0.21333333333333335], [-0.075, -0.145, -0.3333333333333333, 0.7066666666666667], [0.13, -0.945, 0.3333333333333333, -0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a, b], ctx)
                check_a_left = a == get_left([a, b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a, b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_light
                    and check_b_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.320133155211806 seconds
Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey?
Type:
Classify: 1.66493780631572 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
95
Understand: 14.421367623843253 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.27, -0.89, 0.6666666666666666, 0.6], [0.29, 0.32, 1.0, 0.5733333333333334], [0.17, -0.09, 0.3333333333333333, 0.6933333333333334], [0.29, -0.74, 0.3333333333333333, -0.04], [0.59, 0.505, 0.6666666666666666, -0.09333333333333334], [0.7, -0.525, 0.6666666666666666, -0.14666666666666667], [-0.665, -0.11, -0.3333333333333333, 0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_large
                    and check_a_light
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.12908214237541 seconds
Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey?
Type:
Classify: 2.0414558621123433 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
97
Understand: 14.418450139462948 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.92, 0.6666666666666666, 0.6], [0.88, 0.285, 1.0, 0.5733333333333334], [-0.47, -0.57, 0.0, -0.8133333333333334], [0.765, -0.125, 0.3333333333333333, 0.6933333333333334], [-0.4, 0.175, 1.0, -0.21333333333333335], [-0.075, -0.145, -0.3333333333333333, 0.7066666666666667], [0.13, -0.945, 0.3333333333333333, -0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_top_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.50179783627391 seconds
Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is small-sized and light?
Type:
Classify: 2.450663659721613 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
82
Understand: 11.198734259232879 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.27, -0.89, 0.6666666666666666, 0.6], [0.29, 0.32, 1.0, 0.5733333333333334], [0.17, -0.09, 0.3333333333333333, 0.6933333333333334], [0.29, -0.74, 0.3333333333333333, -0.04], [0.59, 0.505, 0.6666666666666666, -0.09333333333333334], [0.7, -0.525, 0.6666666666666666, -0.14666666666666667], [-0.665, -0.11, -0.3333333333333333, 0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_a_top_left
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.685630364343524 seconds
Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the top dot is large-sized and light and the bottom dot is medium-sized and light?
Type:
Classify: 1.4255672069266438 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is large-sized and light and the bottom dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
89
Understand: 18.605830799788237 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.92, 0.6666666666666666, 0.6], [0.88, 0.285, 1.0, 0.5733333333333334], [-0.47, -0.57, 0.0, -0.8133333333333334], [0.765, -0.125, 0.3333333333333333, 0.6933333333333334], [-0.4, 0.175, 1.0, -0.21333333333333335], [-0.075, -0.145, -0.3333333333333333, 0.7066666666666667], [0.13, -0.945, 0.3333333333333333, -0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is large-sized and light and the bottom dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_light
                    and check_b_bottom
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3)]
Read after code: 20.072740921750665 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6920717998888892
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 5: Yes, is there a small size and light color dot to the left and below those?
Type:
Classify: 2.1012397771701217 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 9.010153027251363 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.27, -0.89, 0.6666666666666666, 0.6], [0.29, 0.32, 1.0, 0.5733333333333334], [0.17, -0.09, 0.3333333333333333, 0.6933333333333334], [0.29, -0.74, 0.3333333333333333, -0.04], [0.59, 0.505, 0.6666666666666666, -0.09333333333333334], [0.7, -0.525, 0.6666666666666666, -0.14666666666666667], [-0.665, -0.11, -0.3333333333333333, 0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 6)]
Read after code: 11.1446124734357 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.888435923026142
GENERATE SELECT
[('medium', 'light')] [('large', 'light'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and light and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and light and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 5: Yes. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 2.8320637168362737 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 5.430121699348092 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.92, 0.6666666666666666, 0.6], [0.88, 0.285, 1.0, 0.5733333333333334], [-0.47, -0.57, 0.0, -0.8133333333333334], [0.765, -0.125, 0.3333333333333333, 0.6933333333333334], [-0.4, 0.175, 1.0, -0.21333333333333335], [-0.075, -0.145, -0.3333333333333333, 0.7066666666666667], [0.13, -0.945, 0.3333333333333333, -0.16]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3, 5)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,), (5,)]
Read after code: 8.292236502282321 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey?
Type:
Classify: 1.77848138846457 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 13.302283353172243 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, 0.305, 0.3333333333333333, -0.3466666666666667], [-0.24, -0.43, 0.0, -0.05333333333333334], [-0.39, 0.185, 1.0, 0.56], [-0.88, -0.02, -0.3333333333333333, -0.72], [-0.475, -0.77, 0.3333333333333333, 0.8933333333333333], [0.21, -0.505, 0.6666666666666666, 0.8133333333333334], [0.275, 0.5, -0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_large
                    and check_a_light
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.121975806541741 seconds
Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the left dot is medium-sized and grey and the right dot is large-sized and light?
Type:
Classify: 2.587538949213922 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is medium-sized and grey and the right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
91
Understand: 11.921409495174885 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, -0.05, 0.3333333333333333, -0.3466666666666667], [-0.93, -0.175, 1.0, 0.56], [0.37, 0.25, 0.6666666666666666, -0.5733333333333334], [0.265, 0.775, -0.6666666666666666, 0.06666666666666667], [0.56, -0.19, 0.6666666666666666, 0.52], [-0.33, -0.865, 0.6666666666666666, 0.8133333333333334], [-0.26, 0.145, -0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is medium-sized and grey and the right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.552255804650486 seconds
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
Type:
Classify: 2.1624513156712055 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
73
Understand: 10.443577254191041 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, 0.305, 0.3333333333333333, -0.3466666666666667], [-0.24, -0.43, 0.0, -0.05333333333333334], [-0.39, 0.185, 1.0, 0.56], [-0.88, -0.02, -0.3333333333333333, -0.72], [-0.475, -0.77, 0.3333333333333333, 0.8933333333333333], [0.21, -0.505, 0.6666666666666666, 0.8133333333333334], [0.275, 0.5, -0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_a_top
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2), (0, 5), (3, 4), (3, 5), (0, 4)]
Read after code: 12.64279970061034 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.16574379508993542
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a small size and grey color dot above those?
Type:
Classify: 2.4660658817738295 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
45
Understand: 6.836465150117874 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, -0.05, 0.3333333333333333, -0.3466666666666667], [-0.93, -0.175, 1.0, 0.56], [0.37, 0.25, 0.6666666666666666, -0.5733333333333334], [0.265, 0.775, -0.6666666666666666, 0.06666666666666667], [0.56, -0.19, 0.6666666666666666, 0.52], [-0.33, -0.865, 0.6666666666666666, 0.8133333333333334], [-0.26, 0.145, -0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, is there a small size and grey color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 5, 6), (0, 3, 5)]
Read after code: 9.338004790246487 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5837472613414034
GENERATE SELECT
[('medium', 'dark')] [('large', 'light'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and grey color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 2.541420156136155 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 4.431250999681652 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, 0.305, 0.3333333333333333, -0.3466666666666667], [-0.24, -0.43, 0.0, -0.05333333333333334], [-0.39, 0.185, 1.0, 0.56], [-0.88, -0.02, -0.3333333333333333, -0.72], [-0.475, -0.77, 0.3333333333333333, 0.8933333333333333], [0.21, -0.505, 0.6666666666666666, 0.8133333333333334], [0.275, 0.5, -0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 6)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 7.004751958884299 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type:
Classify: 2.1497870637103915 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 15.714938789606094 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.19, -0.6666666666666666, -0.48], [-0.075, 0.215, 0.6666666666666666, 0.8133333333333334], [0.325, -0.06, 0.3333333333333333, -0.7733333333333333], [-0.69, 0.395, 0.3333333333333333, 0.02666666666666667], [-0.18, -0.3, -1.0, -0.25333333333333335], [-0.39, 0.755, -1.0, 0.7866666666666666], [0.34, 0.63, -0.6666666666666666, -0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.907446598634124 seconds
Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark?
Type:
Classify: 1.5660054301843047 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 13.881970186717808 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.205, -0.765, -0.6666666666666666, -0.48], [0.425, -0.24, 0.6666666666666666, 0.9466666666666667], [-0.42, 0.125, 0.0, 0.8266666666666667], [0.295, 0.23, -1.0, -0.26666666666666666], [-0.535, -0.735, 0.6666666666666666, 0.8133333333333334], [-0.85, -0.195, -1.0, 0.7866666666666666], [-0.115, -0.325, -0.6666666666666666, -0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.489173195324838 seconds
Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom right dot is small-sized and dark, and the top left dot is small-sized and dark?
Type:
Classify: 2.399577553384006 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is small-sized and dark, and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 13.052842278033495 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.19, -0.6666666666666666, -0.48], [-0.075, 0.215, 0.6666666666666666, 0.8133333333333334], [0.325, -0.06, 0.3333333333333333, -0.7733333333333333], [-0.69, 0.395, 0.3333333333333333, 0.02666666666666667], [-0.18, -0.3, -1.0, -0.25333333333333335], [-0.39, 0.755, -1.0, 0.7866666666666666], [0.34, 0.63, -0.6666666666666666, -0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is small-sized and dark, and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_small
                    and check_a_dark
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 6)]
Read after code: 15.493944940157235 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6998179087977017
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot left of those?
Type:
Classify: 2.1670532133430243 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and light color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
42
Understand: 6.456006954424083 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.205, -0.765, -0.6666666666666666, -0.48], [0.425, -0.24, 0.6666666666666666, 0.9466666666666667], [-0.42, 0.125, 0.0, 0.8266666666666667], [0.295, 0.23, -1.0, -0.26666666666666666], [-0.535, -0.735, 0.6666666666666666, 0.8133333333333334], [-0.85, -0.195, -1.0, 0.7866666666666666], [-0.115, -0.325, -0.6666666666666666, -0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 6)]


# Turn 0
# Them: Yes. Is there a large size and light color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 6), (0, 4, 6)]
Read after code: 8.654791655018926 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8982738032050657
GENERATE SELECT
[('small', 'dark')] [('small', 'dark'), ('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is small-sized and dark and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.9560044528916478 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 5.57120119035244 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.19, -0.6666666666666666, -0.48], [-0.075, 0.215, 0.6666666666666666, 0.8133333333333334], [0.325, -0.06, 0.3333333333333333, -0.7733333333333333], [-0.69, 0.395, 0.3333333333333333, 0.02666666666666667], [-0.18, -0.3, -1.0, -0.25333333333333335], [-0.39, 0.755, -1.0, 0.7866666666666666], [0.34, 0.63, -0.6666666666666666, -0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 6)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,), (0,)]
Read after code: 7.559850950725377 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
Type:
Classify: 4.340024824254215 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 14.705386056564748 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.115, 0.91, -1.0, -0.7866666666666666], [0.04, -0.115, 1.0, 0.84], [-0.67, 0.295, -0.3333333333333333, -0.5466666666666666], [0.55, 0.075, 1.0, -0.7333333333333333], [-0.355, -0.4, -0.6666666666666666, 0.8933333333333333], [0.325, -0.495, 0.3333333333333333, -0.48], [-0.32, -0.2, 0.6666666666666666, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.087354843504727 seconds
Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark?
Type:
Classify: 1.6081461645662785 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 14.75976065453142 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.07, -0.69, -1.0, 0.84], [-0.08, 0.865, 1.0, 0.84], [0.805, 0.385, 0.0, -0.8266666666666667], [0.95, 0.08, 0.3333333333333333, -0.49333333333333335], [-0.475, 0.58, -0.6666666666666666, 0.8933333333333333], [0.205, 0.485, 0.3333333333333333, -0.48], [-0.44, 0.78, 0.6666666666666666, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.411780734546483 seconds
Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark?
Type:
Classify: 2.1901776595041156 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 19.354679863899946 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.115, 0.91, -1.0, -0.7866666666666666], [0.04, -0.115, 1.0, 0.84], [-0.67, 0.295, -0.3333333333333333, -0.5466666666666666], [0.55, 0.075, 1.0, -0.7333333333333333], [-0.355, -0.4, -0.6666666666666666, 0.8933333333333333], [0.325, -0.495, 0.3333333333333333, -0.48], [-0.32, -0.2, 0.6666666666666666, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 21.588395009748638 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7108650286390228
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and dark color dot left of those?
Type:
Classify: 2.4285792810842395 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and dark color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left_ab = is_left(c, [a, b], ctx)
```
45
Understand: 6.6216378742828965 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.07, -0.69, -1.0, 0.84], [-0.08, 0.865, 1.0, 0.84], [0.805, 0.385, 0.0, -0.8266666666666667], [0.95, 0.08, 0.3333333333333333, -0.49333333333333335], [-0.475, 0.58, -0.6666666666666666, 0.8933333333333333], [0.205, 0.485, 0.3333333333333333, -0.48], [-0.44, 0.78, 0.6666666666666666, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes. Is there a large size and dark color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left_ab = is_left(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_left_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5, 6)]
Read after code: 9.084335098043084 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5816710878656629
GENERATE SELECT
[('large', 'light')] [('medium', 'dark'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and light and the bottom right dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a large size and dark color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the large size and light color one. <selection>.
Type:
Classify: 1.7127841459587216 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 4.940655468963087 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.115, 0.91, -1.0, -0.7866666666666666], [0.04, -0.115, 1.0, 0.84], [-0.67, 0.295, -0.3333333333333333, -0.5466666666666666], [0.55, 0.075, 1.0, -0.7333333333333333], [-0.355, -0.4, -0.6666666666666666, 0.8933333333333333], [0.325, -0.495, 0.3333333333333333, -0.48], [-0.32, -0.2, 0.6666666666666666, -0.37333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5, 6)]


# Turn 0
# Them: Yes, let's select the large size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 6.684536160901189 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light?
Type:
Classify: 2.0726947262883186 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 16.4243320915848 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.435, -0.3333333333333333, -0.5466666666666666], [-0.625, 0.395, 0.0, -0.013333333333333334], [0.465, 0.8, 0.3333333333333333, 0.30666666666666664], [0.04, -0.45, -0.6666666666666666, -0.49333333333333335], [-0.415, -0.47, 0.0, -0.36], [0.015, -0.215, 0.3333333333333333, 0.7866666666666666], [0.08, 0.015, 1.0, 0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_grey
                    and check_b_top
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5)]
Read after code: 18.535162650980055 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.17373326249418555
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the right and above those?
Type:
Classify: 2.7061734218150377 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right_ab = is_right(c, [a, b], ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
```
61
Understand: 8.674636072479188 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.4, -0.405, -0.3333333333333333, -0.5466666666666666], [-0.33, -0.45, 0.0, -0.013333333333333334], [0.76, -0.04, 0.3333333333333333, 0.30666666666666664], [-0.365, 0.22, 0.3333333333333333, 0.6533333333333333], [0.255, 0.855, -0.3333333333333333, -0.9733333333333334], [0.7, 0.525, 1.0, -0.17333333333333334], [0.375, -0.825, 1.0, 0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right_ab = is_right(c, [a, b], ctx)
                check_c_above_ab = is_above(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.413339445367455 seconds
Followup config inclusion prob: 0.5248927359599321
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and dark color dot to the right of those?
Type:
Classify: 3.545700753107667 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and dark color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
```
44
Understand: 6.92760512419045 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.435, -0.3333333333333333, -0.5466666666666666], [-0.625, 0.395, 0.0, -0.013333333333333334], [0.465, 0.8, 0.3333333333333333, 0.30666666666666664], [0.04, -0.45, -0.6666666666666666, -0.49333333333333335], [-0.415, -0.47, 0.0, -0.36], [0.015, -0.215, 0.3333333333333333, 0.7866666666666666], [0.08, 0.015, 1.0, 0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: No. Is there a small size and dark color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 4, 5), (0, 4, 5)]
Read after code: 10.510173158720136 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5588056151762348
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and dark color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, is there a large size and light color dot to the right and above those?
Type:
Classify: 4.546802764758468 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_large = is_large(d, ctx)
check_d_light = is_light(d, ctx)
check_d_right = is_right(d, [a,b,c], ctx)
check_d_above = is_above(d, [a,b,c], ctx)
```
60
Understand: 10.55492434091866 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.4, -0.405, -0.3333333333333333, -0.5466666666666666], [-0.33, -0.45, 0.0, -0.013333333333333334], [0.76, -0.04, 0.3333333333333333, 0.30666666666666664], [-0.365, 0.22, 0.3333333333333333, 0.6533333333333333], [0.255, 0.855, -0.3333333333333333, -0.9733333333333334], [0.7, 0.525, 1.0, -0.17333333333333334], [0.375, -0.825, 1.0, 0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 3)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_large = is_large(d, ctx)
                check_d_light = is_light(d, ctx)
                check_d_right = is_right(d, [a,b,c], ctx)
                check_d_above = is_above(d, [a,b,c], ctx)
                
                if (
                    True 
                    and check_d_large
                    and check_d_light
                    and check_d_right
                    and check_d_above
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.1345369881019 seconds
Followup config inclusion prob: 0.8597213330991379
GENERATE SELECT
[('medium', 'light')] [('small', 'dark'), ('medium', 'grey')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and dark color dot right of those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 3: Yes. Is there a large size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, let's select the medium size and light color one. <selection>.
Type:
Classify: 2.8872293327003717 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 4.459393452852964 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.435, -0.3333333333333333, -0.5466666666666666], [-0.625, 0.395, 0.0, -0.013333333333333334], [0.465, 0.8, 0.3333333333333333, 0.30666666666666664], [0.04, -0.45, -0.6666666666666666, -0.49333333333333335], [-0.415, -0.47, 0.0, -0.36], [0.015, -0.215, 0.3333333333333333, 0.7866666666666666], [0.08, 0.015, 1.0, 0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 4, 5), (0, 4, 5)]


# Turn 0
# Them: No, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 7.383395173586905 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark?
Type:
Classify: 1.9149770559743047 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 12.922475662082434 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.08, -0.695, 0.3333333333333333, 0.21333333333333335], [0.065, -0.24, -0.6666666666666666, -0.5333333333333333], [0.88, -0.385, 0.6666666666666666, -0.9066666666666666], [-0.865, 0.385, -0.3333333333333333, -0.7066666666666667], [-0.375, 0.29, -0.3333333333333333, 0.9333333333333333], [-0.31, 0.505, 0.0, 0.5866666666666667], [-0.3, -0.54, 0.3333333333333333, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.880356879904866 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and dark?
Type:
Classify: 1.8960802042856812 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
91
Understand: 14.793619492091238 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.75, 0.335, 0.0, -0.30666666666666664], [0.57, -0.705, -0.6666666666666666, -0.5333333333333333], [-0.125, 0.73, 0.3333333333333333, 0.92], [0.235, 0.79, -1.0, -0.7466666666666667], [-0.36, -0.085, -0.3333333333333333, -0.7066666666666667], [0.13, -0.18, -0.3333333333333333, 0.9333333333333333], [0.195, 0.04, 0.0, 0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_grey
                    and check_b_top
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.731603766791523 seconds
Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark?
Type:
Classify: 1.9247770234942436 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 15.34376578219235 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.08, -0.695, 0.3333333333333333, 0.21333333333333335], [0.065, -0.24, -0.6666666666666666, -0.5333333333333333], [0.88, -0.385, 0.6666666666666666, -0.9066666666666666], [-0.865, 0.385, -0.3333333333333333, -0.7066666666666667], [-0.375, 0.29, -0.3333333333333333, 0.9333333333333333], [-0.31, 0.505, 0.0, 0.5866666666666667], [-0.3, -0.54, 0.3333333333333333, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 6)]
Read after code: 17.309630692005157 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.17837389502519535
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a small size and light color dot to the left and above those?
Type:
Classify: 3.833304918371141 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 6.413065257482231 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.75, 0.335, 0.0, -0.30666666666666664], [0.57, -0.705, -0.6666666666666666, -0.5333333333333333], [-0.125, 0.73, 0.3333333333333333, 0.92], [0.235, 0.79, -1.0, -0.7466666666666667], [-0.36, -0.085, -0.3333333333333333, -0.7066666666666667], [0.13, -0.18, -0.3333333333333333, 0.9333333333333333], [0.195, 0.04, 0.0, 0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.278616678901017 seconds
Followup config inclusion prob: 0.5624166702935688
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, is there a small size and light color dot to the right and below those?
Type:
Classify: 2.453543527983129 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 8.475665575824678 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.08, -0.695, 0.3333333333333333, 0.21333333333333335], [0.065, -0.24, -0.6666666666666666, -0.5333333333333333], [0.88, -0.385, 0.6666666666666666, -0.9066666666666666], [-0.865, 0.385, -0.3333333333333333, -0.7066666666666667], [-0.375, 0.29, -0.3333333333333333, 0.9333333333333333], [-0.31, 0.505, 0.0, 0.5866666666666667], [-0.3, -0.54, 0.3333333333333333, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: No, is there a small size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.959813213907182 seconds
Followup config inclusion prob: 0.17837389502519535
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and light color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a small size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
Type:
Classify: 2.124886034987867 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 12.565101348794997 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.75, 0.335, 0.0, -0.30666666666666664], [0.57, -0.705, -0.6666666666666666, -0.5333333333333333], [-0.125, 0.73, 0.3333333333333333, 0.92], [0.235, 0.79, -1.0, -0.7466666666666667], [-0.36, -0.085, -0.3333333333333333, -0.7066666666666667], [0.13, -0.18, -0.3333333333333333, 0.9333333333333333], [0.195, 0.04, 0.0, 0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.731669107452035 seconds
Followup config inclusion prob: 0.5624166702935688
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 6: No. Is there a medium size and light color dot to the right of those?
Type:
Classify: 2.203866895288229 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a medium size and light color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium_size = is_medium_size(c, ctx)
check_c_light_color = is_light(c, ctx)
check_c_right_abc = c == get_right([a, b, c], ctx)
```
51
Understand: 6.503194089978933 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.08, -0.695, 0.3333333333333333, 0.21333333333333335], [0.065, -0.24, -0.6666666666666666, -0.5333333333333333], [0.88, -0.385, 0.6666666666666666, -0.9066666666666666], [-0.865, 0.385, -0.3333333333333333, -0.7066666666666667], [-0.375, 0.29, -0.3333333333333333, 0.9333333333333333], [-0.31, 0.505, 0.0, 0.5866666666666667], [-0.3, -0.54, 0.3333333333333333, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: No. Is there a medium size and light color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium_size = is_medium_size(c, ctx)
                check_c_light_color = is_light(c, ctx)
                check_c_right_abc = c == get_right([a, b, c], ctx)
                
                if (
                    True 
                    and check_c_medium_size
                    and check_c_light_color
                    and check_c_right_abc
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 6)]
Read after code: 8.744725185446441 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5566854372295413
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and light color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a small size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Is there a medium size and light color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: Yes, is there a small size and light color dot to the left and above those?
Type:
Classify: 2.547716738656163 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_small = is_small(d, ctx)
check_d_light = is_light(d, ctx)
check_d_left = is_left(d, [a,b,c], ctx)
check_d_above = is_above(d, [a,b,c], ctx)
```
60
Understand: 12.772702123969793 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.75, 0.335, 0.0, -0.30666666666666664], [0.57, -0.705, -0.6666666666666666, -0.5333333333333333], [-0.125, 0.73, 0.3333333333333333, 0.92], [0.235, 0.79, -1.0, -0.7466666666666667], [-0.36, -0.085, -0.3333333333333333, -0.7066666666666667], [0.13, -0.18, -0.3333333333333333, 0.9333333333333333], [0.195, 0.04, 0.0, 0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 6)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_small = is_small(d, ctx)
                check_d_light = is_light(d, ctx)
                check_d_left = is_left(d, [a,b,c], ctx)
                check_d_above = is_above(d, [a,b,c], ctx)
                
                if (
                    True 
                    and check_d_small
                    and check_d_light
                    and check_d_left
                    and check_d_above
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.354587099514902 seconds
Followup config inclusion prob: 0.8710890941817666
GENERATE SELECT
[('medium', 'grey')] [('small', 'dark'), ('medium', 'light')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 6: No. Is there a medium size and light color dot right of those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 7: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 8: No, let's select the medium size and grey color one. <selection>
Type:
Classify: 2.193741073831916 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the medium size and grey color one. <selection>
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 6.477952711284161 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.08, -0.695, 0.3333333333333333, 0.21333333333333335], [0.065, -0.24, -0.6666666666666666, -0.5333333333333333], [0.88, -0.385, 0.6666666666666666, -0.9066666666666666], [-0.865, 0.385, -0.3333333333333333, -0.7066666666666667], [-0.375, 0.29, -0.3333333333333333, 0.9333333333333333], [-0.31, 0.505, 0.0, 0.5866666666666667], [-0.3, -0.54, 0.3333333333333333, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 6)]


# Turn 0
# Them: No, let's select the medium size and grey color one. <selection>
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,), (0,)]
Read after code: 8.710679076611996 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark?
Type:
Classify: 1.9175238674506545 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
91
Understand: 14.716308364644647 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.26, 0.465, 1.0, -0.14666666666666667], [-0.825, 0.29, 0.6666666666666666, 0.48], [-0.4, 0.045, -0.3333333333333333, 0.48], [-0.51, -0.54, 0.0, 0.5066666666666667], [-0.08, 0.82, -0.6666666666666666, -0.4533333333333333], [0.72, 0.145, 0.3333333333333333, -0.09333333333333334], [0.185, -0.875, 0.3333333333333333, 0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.673267351463437 seconds
Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light?
Type:
Classify: 1.7019448978826404 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 14.350228693336248 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.3, 0.53, 1.0, -0.14666666666666667], [-0.965, 0.105, -0.3333333333333333, 0.48], [0.155, 0.21, 0.3333333333333333, -0.09333333333333334], [0.495, 0.395, 1.0, -0.84], [0.84, 0.155, -1.0, 0.92], [0.395, 0.645, 0.3333333333333333, -0.8933333333333333], [-0.375, -0.815, 0.3333333333333333, 0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_light
                    and check_b_bottom
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.094365262426436 seconds
Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey?
Type:
Classify: 1.771076071076095 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
97
Understand: 16.02092945482582 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.26, 0.465, 1.0, -0.14666666666666667], [-0.825, 0.29, 0.6666666666666666, 0.48], [-0.4, 0.045, -0.3333333333333333, 0.48], [-0.51, -0.54, 0.0, 0.5066666666666667], [-0.08, 0.82, -0.6666666666666666, -0.4533333333333333], [0.72, 0.145, 0.3333333333333333, -0.09333333333333334], [0.185, -0.875, 0.3333333333333333, 0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 5)]
Read after code: 17.827811028808355 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6953516984242913
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a medium-sized and light-colored dot to the left and below those?
Type:
Classify: 2.2673133006319404 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
58
Understand: 9.279846103861928 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.3, 0.53, 1.0, -0.14666666666666667], [-0.965, 0.105, -0.3333333333333333, 0.48], [0.155, 0.21, 0.3333333333333333, -0.09333333333333334], [0.495, 0.395, 1.0, -0.84], [0.84, 0.155, -1.0, 0.92], [0.395, 0.645, 0.3333333333333333, -0.8933333333333333], [-0.375, -0.815, 0.3333333333333333, 0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 2), (0, 2, 6)]
Read after code: 11.573298981413245 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.889745423220432
GENERATE SELECT
[('medium', 'grey')] [('large', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is large-sized and grey and the bottom right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a medium size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.8880275981500745 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
30
Understand: 4.924529525451362 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.26, 0.465, 1.0, -0.14666666666666667], [-0.825, 0.29, 0.6666666666666666, 0.48], [-0.4, 0.045, -0.3333333333333333, 0.48], [-0.51, -0.54, 0.0, 0.5066666666666667], [-0.08, 0.82, -0.6666666666666666, -0.4533333333333333], [0.72, 0.145, 0.3333333333333333, -0.09333333333333334], [0.185, -0.875, 0.3333333333333333, 0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 6.840132139623165 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark?
Type:
Classify: 2.0725936107337475 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
94
Understand: 15.068361403420568 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.48, 0.615, -0.6666666666666666, -0.30666666666666664], [-0.11, -0.535, -0.3333333333333333, -0.6666666666666666], [0.105, -0.925, 0.6666666666666666, -0.7866666666666666], [0.24, 0.9, 0.6666666666666666, 0.96], [0.15, -0.02, 1.0, 0.68], [-0.485, -0.57, -0.6666666666666666, 0.3333333333333333], [-0.43, 0.84, -0.6666666666666666, 0.09333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_grey
                    and check_b_top_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 17.177711306139827 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7052283104479545
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot above those?
Type:
Classify: 2.842603082768619 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and grey color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
45
Understand: 11.222393868491054 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.69, -0.56, 0.3333333333333333, -0.14666666666666667], [-0.335, 0.31, -0.3333333333333333, -0.6666666666666666], [-0.12, -0.08, 0.6666666666666666, -0.7866666666666666], [-0.075, 0.825, 1.0, 0.68], [0.455, -0.37, -0.3333333333333333, 0.17333333333333334], [-0.71, 0.275, -0.6666666666666666, 0.3333333333333333], [0.81, -0.03, -0.6666666666666666, -0.56]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes. Is there a small size and grey color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5, 6)]
Read after code: 14.096478284336627 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.1979975956765182
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes. Is there a large size and dark color dot near any of those?
Type:
Classify: 3.6910171089693904 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and dark color dot near any of those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_large = is_large(d, ctx)
check_d_dark = is_dark(d, ctx)
check_d_near_abc = any([all_close([dot, d], ctx) for dot in [a, b, c]])
```
57
Understand: 9.76968393009156 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.48, 0.615, -0.6666666666666666, -0.30666666666666664], [-0.11, -0.535, -0.3333333333333333, -0.6666666666666666], [0.105, -0.925, 0.6666666666666666, -0.7866666666666666], [0.24, 0.9, 0.6666666666666666, 0.96], [0.15, -0.02, 1.0, 0.68], [-0.485, -0.57, -0.6666666666666666, 0.3333333333333333], [-0.43, 0.84, -0.6666666666666666, 0.09333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 5)]


# Turn 0
# Them: Yes. Is there a large size and dark color dot near any of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_large = is_large(d, ctx)
                check_d_dark = is_dark(d, ctx)
                check_d_near_abc = any([all_close([dot, d], ctx) for dot in [a, b, c]])
                
                if (
                    True 
                    and check_d_large
                    and check_d_dark
                    and check_d_near_abc
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 2, 5)]
Read after code: 13.501161981374025 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.647573954775396
GENERATE SELECT
[('small', 'dark')] [('small', 'grey'), ('large', 'dark'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot above those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot near any of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.280327631160617 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,d,
Save dots:
a
Code:
```
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 6.223858763463795 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.69, -0.56, 0.3333333333333333, -0.14666666666666667], [-0.335, 0.31, -0.3333333333333333, -0.6666666666666666], [-0.12, -0.08, 0.6666666666666666, -0.7866666666666666], [-0.075, 0.825, 1.0, 0.68], [0.455, -0.37, -0.3333333333333333, 0.17333333333333334], [-0.71, 0.275, -0.6666666666666666, 0.3333333333333333], [0.81, -0.03, -0.6666666666666666, -0.56]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4, 5, 6)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c,d, in permutations(config):
            for _ in [0]:
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_small
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 8.535923366434872 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark?
Type:
Classify: 1.8501625517383218 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 15.433928386308253 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.745, -0.295, -1.0, 0.4533333333333333], [0.085, 0.3, 0.6666666666666666, -0.14666666666666667], [-0.69, -0.28, -0.6666666666666666, 0.6666666666666666], [0.305, -0.045, 0.0, -0.96], [-0.4, -0.28, 0.3333333333333333, -0.5866666666666667], [0.835, 0.14, -0.3333333333333333, 0.8533333333333334], [0.48, -0.065, 0.3333333333333333, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4)]
Read after code: 17.324378681369126 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7079297618825121
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type:
Classify: 93.23494050931185 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
82
Understand: 11.04624064732343 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.635, 0.33, 0.6666666666666666, -0.14666666666666667], [-0.27, 0.605, -0.6666666666666666, 0.52], [-0.145, -0.25, -0.6666666666666666, 0.6666666666666666], [-0.09, -0.88, -0.6666666666666666, 0.9866666666666667], [0.85, -0.02, 0.0, -0.96], [-0.66, 0.315, 0.3333333333333333, 0.7866666666666666], [0.145, -0.255, 0.3333333333333333, -0.5866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4, 6)]
Read after code: 104.31426184717566 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8323666815189141
GENERATE SELECT
[('medium', 'dark')] [('small', 'light'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.8080276073887944 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 6.315078919753432 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.745, -0.295, -1.0, 0.4533333333333333], [0.085, 0.3, 0.6666666666666666, -0.14666666666666667], [-0.69, -0.28, -0.6666666666666666, 0.6666666666666666], [0.305, -0.045, 0.0, -0.96], [-0.4, -0.28, 0.3333333333333333, -0.5866666666666667], [0.835, 0.14, -0.3333333333333333, 0.8533333333333334], [0.48, -0.065, 0.3333333333333333, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 4)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,), (4,)]
Read after code: 8.155989825725555 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
Type:
Classify: 2.1414365088567138 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_right = a == get_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_left = b == get_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 11.864434017799795 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.2, 0.41, 1.0, 0.68], [0.695, -0.145, -0.6666666666666666, -0.04], [0.015, 0.045, -1.0, -0.8], [-0.43, 0.445, -0.6666666666666666, -0.5866666666666667], [-0.085, -0.3, 0.0, 1.0], [0.67, -0.335, 0.3333333333333333, 0.14666666666666667], [0.495, -0.705, 0.3333333333333333, 0.7466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_right = a == get_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_left = b == get_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_right
                    and check_a_large
                    and check_a_light
                    and check_b_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 14.048074699938297 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7100977116538524
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and light-colored dot to the right and below those?
Type:
Classify: 2.689645145088434 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
60
Understand: 7.878501281142235 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.65, 0.075, 1.0, 0.68], [-0.635, -0.205, -0.3333333333333333, -0.8266666666666667], [0.87, -0.295, -1.0, -0.8], [0.425, 0.11, -0.6666666666666666, -0.5866666666666667], [-0.075, -0.935, 0.3333333333333333, -0.7466666666666667], [-0.615, 0.665, 0.3333333333333333, -0.2], [0.765, -0.64, 0.0, 1.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 6)]
Read after code: 10.603571135550737 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8988217711853905
GENERATE SELECT
[('small', 'dark')] [('large', 'light'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.7616009330376983 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.788013817742467 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.2, 0.41, 1.0, 0.68], [0.695, -0.145, -0.6666666666666666, -0.04], [0.015, 0.045, -1.0, -0.8], [-0.43, 0.445, -0.6666666666666666, -0.5866666666666667], [-0.085, -0.3, 0.0, 1.0], [0.67, -0.335, 0.3333333333333333, 0.14666666666666667], [0.495, -0.705, 0.3333333333333333, 0.7466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 4)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 6.583242115564644 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light?
Type:
Classify: 1.6627250639721751 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
90
Understand: 14.038783181458712 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.355, 0.785, 1.0, 0.56], [0.285, -0.225, 0.6666666666666666, -0.8], [-0.03, 0.185, 0.6666666666666666, -0.2], [-0.19, 0.725, 1.0, 0.6933333333333334], [-0.625, 0.11, -0.6666666666666666, -0.8666666666666667], [0.04, -0.73, 0.6666666666666666, 0.10666666666666667], [0.745, 0.21, -0.6666666666666666, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_large
                    and check_a_grey
                    and check_b_top
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 15.740700773894787 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.18328701786600549
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right of those?
Type:
Classify: 2.4218925377354026 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
```
44
Understand: 6.229928715154529 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.05, 0.12, 1.0, 0.56], [0.27, -0.48, 0.6666666666666666, -0.2], [0.11, 0.06, 1.0, 0.6933333333333334], [-0.32, -0.555, -0.6666666666666666, -0.8666666666666667], [0.25, 0.405, 0.6666666666666666, 0.6], [-0.905, -0.29, 0.6666666666666666, 0.24], [-0.63, -0.2, -0.3333333333333333, 0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 8.68589442409575 seconds
Followup config inclusion prob: 0.49220249283756873
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a small size and dark color dot to the left and below those?
Type:
Classify: 2.9115261510014534 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and dark color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)```
57
Understand: 10.643248360604048 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.355, 0.785, 1.0, 0.56], [0.285, -0.225, 0.6666666666666666, -0.8], [-0.03, 0.185, 0.6666666666666666, -0.2], [-0.19, 0.725, 1.0, 0.6933333333333334], [-0.625, 0.11, -0.6666666666666666, -0.8666666666666667], [0.04, -0.73, 0.6666666666666666, 0.10666666666666667], [0.745, 0.21, -0.6666666666666666, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3)]


# Turn 0
# Them: No, is there a small size and dark color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_left
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 4)]
Read after code: 13.590187339112163 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.43094558533222643
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot right of those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and dark color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, is there a large size and dark color dot to the right and below those?
Type:
Classify: 2.5819402784109116 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_large = is_large(d, ctx)
check_d_dark = is_dark(d, ctx)
check_d_right = is_right(d, [a,b,c], ctx)
check_d_below = is_below(d, [a,b,c], ctx)
```
60
Understand: 8.405982535332441 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.05, 0.12, 1.0, 0.56], [0.27, -0.48, 0.6666666666666666, -0.2], [0.11, 0.06, 1.0, 0.6933333333333334], [-0.32, -0.555, -0.6666666666666666, -0.8666666666666667], [0.25, 0.405, 0.6666666666666666, 0.6], [-0.905, -0.29, 0.6666666666666666, 0.24], [-0.63, -0.2, -0.3333333333333333, 0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 3)]


# Turn 0
# Them: Yes, is there a large size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_large = is_large(d, ctx)
                check_d_dark = is_dark(d, ctx)
                check_d_right = is_right(d, [a,b,c], ctx)
                check_d_below = is_below(d, [a,b,c], ctx)
                
                if (
                    True 
                    and check_d_large
                    and check_d_dark
                    and check_d_right
                    and check_d_below
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.013166097924113 seconds
Followup config inclusion prob: 0.5432820571831141
GENERATE SELECT
[('large', 'grey')] [('large', 'light'), ('small', 'dark')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and dark color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 3: Yes. Is there a large size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, let's select the one that's large in size and grey in color. <selection>.
Type:
Classify: 2.1336335660889745 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the one that's large in size and grey in color. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 4.3150661224499345 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.355, 0.785, 1.0, 0.56], [0.285, -0.225, 0.6666666666666666, -0.8], [-0.03, 0.185, 0.6666666666666666, -0.2], [-0.19, 0.725, 1.0, 0.6933333333333334], [-0.625, 0.11, -0.6666666666666666, -0.8666666666666667], [0.04, -0.73, 0.6666666666666666, 0.10666666666666667], [0.745, 0.21, -0.6666666666666666, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 4)]


# Turn 0
# Them: No, let's select the one that's large in size and grey in color. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2,)]
Read after code: 6.48535814601928 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
Type:
Classify: 1.4539953898638487 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
92
Understand: 15.550851561129093 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.69, -0.095, 0.3333333333333333, -0.56], [-0.115, 0.38, -0.3333333333333333, 0.4666666666666667], [-0.045, 0.11, 0.0, -0.76], [-0.37, -0.76, 0.6666666666666666, -0.37333333333333335], [-0.39, 0.625, 0.0, -0.5733333333333334], [-0.4, -0.53, 0.0, -0.08], [-0.125, 0.865, 0.6666666666666666, 0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.04606265295297 seconds
Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light?
Type:
Classify: 1.6839343225583434 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 15.305485761724412 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.415, 0.785, -0.3333333333333333, 0.4666666666666667], [-0.345, 0.515, 0.0, -0.76], [0.87, 0.035, -0.3333333333333333, -0.37333333333333335], [0.165, -0.49, -0.6666666666666666, -0.14666666666666667], [-0.67, -0.355, 0.6666666666666666, -0.37333333333333335], [0.765, -0.455, 0.6666666666666666, 0.14666666666666667], [-0.7, -0.125, 0.0, -0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_top_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.030344234779477 seconds
Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is medium-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom dot is large-sized and dark and the top dot is medium-sized and grey?
Type:
Classify: 1.5697347139939666 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is large-sized and dark and the top dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 12.519143538549542 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.69, -0.095, 0.3333333333333333, -0.56], [-0.115, 0.38, -0.3333333333333333, 0.4666666666666667], [-0.045, 0.11, 0.0, -0.76], [-0.37, -0.76, 0.6666666666666666, -0.37333333333333335], [-0.39, 0.625, 0.0, -0.5733333333333334], [-0.4, -0.53, 0.0, -0.08], [-0.125, 0.865, 0.6666666666666666, 0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is large-sized and dark and the top dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_large
                    and check_a_dark
                    and check_b_top
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 5)]
Read after code: 14.13144313916564 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7107329620123959
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type:
Classify: 2.126009021885693 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
82
Understand: 15.289456170983613 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.415, 0.785, -0.3333333333333333, 0.4666666666666667], [-0.345, 0.515, 0.0, -0.76], [0.87, 0.035, -0.3333333333333333, -0.37333333333333335], [0.165, -0.49, -0.6666666666666666, -0.14666666666666667], [-0.67, -0.355, 0.6666666666666666, -0.37333333333333335], [0.765, -0.455, 0.6666666666666666, 0.14666666666666667], [-0.7, -0.125, 0.0, -0.08]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4, 6), (2, 4, 6)]
Read after code: 17.44796517305076 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8989047357957262
GENERATE SELECT
[('medium', 'grey')] [('medium', 'dark'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is large-sized and dark and the top dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a medium size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.8927202131599188 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 5.697032761760056 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.69, -0.095, 0.3333333333333333, -0.56], [-0.115, 0.38, -0.3333333333333333, 0.4666666666666667], [-0.045, 0.11, 0.0, -0.76], [-0.37, -0.76, 0.6666666666666666, -0.37333333333333335], [-0.39, 0.625, 0.0, -0.5733333333333334], [-0.4, -0.53, 0.0, -0.08], [-0.125, 0.865, 0.6666666666666666, 0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 7.6208773190155625 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light?
Type:
Classify: 1.6245932402089238 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 12.802290710620582 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.625, 0.38, 1.0, 0.3333333333333333], [0.085, -0.555, 0.6666666666666666, -0.8533333333333334], [-0.31, -0.84, -1.0, 0.37333333333333335], [-0.075, 0.525, 0.0, -0.96], [0.71, 0.44, 0.0, 0.96], [-0.73, 0.175, 0.3333333333333333, 0.5066666666666667], [-0.465, 0.165, 0.6666666666666666, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.465291365981102 seconds
Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the left dot is medium-sized and light and the right dot is large-sized and dark?
Type:
Classify: 1.5405154908075929 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is medium-sized and light and the right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 11.699481179006398 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.65, -0.53, 1.0, 0.3333333333333333], [-0.1, -0.38, 0.0, -0.96], [0.685, -0.465, 0.0, 0.96], [0.455, 0.375, -0.6666666666666666, -0.9466666666666667], [-0.495, -0.745, 0.6666666666666666, -0.44], [0.235, 0.655, 0.6666666666666666, -0.3466666666666667], [0.45, 0.06, -0.3333333333333333, 0.6]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is medium-sized and light and the right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_light
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.280429202131927 seconds
Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top right dot is medium-sized and dark and the bottom left dot is large-sized and dark?
Type:
Classify: 1.8149341493844986 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is medium-sized and dark and the bottom left dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 13.034095654264092 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.625, 0.38, 1.0, 0.3333333333333333], [0.085, -0.555, 0.6666666666666666, -0.8533333333333334], [-0.31, -0.84, -1.0, 0.37333333333333335], [-0.075, 0.525, 0.0, -0.96], [0.71, 0.44, 0.0, 0.96], [-0.73, 0.175, 0.3333333333333333, 0.5066666666666667], [-0.465, 0.165, 0.6666666666666666, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is medium-sized and dark and the bottom left dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom_left
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 14.887432536110282 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.719210791890349
GENERATE SELECT
[('large', 'dark')] [('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes, let's select the large size and dark color one. <selection>.
Type:
Classify: 2.049549709074199 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 4.130578231997788 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.65, -0.53, 1.0, 0.3333333333333333], [-0.1, -0.38, 0.0, -0.96], [0.685, -0.465, 0.0, 0.96], [0.455, 0.375, -0.6666666666666666, -0.9466666666666667], [-0.495, -0.745, 0.6666666666666666, -0.44], [0.235, 0.655, 0.6666666666666666, -0.3466666666666667], [0.45, 0.06, -0.3333333333333333, 0.6]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: Yes, let's select the large size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.212806197814643 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
Type:
Classify: 1.7142965197563171 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 12.72552115470171 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.21, -0.04, 1.0, -0.14666666666666667], [0.365, -0.1, 0.6666666666666666, 0.6], [0.235, 0.87, 0.0, -0.29333333333333333], [0.46, 0.505, -0.6666666666666666, -0.6133333333333333], [-0.885, 0.345, 0.6666666666666666, 0.09333333333333334], [0.34, -0.46, -0.6666666666666666, -0.76], [0.36, 0.34, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 14.482250653207302 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.18036279146854645
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Below those, is there a large size and light color dot?
Type:
Classify: 2.0763536896556616 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Below those, is there a large size and light color dot?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
43
Understand: 6.511009152978659 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.645, 0.015, 0.0, -0.29333333333333333], [-0.41, 0.15, -0.6666666666666666, -0.41333333333333333], [-0.225, 0.67, 0.3333333333333333, 0.7866666666666666], [0.87, -0.35, -0.6666666666666666, -0.6133333333333333], [-0.475, -0.51, 0.6666666666666666, 0.09333333333333334], [0.33, 0.885, -0.3333333333333333, -0.7066666666666667], [0.77, -0.515, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: Yes. Below those, is there a large size and light color dot?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 4)]
Read after code: 8.619282454252243 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8491112187562382
GENERATE SELECT
[('large', 'grey')] [('small', 'dark'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 1.7534645600244403 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 4.801190849393606 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.21, -0.04, 1.0, -0.14666666666666667], [0.365, -0.1, 0.6666666666666666, 0.6], [0.235, 0.87, 0.0, -0.29333333333333333], [0.46, 0.505, -0.6666666666666666, -0.6133333333333333], [-0.885, 0.345, 0.6666666666666666, 0.09333333333333334], [0.34, -0.46, -0.6666666666666666, -0.76], [0.36, 0.34, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 3)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 6.584362904541194 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light?
Type:
Classify: 2.187228435650468 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
86
Understand: 11.17727402690798 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.245, 0.47, -0.6666666666666666, 0.41333333333333333], [-0.89, 0.11, -0.3333333333333333, 0.5066666666666667], [0.715, 0.335, 0.0, -0.4266666666666667], [-0.22, -0.48, -0.3333333333333333, -0.7733333333333333], [0.37, -0.26, 0.6666666666666666, -0.49333333333333335], [0.78, -0.575, 0.0, 0.7333333333333333], [-0.65, -0.565, -0.6666666666666666, 0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom
                    and check_b_medium
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.405901569873095 seconds
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is small-sized and light?
Type:
Classify: 2.3970648841932416 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 10.964764656499028 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, 0.275, -0.6666666666666666, 0.41333333333333333], [-0.065, 0.14, 0.0, -0.4266666666666667], [-0.41, -0.455, 0.6666666666666666, -0.49333333333333335], [0.775, 0.08, 1.0, 0.29333333333333333], [0.0, -0.77, 0.0, 0.7333333333333333], [0.675, -0.295, 0.0, 0.5733333333333334], [0.165, -0.565, -1.0, -0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.401949279941618 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is small-sized and dark?
Type:
Classify: 1.6421679314225912 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.795808277092874 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.245, 0.47, -0.6666666666666666, 0.41333333333333333], [-0.89, 0.11, -0.3333333333333333, 0.5066666666666667], [0.715, 0.335, 0.0, -0.4266666666666667], [-0.22, -0.48, -0.3333333333333333, -0.7733333333333333], [0.37, -0.26, 0.6666666666666666, -0.49333333333333335], [0.78, -0.575, 0.0, 0.7333333333333333], [-0.65, -0.565, -0.6666666666666666, 0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_light
                    and check_b_top
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.477362459525466 seconds
Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light?
Type:
Classify: 1.6446108119562268 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 10.919397588819265 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, 0.275, -0.6666666666666666, 0.41333333333333333], [-0.065, 0.14, 0.0, -0.4266666666666667], [-0.41, -0.455, 0.6666666666666666, -0.49333333333333335], [0.775, 0.08, 1.0, 0.29333333333333333], [0.0, -0.77, 0.0, 0.7333333333333333], [0.675, -0.295, 0.0, 0.5733333333333334], [0.165, -0.565, -1.0, -0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4)]
Read after code: 12.604739693924785 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.706565722472545
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot to the right of those?
Type:
Classify: 2.2654697950929403 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
```
44
Understand: 7.914989814162254 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.245, 0.47, -0.6666666666666666, 0.41333333333333333], [-0.89, 0.11, -0.3333333333333333, 0.5066666666666667], [0.715, 0.335, 0.0, -0.4266666666666667], [-0.22, -0.48, -0.3333333333333333, -0.7733333333333333], [0.37, -0.26, 0.6666666666666666, -0.49333333333333335], [0.78, -0.575, 0.0, 0.7333333333333333], [-0.65, -0.565, -0.6666666666666666, 0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.213537022471428 seconds
Followup config inclusion prob: 0.7093067865258342
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, is there a small size and light color dot to the left and above those?
Type:
Classify: 2.373129270039499 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)
```
55
Understand: 9.281820259056985 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, 0.275, -0.6666666666666666, 0.41333333333333333], [-0.065, 0.14, 0.0, -0.4266666666666667], [-0.41, -0.455, 0.6666666666666666, -0.49333333333333335], [0.775, 0.08, 1.0, 0.29333333333333333], [0.0, -0.77, 0.0, 0.7333333333333333], [0.675, -0.295, 0.0, 0.5733333333333334], [0.165, -0.565, -1.0, -0.41333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4)]


# Turn 0
# Them: No, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left_a
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 4)]
Read after code: 11.694264399819076 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8924595469695579
GENERATE SELECT
[('large', 'dark')] [('small', 'light'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot right of those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the large size and dark color one. <selection>.
Type:
Classify: 1.6883798781782389 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 5.212896382436156 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.245, 0.47, -0.6666666666666666, 0.41333333333333333], [-0.89, 0.11, -0.3333333333333333, 0.5066666666666667], [0.715, 0.335, 0.0, -0.4266666666666667], [-0.22, -0.48, -0.3333333333333333, -0.7733333333333333], [0.37, -0.26, 0.6666666666666666, -0.49333333333333335], [0.78, -0.575, 0.0, 0.7333333333333333], [-0.65, -0.565, -0.6666666666666666, 0.36]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the large size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.93144872225821 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light?
Type:
Classify: 2.5662927022203803 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
89
Understand: 14.220748476684093 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.905, -0.145, -0.6666666666666666, -0.9066666666666666], [0.065, -0.69, 0.3333333333333333, 0.6666666666666666], [-0.485, -0.275, 0.3333333333333333, -0.24], [0.39, 0.11, -0.6666666666666666, -0.5733333333333334], [0.655, 0.705, 0.6666666666666666, 0.7866666666666666], [-0.005, -0.885, 0.6666666666666666, 0.4], [-0.48, -0.115, -0.3333333333333333, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_dark
                    and check_b_top
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.827558954246342 seconds
Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top right dot is medium-sized and light and the bottom left dot is large-sized and light?
Type:
Classify: 1.8020387161523104 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is medium-sized and light and the bottom left dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 11.605570220388472 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.495, -0.53, 0.0, -0.84], [0.43, 0.155, 0.3333333333333333, 0.6666666666666666], [-0.12, 0.57, 0.3333333333333333, -0.24], [-0.895, 0.395, 1.0, 0.6533333333333333], [-0.64, -0.355, 0.6666666666666666, 0.32], [0.36, -0.035, 0.6666666666666666, 0.4], [-0.115, 0.73, -0.3333333333333333, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is medium-sized and light and the bottom left dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_left
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 13.450536500662565 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.714102801058962
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a medium-sized and grey-colored dot to the left and above those?
Type:
Classify: 2.0394977377727628 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and grey-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
58
Understand: 7.687040388584137 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.905, -0.145, -0.6666666666666666, -0.9066666666666666], [0.065, -0.69, 0.3333333333333333, 0.6666666666666666], [-0.485, -0.275, 0.3333333333333333, -0.24], [0.39, 0.11, -0.6666666666666666, -0.5733333333333334], [0.655, 0.705, 0.6666666666666666, 0.7866666666666666], [-0.005, -0.885, 0.6666666666666666, 0.4], [-0.48, -0.115, -0.3333333333333333, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes, is there a medium-sized and grey-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 5)]
Read after code: 9.757511793635786 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.896845843161276
GENERATE SELECT
[('medium', 'light')] [('medium', 'grey'), ('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 1.629401215352118 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 4.065541189163923 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.495, -0.53, 0.0, -0.84], [0.43, 0.155, 0.3333333333333333, 0.6666666666666666], [-0.12, 0.57, 0.3333333333333333, -0.24], [-0.895, 0.395, 1.0, 0.6533333333333333], [-0.64, -0.355, 0.6666666666666666, 0.32], [0.36, -0.035, 0.6666666666666666, 0.4], [-0.115, 0.73, -0.3333333333333333, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 5)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 5.729212244972587 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light?
Type:
Classify: 1.7078415770083666 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
89
Understand: 10.862108644098043 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.48, 0.035, 0.6666666666666666, -0.10666666666666667], [0.085, 0.14, 0.0, 0.06666666666666667], [-0.565, 0.245, -0.6666666666666666, 0.9866666666666667], [0.12, -0.865, -0.3333333333333333, -0.2], [-0.18, 0.565, 0.3333333333333333, -0.6666666666666666], [-0.225, 0.87, -0.6666666666666666, 0.8133333333333334], [0.155, -0.24, 0.0, 0.4]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_dark
                    and check_b_top
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5)]
Read after code: 12.612800089642406 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.71336694430909
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and grey-colored dot to the right and below those?
Type:
Classify: 2.804971014149487 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and grey-colored dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)```
84
Understand: 15.256345796398818 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.235, -0.65, 0.6666666666666666, -0.10666666666666667], [-0.63, -0.545, 0.0, 0.06666666666666667], [-0.055, 0.565, -0.6666666666666666, 0.5333333333333333], [0.4, 0.44, -0.6666666666666666, -0.64], [-0.895, -0.12, 0.3333333333333333, -0.6666666666666666], [-0.94, 0.185, -0.6666666666666666, 0.8133333333333334], [-0.165, 0.7, 1.0, 0.6666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, is there a medium-sized and grey-colored dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_grey
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4, 5)]
Read after code: 18.093165206722915 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9031093016834792
GENERATE SELECT
[('medium', 'dark')] [('medium', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and dark and the top dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and grey color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.8692594161257148 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 4.419894986785948 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.48, 0.035, 0.6666666666666666, -0.10666666666666667], [0.085, 0.14, 0.0, 0.06666666666666667], [-0.565, 0.245, -0.6666666666666666, 0.9866666666666667], [0.12, -0.865, -0.3333333333333333, -0.2], [-0.18, 0.565, 0.3333333333333333, -0.6666666666666666], [-0.225, 0.87, -0.6666666666666666, 0.8133333333333334], [0.155, -0.24, 0.0, 0.4]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.321213340386748 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
Type:
Classify: 1.8560795048251748 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 15.493521764874458 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.295, 0.875, -0.6666666666666666, 0.5466666666666666], [0.38, -0.4, -0.3333333333333333, -0.88], [0.435, 0.255, 0.0, 0.4266666666666667], [-0.66, 0.16, 0.3333333333333333, 0.18666666666666668], [0.73, -0.31, -1.0, -0.9066666666666666], [-0.67, -0.12, -0.6666666666666666, -0.96], [0.67, -0.625, 0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6), (1, 6)]
Read after code: 17.392120673321187 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6956999771692609
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and light-colored dot to the left and above those?
Type:
Classify: 2.6572049483656883 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_above = is_above(c, [a, b], ctx)
```
60
Understand: 10.231692580506206 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.05, -0.025, -0.3333333333333333, -0.88], [-0.155, -0.67, 0.0, -0.08], [0.005, 0.625, 0.0, 0.4266666666666667], [0.3, 0.06, -1.0, -0.9066666666666666], [0.64, -0.53, 0.6666666666666666, 0.84], [0.61, 0.62, 1.0, -0.5333333333333333], [0.24, -0.255, 0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                check_c_above = is_above(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_left
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 6)]
Read after code: 12.920366458594799 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8972668167316895
GENERATE SELECT
[('small', 'dark')] [('medium', 'light'), ('large', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.8576591983437538 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 3.5022019566968083 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.295, 0.875, -0.6666666666666666, 0.5466666666666666], [0.38, -0.4, -0.3333333333333333, -0.88], [0.435, 0.255, 0.0, 0.4266666666666667], [-0.66, 0.16, 0.3333333333333333, 0.18666666666666668], [0.73, -0.31, -1.0, -0.9066666666666666], [-0.67, -0.12, -0.6666666666666666, -0.96], [0.67, -0.625, 0.6666666666666666, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4, 6)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 5.391045845113695 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey?
Type:
Classify: 1.8294303929433227 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 12.605395670048892 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.795, 0.225, 0.3333333333333333, -0.8], [-0.48, -0.12, 0.0, 0.92], [-0.72, -0.355, 0.0, 0.18666666666666668], [-0.39, -0.5, 0.6666666666666666, 0.7066666666666667], [-0.425, -0.785, -1.0, -0.44], [-0.105, -0.74, 0.3333333333333333, 0.96], [-0.04, -0.335, 1.0, -0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2)]
Read after code: 14.477180236950517 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.708476105937503
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and dark color dot to the right of those?
Type:
Classify: 2.025144119746983 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and dark color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
```
44
Understand: 5.8258649948984385 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.03, -0.435, 0.0, 0.92], [0.325, 0.88, 0.0, -0.09333333333333334], [-0.25, 0.87, 0.6666666666666666, -0.6666666666666666], [-0.755, 0.4, -0.3333333333333333, 0.52], [-0.27, -0.67, 0.0, 0.18666666666666668], [0.06, -0.815, 0.6666666666666666, 0.7066666666666667], [0.415, -0.655, 1.0, -0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes. Is there a large size and dark color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_right_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4, 6)]
Read after code: 7.882832701317966 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8965579111676225
GENERATE SELECT
[('medium', 'light')] [('medium', 'grey'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and light and the bottom left dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and dark color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 1.935894331894815 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 4.4282939890399575 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.795, 0.225, 0.3333333333333333, -0.8], [-0.48, -0.12, 0.0, 0.92], [-0.72, -0.355, 0.0, 0.18666666666666668], [-0.39, -0.5, 0.6666666666666666, 0.7066666666666667], [-0.425, -0.785, -1.0, -0.44], [-0.105, -0.74, 0.3333333333333333, 0.96], [-0.04, -0.335, 1.0, -0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 6)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 6.395909268409014 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light?
Type:
Classify: 1.9664603546261787 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
90
Understand: 12.239063492976129 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.445, -0.145, 0.3333333333333333, -0.4266666666666667], [0.51, -0.535, -0.6666666666666666, -0.12], [-0.04, -0.14, 0.3333333333333333, -0.5066666666666667], [-0.585, -0.05, -0.6666666666666666, 0.05333333333333334], [0.79, -0.525, 0.6666666666666666, 0.6533333333333333], [0.955, -0.07, -0.6666666666666666, -0.7066666666666667], [-0.605, -0.525, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4)]
Read after code: 14.248735907487571 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7195155769617066
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and dark-colored dot to the left and above those?
Type:
Classify: 2.424775827676058 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_above = is_above(c, [a,b], ctx)
```
58
Understand: 6.850048068910837 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.66, 0.17, 0.6666666666666666, -0.6933333333333334], [0.145, 0.285, -0.6666666666666666, -0.12], [-0.5, -0.62, -1.0, 0.24], [-0.405, 0.68, 0.3333333333333333, -0.5066666666666667], [0.915, -0.385, 0.0, -0.9866666666666667], [0.425, 0.29, 0.6666666666666666, 0.6533333333333333], [0.585, 0.75, -0.6666666666666666, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_above = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_left
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3, 5)]
Read after code: 9.307958788238466 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8667208364650554
GENERATE SELECT
[('large', 'light')] [('small', 'grey'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and light color one. <selection>.
Type:
Classify: 1.8127562273293734 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 5.65137954801321 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.445, -0.145, 0.3333333333333333, -0.4266666666666667], [0.51, -0.535, -0.6666666666666666, -0.12], [-0.04, -0.14, 0.3333333333333333, -0.5066666666666667], [-0.585, -0.05, -0.6666666666666666, 0.05333333333333334], [0.79, -0.525, 0.6666666666666666, 0.6533333333333333], [0.955, -0.07, -0.6666666666666666, -0.7066666666666667], [-0.605, -0.525, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 4)]


# Turn 0
# Them: Yes, let's select the large size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 7.495674943551421 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
Type:
Classify: 1.73258685041219 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
96
Understand: 19.59873384051025 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, -0.115, -0.6666666666666666, -0.13333333333333333], [-0.825, -0.44, -0.3333333333333333, 0.28], [0.575, 0.355, -0.3333333333333333, -0.05333333333333334], [-0.845, 0.24, 0.0, 0.96], [-0.29, 0.74, 0.3333333333333333, -0.013333333333333334], [-0.37, 0.465, 0.3333333333333333, -0.84], [-0.49, 0.62, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6), (4, 5)]
Read after code: 21.372271467000246 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5407257383422606
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 2.1211336348205805 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
59
Understand: 8.772488602437079 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.15, 0.715, -0.3333333333333333, 0.92], [0.32, -0.215, -0.3333333333333333, -0.05333333333333334], [-0.55, 0.17, 0.3333333333333333, -0.013333333333333334], [0.195, 0.785, -0.3333333333333333, 0.22666666666666666], [-0.625, -0.11, 0.3333333333333333, -0.84], [0.595, 0.415, -0.3333333333333333, 0.02666666666666667], [-0.745, 0.045, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.92487614788115 seconds
Followup config inclusion prob: 0.5413639726489505
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type:
Classify: 2.261950597167015 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
61
Understand: 9.96870934870094 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, -0.115, -0.6666666666666666, -0.13333333333333333], [-0.825, -0.44, -0.3333333333333333, 0.28], [0.575, 0.355, -0.3333333333333333, -0.05333333333333334], [-0.845, 0.24, 0.0, 0.96], [-0.29, 0.74, 0.3333333333333333, -0.013333333333333334], [-0.37, 0.465, 0.3333333333333333, -0.84], [-0.49, 0.62, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6), (4, 5)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.265934352762997 seconds
Followup config inclusion prob: 0.5407257383422606
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, is there a medium-sized and light-colored dot to the left and below those?
Type:
Classify: 2.4415655620396137 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and light-colored dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
58
Understand: 10.886174316518009 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.15, 0.715, -0.3333333333333333, 0.92], [0.32, -0.215, -0.3333333333333333, -0.05333333333333334], [-0.55, 0.17, 0.3333333333333333, -0.013333333333333334], [0.195, 0.785, -0.3333333333333333, 0.22666666666666666], [-0.625, -0.11, 0.3333333333333333, -0.84], [0.595, 0.415, -0.3333333333333333, 0.02666666666666667], [-0.745, 0.045, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: No, is there a medium-sized and light-colored dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.364929779432714 seconds
Followup config inclusion prob: 0.5413639726489505
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Is there a medium size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and light color dot to the right and above those?
Type:
Classify: 2.755632845684886 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right_ab = is_right(c, [a, b], ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
```
61
Understand: 9.518960009329021 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, -0.115, -0.6666666666666666, -0.13333333333333333], [-0.825, -0.44, -0.3333333333333333, 0.28], [0.575, 0.355, -0.3333333333333333, -0.05333333333333334], [-0.845, 0.24, 0.0, 0.96], [-0.29, 0.74, 0.3333333333333333, -0.013333333333333334], [-0.37, 0.465, 0.3333333333333333, -0.84], [-0.49, 0.62, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6), (4, 5)]


# Turn 0
# Them: No. Is there a small size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right_ab = is_right(c, [a, b], ctx)
                check_c_above_ab = is_above(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.312194092199206 seconds
Followup config inclusion prob: 0.5407257383422606
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Is there a medium size and light color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Is there a small size and grey color dot to the right and below those?
Type:
Classify: 3.0193064846098423 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
83
Understand: 16.00695099402219 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.15, 0.715, -0.3333333333333333, 0.92], [0.32, -0.215, -0.3333333333333333, -0.05333333333333334], [-0.55, 0.17, 0.3333333333333333, -0.013333333333333334], [0.195, 0.785, -0.3333333333333333, 0.22666666666666666], [-0.625, -0.11, 0.3333333333333333, -0.84], [0.595, 0.415, -0.3333333333333333, 0.02666666666666667], [-0.745, 0.045, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 6)]
Read after code: 19.063478227704763 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6046539183740031
GENERATE SELECT
[('medium', 'grey')] [('small', 'grey'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Is there a medium size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and light color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Is there a small size and grey color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.5596750741824508 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 4.89816826954484 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.535, -0.115, -0.6666666666666666, -0.13333333333333333], [-0.825, -0.44, -0.3333333333333333, 0.28], [0.575, 0.355, -0.3333333333333333, -0.05333333333333334], [-0.845, 0.24, 0.0, 0.96], [-0.29, 0.74, 0.3333333333333333, -0.013333333333333334], [-0.37, 0.465, 0.3333333333333333, -0.84], [-0.49, 0.62, 0.0, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,), (2,)]
Read after code: 7.489658636972308 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey?
Type:
Classify: 1.5452921688556671 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 10.690129918977618 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.51, -0.48, -1.0, 0.8933333333333333], [0.65, -0.265, 0.6666666666666666, 0.25333333333333335], [-0.07, 0.845, -1.0, -0.04], [0.37, 0.3, 0.6666666666666666, -0.96], [0.465, -0.885, 1.0, -0.22666666666666666], [0.775, 0.345, 0.6666666666666666, -0.17333333333333334], [-0.91, -0.055, 0.0, 0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 5)]
Read after code: 12.279582471586764 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6988482881249352
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and grey color dot below those?
Type:
Classify: 3.576628868468106 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and grey color dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_below_ab = is_below(c, [a, b], ctx)
46
Understand: 6.149433280341327 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.17, -0.165, 0.6666666666666666, 0.25333333333333335], [0.62, -0.53, -1.0, -0.08], [-0.45, 0.4, 0.6666666666666666, -0.96], [-0.355, -0.785, 1.0, -0.22666666666666666], [-0.045, 0.445, 0.6666666666666666, -0.17333333333333334], [0.56, 0.445, -0.6666666666666666, 0.8], [-0.185, -0.85, 0.6666666666666666, -0.44]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4)]


# Turn 0
# Them: Yes, is there a large size and grey color dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 4), (2, 3, 4)]
Read after code: 9.756785661913455 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6337609653844911
GENERATE SELECT
[('large', 'grey')] [('large', 'grey'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is large-sized and dark and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 1.875236307270825 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 5.2319331876933575 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.51, -0.48, -1.0, 0.8933333333333333], [0.65, -0.265, 0.6666666666666666, 0.25333333333333335], [-0.07, 0.845, -1.0, -0.04], [0.37, 0.3, 0.6666666666666666, -0.96], [0.465, -0.885, 1.0, -0.22666666666666666], [0.775, 0.345, 0.6666666666666666, -0.17333333333333334], [-0.91, -0.055, 0.0, 0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3, 5)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,), (5,)]
Read after code: 7.1390271401032805 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark?
Type:
Classify: 2.2735080448910594 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.382885158993304 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.64, 0.655, 0.3333333333333333, -0.72], [0.695, 0.205, 1.0, -0.9333333333333333], [0.385, 0.115, 0.0, 0.41333333333333333], [-0.61, 0.42, 0.6666666666666666, -0.5866666666666667], [0.42, -0.35, -0.6666666666666666, -0.09333333333333334], [0.925, 0.03, 0.3333333333333333, -0.6933333333333334], [-0.885, -0.28, -0.6666666666666666, 0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 14.698922347277403 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5493258587000517
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 2.1879270477220416 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
59
Understand: 8.474229414016008 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.815, -0.1, 0.3333333333333333, -0.72], [0.88, -0.47, 0.0, 0.21333333333333335], [0.155, 0.68, -0.6666666666666666, -0.48], [0.515, -0.55, 1.0, -0.9333333333333333], [0.21, -0.64, 0.0, 0.41333333333333333], [-0.79, -0.335, 0.6666666666666666, -0.5866666666666667], [0.245, 0.29, -1.0, 0.2]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.687148683704436 seconds
Followup config inclusion prob: 0.5284128698191408
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a medium-sized and light-colored dot to the right and below those?
Type:
Classify: 2.3709953436627984 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and light-colored dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
57
Understand: 9.396988113410771 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.64, 0.655, 0.3333333333333333, -0.72], [0.695, 0.205, 1.0, -0.9333333333333333], [0.385, 0.115, 0.0, 0.41333333333333333], [-0.61, 0.42, 0.6666666666666666, -0.5866666666666667], [0.42, -0.35, -0.6666666666666666, -0.09333333333333334], [0.925, 0.03, 0.3333333333333333, -0.6933333333333334], [-0.885, -0.28, -0.6666666666666666, 0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: No, is there a medium-sized and light-colored dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_right
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 3)]
Read after code: 11.803952024318278 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.873536344721249
GENERATE SELECT
[('medium', 'dark')] [('medium', 'light'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a medium size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 2.7088666670024395 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 3.4756242046132684 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.815, -0.1, 0.3333333333333333, -0.72], [0.88, -0.47, 0.0, 0.21333333333333335], [0.155, 0.68, -0.6666666666666666, -0.48], [0.515, -0.55, 1.0, -0.9333333333333333], [0.21, -0.64, 0.0, 0.41333333333333333], [-0.79, -0.335, 0.6666666666666666, -0.5866666666666667], [0.245, 0.29, -1.0, 0.2]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 6.217686150223017 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light?
Type:
Classify: 1.8396391039714217 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
89
Understand: 12.133093046955764 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.26, 0.02, 1.0, 0.8], [0.13, 0.155, 1.0, -0.4], [-0.175, -0.695, 0.3333333333333333, 0.6133333333333333], [-0.885, 0.09, 0.0, 0.5066666666666667], [-0.595, 0.025, -0.6666666666666666, 0.9066666666666666], [0.09, -0.64, 0.3333333333333333, -0.9333333333333333], [0.4, -0.44, 0.0, -0.92]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 4)]
Read after code: 14.017294959165156 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7132491315058107
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the right and below those?
Type:
Classify: 2.2912297109141946 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 8.940296056680381 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.37, -0.225, 1.0, 0.8], [0.76, -0.09, 1.0, -0.4], [-0.305, 0.14, 0.0, 0.52], [-0.255, -0.155, 0.0, 0.5066666666666667], [-0.73, 0.33, 1.0, -0.9866666666666667], [0.035, -0.22, -0.6666666666666666, 0.9066666666666666], [-0.545, 0.22, -0.6666666666666666, 0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 5)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 5)]
Read after code: 11.263387955725193 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6190237275068642
GENERATE SELECT
[('small', 'light')] [('large', 'light'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and light and the right dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 2.174443774856627 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 3.890984298661351 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.26, 0.02, 1.0, 0.8], [0.13, 0.155, 1.0, -0.4], [-0.175, -0.695, 0.3333333333333333, 0.6133333333333333], [-0.885, 0.09, 0.0, 0.5066666666666667], [-0.595, 0.025, -0.6666666666666666, 0.9066666666666666], [0.09, -0.64, 0.3333333333333333, -0.9333333333333333], [0.4, -0.44, 0.0, -0.92]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 4)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.097601285204291 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light?
Type:
Classify: 2.6452470486983657 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 16.186051631346345 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.535, 0.415, -0.3333333333333333, 0.4], [0.58, 0.795, 0.0, 0.6666666666666666], [0.64, -0.245, 0.6666666666666666, -0.5333333333333333], [-0.76, -0.41, 0.3333333333333333, 0.08], [-0.45, 0.39, 0.0, 0.9066666666666666], [-0.155, -0.02, -0.6666666666666666, -0.21333333333333335], [0.19, 0.82, 1.0, 0.5066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 18.873055754229426 seconds
Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and light?
Type:
Classify: 1.6497540697455406 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 16.99982102960348 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.24, -0.615, -0.3333333333333333, 0.4], [0.285, -0.235, 0.0, 0.6666666666666666], [-0.5, 0.415, 0.0, -0.04], [-0.495, 0.805, -0.3333333333333333, -0.9866666666666667], [-0.16, 0.215, 0.3333333333333333, 0.7466666666666667], [-0.745, -0.64, 0.0, 0.9066666666666666], [-0.105, -0.21, 1.0, 0.5066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_light
                    and check_b_top
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1)]
Read after code: 18.690731598064303 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7061320164108842
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a large size and light color dot to the left and above those?
Type:
Classify: 2.288843013346195 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 10.608791598118842 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.535, 0.415, -0.3333333333333333, 0.4], [0.58, 0.795, 0.0, 0.6666666666666666], [0.64, -0.245, 0.6666666666666666, -0.5333333333333333], [-0.76, -0.41, 0.3333333333333333, 0.08], [-0.45, 0.39, 0.0, 0.9066666666666666], [-0.155, -0.02, -0.6666666666666666, -0.21333333333333335], [0.19, 0.82, 1.0, 0.5066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 6)]
Read after code: 12.929984277114272 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9007305684236692
GENERATE SELECT
[('small', 'light')] [('medium', 'light'), ('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is medium-sized and grey and the right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 2.416955138556659 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 5.5879849111661315 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.24, -0.615, -0.3333333333333333, 0.4], [0.285, -0.235, 0.0, 0.6666666666666666], [-0.5, 0.415, 0.0, -0.04], [-0.495, 0.805, -0.3333333333333333, -0.9866666666666667], [-0.16, 0.215, 0.3333333333333333, 0.7466666666666667], [-0.745, -0.64, 0.0, 0.9066666666666666], [-0.105, -0.21, 1.0, 0.5066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 6)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 8.037333474494517 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and grey?
Type:
Classify: 1.7568156449124217 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 13.396520288661122 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.09, -0.855, -0.3333333333333333, 0.92], [0.595, 0.56, -0.3333333333333333, -0.4533333333333333], [-0.425, -0.43, 0.6666666666666666, -0.4], [-0.995, -0.095, -0.6666666666666666, 0.9866666666666667], [-0.065, -0.06, 0.6666666666666666, 0.36], [0.595, -0.03, 0.0, 0.64], [0.095, -0.53, 0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_light
                    and check_b_bottom
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 15.192673550918698 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7166287708220618
GENERATE SELECT
[('large', 'light')] [('medium', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and light and the bottom dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the large size and light color one. <selection>.
Type:
Classify: 2.4588622003793716 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 3.219927835278213 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.77, 0.63, 1.0, 0.8133333333333334], [0.085, 0.2, -0.3333333333333333, -0.4533333333333333], [0.635, 0.265, -0.3333333333333333, -0.56], [-0.58, -0.42, 0.6666666666666666, 0.36], [0.26, 0.69, 0.0, 0.0], [0.085, -0.395, 0.0, 0.64], [-0.42, -0.89, 0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: Yes, let's select the large size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,), (6,)]
Read after code: 5.711941270157695 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is medium-sized and grey?
Type:
Classify: 1.4303617291152477 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
93
Understand: 14.959945002570748 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.935, 0.335, 0.3333333333333333, 0.7733333333333333], [-0.305, -0.555, -0.6666666666666666, 0.16], [-0.68, -0.28, -0.3333333333333333, -0.44], [-0.155, 0.935, -0.6666666666666666, -0.88], [0.4, -0.035, -0.6666666666666666, -0.44], [-0.505, -0.24, 0.3333333333333333, 0.26666666666666666], [-0.14, -0.89, -0.6666666666666666, -0.5466666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_grey
                    and check_b_top
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 16.434126830659807 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7196592854847426
GENERATE SELECT
[('medium', 'grey')] [('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.039538192562759 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 6.025015328079462 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.805, -0.285, 0.0, -0.7466666666666667], [0.855, -0.49, -1.0, 0.12], [-0.525, 0.33, -0.6666666666666666, 0.16], [0.18, 0.85, -0.6666666666666666, -0.44], [-0.725, 0.645, 0.3333333333333333, 0.26666666666666666], [-0.36, -0.005, -0.6666666666666666, -0.5466666666666666], [0.42, 0.045, -0.6666666666666666, 0.4266666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 8.098210669122636 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light?
Type:
Classify: 1.658036569133401 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 17.59752246644348 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.19, 0.275, -0.3333333333333333, -0.9066666666666666], [0.525, 0.485, 0.6666666666666666, 0.9866666666666667], [0.09, -0.91, 0.6666666666666666, -0.7066666666666667], [-0.28, -0.34, -0.3333333333333333, 0.013333333333333334], [-0.23, -0.635, -0.6666666666666666, 0.8266666666666667], [0.68, -0.02, 0.6666666666666666, 0.13333333333333333], [-0.365, 0.715, 0.6666666666666666, 0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_dark
                    and check_b_top_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1)]
Read after code: 19.290984705090523 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7151949887385436
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 3.1822958877310157 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
61
Understand: 10.097129222005606 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.105, -0.305, -0.3333333333333333, -0.9066666666666666], [0.52, 0.515, 0.3333333333333333, -0.08], [0.23, -0.095, 0.6666666666666666, 0.9866666666666667], [0.765, 0.55, 0.3333333333333333, -0.4533333333333333], [0.385, -0.6, 0.6666666666666666, 0.13333333333333333], [-0.66, 0.135, 0.6666666666666666, 0.21333333333333335], [0.34, 0.32, 0.3333333333333333, -0.6666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.310265098698437 seconds
Followup config inclusion prob: 0.7273868440017963
GENERATE SELECT
[('large', 'light')] [('small', 'dark')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, let's select the one that is large in size and light in color. <selection>.
Type:
Classify: 3.003830957226455 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the one that is large in size and light in color. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 3.404359709471464 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.19, 0.275, -0.3333333333333333, -0.9066666666666666], [0.525, 0.485, 0.6666666666666666, 0.9866666666666667], [0.09, -0.91, 0.6666666666666666, -0.7066666666666667], [-0.28, -0.34, -0.3333333333333333, 0.013333333333333334], [-0.23, -0.635, -0.6666666666666666, 0.8266666666666667], [0.68, -0.02, 0.6666666666666666, 0.13333333333333333], [-0.365, 0.715, 0.6666666666666666, 0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1)]


# Turn 0
# Them: No, let's select the one that is large in size and light in color. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 6.442197607830167 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
Type:
Classify: 2.4719138825312257 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 13.21908334363252 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.905, -0.11, -1.0, 0.0], [0.225, -0.3, -0.6666666666666666, -0.72], [-0.515, -0.165, -0.3333333333333333, -0.25333333333333335], [-0.56, 0.81, 0.0, -0.56], [0.8, -0.34, 0.6666666666666666, -0.44], [0.13, 0.4, -0.3333333333333333, 0.88], [0.055, -0.88, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2)]
Read after code: 15.733341598883271 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7032900700200473
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and dark color dot to the right and below those?
Type:
Classify: 2.5053234016522765 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 8.200700630433857 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.305, -0.175, -0.6666666666666666, -0.72], [0.395, -0.705, -1.0, 0.26666666666666666], [0.7, 0.625, -0.6666666666666666, 0.16], [0.595, -0.26, -0.3333333333333333, -0.7733333333333333], [0.275, -0.215, 0.6666666666666666, -0.44], [-0.4, 0.525, -0.3333333333333333, 0.88], [-0.47, -0.755, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.7393683437258 seconds
Followup config inclusion prob: 0.37937083816424044
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type:
Classify: 1.306419087573886 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
84
Understand: 12.420751774683595 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.905, -0.11, -1.0, 0.0], [0.225, -0.3, -0.6666666666666666, -0.72], [-0.515, -0.165, -0.3333333333333333, -0.25333333333333335], [-0.56, 0.81, 0.0, -0.56], [0.8, -0.34, 0.6666666666666666, -0.44], [0.13, 0.4, -0.3333333333333333, 0.88], [0.055, -0.88, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.762703331187367 seconds
Followup config inclusion prob: 0.7032900700200473
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, is there a small size and dark color dot to the right and below those?
Type:
Classify: 2.244374874047935 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
81
Understand: 12.897617107257247 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.305, -0.175, -0.6666666666666666, -0.72], [0.395, -0.705, -1.0, 0.26666666666666666], [0.7, 0.625, -0.6666666666666666, 0.16], [0.595, -0.26, -0.3333333333333333, -0.7733333333333333], [0.275, -0.215, 0.6666666666666666, -0.44], [-0.4, 0.525, -0.3333333333333333, 0.88], [-0.47, -0.755, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3)]


# Turn 0
# Them: No, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.179886600002646 seconds
Followup config inclusion prob: 0.37937083816424044
Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, do you see a pair of dots where the bottom dot is small-sized and dark and the top dot is small-sized and light?
Type:
Classify: 1.4418951431289315 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and dark and the top dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 11.80370080564171 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.905, -0.11, -1.0, 0.0], [0.225, -0.3, -0.6666666666666666, -0.72], [-0.515, -0.165, -0.3333333333333333, -0.25333333333333335], [-0.56, 0.81, 0.0, -0.56], [0.8, -0.34, 0.6666666666666666, -0.44], [0.13, 0.4, -0.3333333333333333, 0.88], [0.055, -0.88, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and dark and the top dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_dark
                    and check_b_top
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.285988468676805 seconds
Followup config inclusion prob: 0.7032900700200473
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 5: No, is there a small size and light color dot to the right and above those?
Type:
Classify: 3.219867476262152 seconds
Follow up question, new dots.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: ,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_above = is_above(c, [a, b], ctx)
```
59
Understand: 7.410677247680724 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.305, -0.175, -0.6666666666666666, -0.72], [0.395, -0.705, -1.0, 0.26666666666666666], [0.7, 0.625, -0.6666666666666666, 0.16], [0.595, -0.26, -0.3333333333333333, -0.7733333333333333], [0.275, -0.215, 0.6666666666666666, -0.44], [-0.4, 0.525, -0.3333333333333333, 0.88], [-0.47, -0.755, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3)]


# Turn 0
# Them: No, is there a small size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for , in get0idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_above = is_above(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_right
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
None
Read after code: 10.666189980693161 seconds
Followup config inclusion prob: 0.37937083816424044
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: Is there a small size and light color dot left of those?
Type:
Classify: 2.3509732326492667 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
42
Understand: 6.406282167881727 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.905, -0.11, -1.0, 0.0], [0.225, -0.3, -0.6666666666666666, -0.72], [-0.515, -0.165, -0.3333333333333333, -0.25333333333333335], [-0.56, 0.81, 0.0, -0.56], [0.8, -0.34, 0.6666666666666666, -0.44], [0.13, 0.4, -0.3333333333333333, 0.88], [0.055, -0.88, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Is there a small size and light color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 5)]
Read after code: 8.794587663374841 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8907803381009629
GENERATE SELECT
[('small', 'grey')] [('small', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 5: No. Is there a small size and light color dot to the right and above those? <eos>
Type: No op.
New dots: 0
End
Turn 6: Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.009110802784562 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 5.253322595730424 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.305, -0.175, -0.6666666666666666, -0.72], [0.395, -0.705, -1.0, 0.26666666666666666], [0.7, 0.625, -0.6666666666666666, 0.16], [0.595, -0.26, -0.3333333333333333, -0.7733333333333333], [0.275, -0.215, 0.6666666666666666, -0.44], [-0.4, 0.525, -0.3333333333333333, 0.88], [-0.47, -0.755, -0.3333333333333333, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2,)]
Read after code: 7.294707809574902 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark?
Type:
Classify: 1.8873517904430628 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.043326837942004 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.795, -0.33, 0.3333333333333333, 0.8933333333333333], [-0.215, 0.055, 0.0, 0.5866666666666667], [0.36, -0.625, 0.6666666666666666, 0.7466666666666667], [0.13, 0.36, 0.0, 0.7466666666666667], [-0.285, -0.36, 0.6666666666666666, -0.4266666666666667], [-0.505, 0.045, -0.3333333333333333, 0.6933333333333334], [-0.655, -0.615, 0.6666666666666666, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4), (4, 5)]
Read after code: 13.976644094102085 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.38053804522366264
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the right and below those?
Type:
Classify: 2.7071018014103174 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 9.14360367320478 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.73, 0.44, 0.0, 0.5866666666666667], [-0.6, 0.45, 0.3333333333333333, -0.21333333333333335], [-0.41, -0.125, 0.6666666666666666, 0.8666666666666667], [-0.175, 0.165, -0.6666666666666666, -0.2], [0.655, 0.025, 0.6666666666666666, -0.4266666666666667], [0.435, 0.435, -0.3333333333333333, 0.6933333333333334], [0.285, -0.225, 0.6666666666666666, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.882125096395612 seconds
Followup config inclusion prob: 0.542321227275062
IN READ
No
UPDATED BELIEF denied
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot left of those?
Type:
Classify: 2.514957026578486 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
44
Understand: 6.038393808528781 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.795, -0.33, 0.3333333333333333, 0.8933333333333333], [-0.215, 0.055, 0.0, 0.5866666666666667], [0.36, -0.625, 0.6666666666666666, 0.7466666666666667], [0.13, 0.36, 0.0, 0.7466666666666667], [-0.285, -0.36, 0.6666666666666666, -0.4266666666666667], [-0.505, 0.045, -0.3333333333333333, 0.6933333333333334], [-0.655, -0.615, 0.6666666666666666, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4), (4, 5)]


# Turn 0
# Them: No. Is there a small size and grey color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 8.586495030671358 seconds
Followup config inclusion prob: 0.3191047258668228
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, is there a large size and dark color dot to the left and below those?
Type:
Classify: 2.488576556555927 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a large size and dark color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 8.322960136458278 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.73, 0.44, 0.0, 0.5866666666666667], [-0.6, 0.45, 0.3333333333333333, -0.21333333333333335], [-0.41, -0.125, 0.6666666666666666, 0.8666666666666667], [-0.175, 0.165, -0.6666666666666666, -0.2], [0.655, 0.025, 0.6666666666666666, -0.4266666666666667], [0.435, 0.435, -0.3333333333333333, 0.6933333333333334], [0.285, -0.225, 0.6666666666666666, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: No, is there a large size and dark color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4, 6)]
Read after code: 10.850056510418653 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8669314480172858
GENERATE SELECT
[('medium', 'light')] [('large', 'dark'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is large-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot left of those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Is there a large size and dark color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 2.3056225134059787 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 5.270024538971484 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.795, -0.33, 0.3333333333333333, 0.8933333333333333], [-0.215, 0.055, 0.0, 0.5866666666666667], [0.36, -0.625, 0.6666666666666666, 0.7466666666666667], [0.13, 0.36, 0.0, 0.7466666666666667], [-0.285, -0.36, 0.6666666666666666, -0.4266666666666667], [-0.505, 0.045, -0.3333333333333333, 0.6933333333333334], [-0.655, -0.615, 0.6666666666666666, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4, 6)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 7.608667037449777 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey?
Type:
Classify: 1.892925770021975 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
97
Understand: 14.900862464681268 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.025, 0.565, 0.6666666666666666, -0.5466666666666666], [0.565, 0.715, 0.3333333333333333, -0.6133333333333333], [0.485, 0.09, 0.3333333333333333, 0.56], [-0.58, -0.425, -0.6666666666666666, 0.17333333333333334], [-0.62, 0.155, -0.3333333333333333, 0.3333333333333333], [0.36, -0.21, -0.6666666666666666, -0.76], [-0.22, 0.435, 0.0, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_grey
                    and check_b_top_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6), (3, 4)]
Read after code: 16.829344924539328 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5613130918344367
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and dark color dot to the right and above those?
Type:
Classify: 2.0482457065954804 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
81
Understand: 18.651074619032443 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.02, -0.91, -0.3333333333333333, -0.5066666666666667], [0.665, 0.605, 0.6666666666666666, -0.5466666666666666], [-0.725, 0.105, 0.0, -0.09333333333333334], [0.06, -0.385, -0.6666666666666666, 0.17333333333333334], [0.015, 0.195, -0.3333333333333333, 0.3333333333333333], [-0.59, 0.7, -0.3333333333333333, -0.49333333333333335], [0.42, 0.475, 0.0, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes, is there a large size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4, 6)]
Read after code: 20.735806002281606 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6447402737573515
GENERATE SELECT
[('medium', 'grey')] [('large', 'dark'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.402459578588605 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 4.817472347989678 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.025, 0.565, 0.6666666666666666, -0.5466666666666666], [0.565, 0.715, 0.3333333333333333, -0.6133333333333333], [0.485, 0.09, 0.3333333333333333, 0.56], [-0.58, -0.425, -0.6666666666666666, 0.17333333333333334], [-0.62, 0.155, -0.3333333333333333, 0.3333333333333333], [0.36, -0.21, -0.6666666666666666, -0.76], [-0.22, 0.435, 0.0, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,), (6,)]
Read after code: 7.251539668999612 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark?
Type:
Classify: 1.9103127513080835 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
94
Understand: 17.854977790266275 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.355, 0.66, 0.6666666666666666, -0.24], [0.135, -0.525, -1.0, 0.12], [-0.175, 0.96, 0.0, 0.0], [0.35, -0.895, -0.3333333333333333, 0.7466666666666667], [-0.335, -0.845, 0.3333333333333333, -0.41333333333333333], [0.56, 0.23, 1.0, 0.5333333333333333], [0.615, -0.58, 0.0, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_top_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.805830724537373 seconds
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
Type:
Classify: 1.5150072947144508 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
94
Understand: 16.894600750878453 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.08, -1.0, 0.12], [0.54, -0.445, -0.3333333333333333, 0.7466666666666667], [-0.57, -0.69, 0.0, -0.52], [-0.89, 0.235, 0.6666666666666666, -0.09333333333333334], [0.085, -0.665, -0.6666666666666666, 0.38666666666666666], [-0.145, -0.4, 0.3333333333333333, -0.41333333333333333], [0.805, -0.135, 0.0, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1), (1, 4)]
Read after code: 18.450196609832346 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7083078362045901
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium-sized and dark-colored dot left of those?
Type:
Classify: 3.3189787613227963 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a medium-sized and dark-colored dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left_ab = is_left(c, [a, b], ctx)
45
Understand: 6.299051757901907 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.355, 0.66, 0.6666666666666666, -0.24], [0.135, -0.525, -1.0, 0.12], [-0.175, 0.96, 0.0, 0.0], [0.35, -0.895, -0.3333333333333333, 0.7466666666666667], [-0.335, -0.845, 0.3333333333333333, -0.41333333333333333], [0.56, 0.23, 1.0, 0.5333333333333333], [0.615, -0.58, 0.0, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes. Is there a medium-sized and dark-colored dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3, 6), (1, 3, 4)]
Read after code: 9.649835055693984 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8981339468155023
GENERATE SELECT
[('small', 'grey')] [('small', 'light'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium size and dark color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 1.6558344513177872 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 5.914356817491353 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.325, -0.08, -1.0, 0.12], [0.54, -0.445, -0.3333333333333333, 0.7466666666666667], [-0.57, -0.69, 0.0, -0.52], [-0.89, 0.235, 0.6666666666666666, -0.09333333333333334], [0.085, -0.665, -0.6666666666666666, 0.38666666666666666], [-0.145, -0.4, 0.3333333333333333, -0.41333333333333333], [0.805, -0.135, 0.0, -0.7066666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 7.604019344784319 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light?
Type:
Classify: 1.7683995608240366 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 11.853108934126794 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.615, -0.62, -0.6666666666666666, -0.13333333333333333], [-0.045, 0.555, -0.6666666666666666, 0.08], [0.66, -0.08, -0.3333333333333333, 0.6133333333333333], [-0.065, -0.355, -0.6666666666666666, 0.38666666666666666], [-0.815, 0.385, -0.3333333333333333, 0.5733333333333334], [-0.98, -0.095, -0.3333333333333333, -0.14666666666666667], [0.285, -0.475, 0.3333333333333333, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.664332411251962 seconds
Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
Type:
Classify: 1.7044566897675395 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 14.326545296236873 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.4, -0.8, -0.3333333333333333, 0.41333333333333333], [0.49, 0.22, -0.6666666666666666, 0.08], [-0.195, 0.35, 0.6666666666666666, -0.5333333333333333], [0.47, -0.695, -0.6666666666666666, 0.38666666666666666], [-0.28, 0.05, -0.3333333333333333, 0.5733333333333334], [0.28, 0.855, 0.0, -0.9866666666666667], [-0.445, -0.43, -0.3333333333333333, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_light
                    and check_b_bottom
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 16.07450994849205 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.18284385822326837
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a large size and dark color dot to the right and above those?
Type:
Classify: 2.32554304972291 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)
```
55
Understand: 7.230470180511475 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.615, -0.62, -0.6666666666666666, -0.13333333333333333], [-0.045, 0.555, -0.6666666666666666, 0.08], [0.66, -0.08, -0.3333333333333333, 0.6133333333333333], [-0.065, -0.355, -0.6666666666666666, 0.38666666666666666], [-0.815, 0.385, -0.3333333333333333, 0.5733333333333334], [-0.98, -0.095, -0.3333333333333333, -0.14666666666666667], [0.285, -0.475, 0.3333333333333333, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, is there a large size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.589300158433616 seconds
Followup config inclusion prob: 0.41258183270419607
Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is medium-sized and dark?
Type:
Classify: 1.9987368555739522 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 13.39277100842446 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.4, -0.8, -0.3333333333333333, 0.41333333333333333], [0.49, 0.22, -0.6666666666666666, 0.08], [-0.195, 0.35, 0.6666666666666666, -0.5333333333333333], [0.47, -0.695, -0.6666666666666666, 0.38666666666666666], [-0.28, 0.05, -0.3333333333333333, 0.5733333333333334], [0.28, 0.855, 0.0, -0.9866666666666667], [-0.445, -0.43, -0.3333333333333333, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.43534939084202 seconds
Followup config inclusion prob: 0.18284385822326837
Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
Type:
Classify: 1.8788440749049187 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 13.061627519316971 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.615, -0.62, -0.6666666666666666, -0.13333333333333333], [-0.045, 0.555, -0.6666666666666666, 0.08], [0.66, -0.08, -0.3333333333333333, 0.6133333333333333], [-0.065, -0.355, -0.6666666666666666, 0.38666666666666666], [-0.815, 0.385, -0.3333333333333333, 0.5733333333333334], [-0.98, -0.095, -0.3333333333333333, -0.14666666666666667], [0.285, -0.475, 0.3333333333333333, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_light
                    and check_b_top
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.981059378944337 seconds
Followup config inclusion prob: 0.41258183270419607
Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is small-sized and light?
Type:
Classify: 1.6404754826799035 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 14.031912673264742 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.4, -0.8, -0.3333333333333333, 0.41333333333333333], [0.49, 0.22, -0.6666666666666666, 0.08], [-0.195, 0.35, 0.6666666666666666, -0.5333333333333333], [0.47, -0.695, -0.6666666666666666, 0.38666666666666666], [-0.28, 0.05, -0.3333333333333333, 0.5733333333333334], [0.28, 0.855, 0.0, -0.9866666666666667], [-0.445, -0.43, -0.3333333333333333, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.71398333273828 seconds
Followup config inclusion prob: 0.18284385822326837
Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
Type:
Classify: 1.6557493321597576 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 14.23925800807774 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.615, -0.62, -0.6666666666666666, -0.13333333333333333], [-0.045, 0.555, -0.6666666666666666, 0.08], [0.66, -0.08, -0.3333333333333333, 0.6133333333333333], [-0.065, -0.355, -0.6666666666666666, 0.38666666666666666], [-0.815, 0.385, -0.3333333333333333, 0.5733333333333334], [-0.98, -0.095, -0.3333333333333333, -0.14666666666666667], [0.285, -0.475, 0.3333333333333333, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.938078756444156 seconds
Followup config inclusion prob: 0.41258183270419607
Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 7: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is medium-sized and dark?
Type:
Classify: 1.6829753490164876 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 14.410638851113617 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.4, -0.8, -0.3333333333333333, 0.41333333333333333], [0.49, 0.22, -0.6666666666666666, 0.08], [-0.195, 0.35, 0.6666666666666666, -0.5333333333333333], [0.47, -0.695, -0.6666666666666666, 0.38666666666666666], [-0.28, 0.05, -0.3333333333333333, 0.5733333333333334], [0.28, 0.855, 0.0, -0.9866666666666667], [-0.445, -0.43, -0.3333333333333333, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is small-sized and grey and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.13424866553396 seconds
Followup config inclusion prob: 0.18284385822326837
Do you see a pair of dots, where the bottom right dot is small-sized and grey and the top left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 7: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 8: No, do you see a pair of dots where the bottom right dot is small-sized and grey and the top left dot is medium-sized and dark?
Type:
Classify: 1.9410420283675194 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is small-sized and grey and the top left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
95
Understand: 15.67432386148721 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.615, -0.62, -0.6666666666666666, -0.13333333333333333], [-0.045, 0.555, -0.6666666666666666, 0.08], [0.66, -0.08, -0.3333333333333333, 0.6133333333333333], [-0.065, -0.355, -0.6666666666666666, 0.38666666666666666], [-0.815, 0.385, -0.3333333333333333, 0.5733333333333334], [-0.98, -0.095, -0.3333333333333333, -0.14666666666666667], [0.285, -0.475, 0.3333333333333333, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is small-sized and grey and the top left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_small
                    and check_a_grey
                    and check_b_top_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 6)]
Read after code: 17.658839723095298 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7811297631803984
GENERATE SELECT
[('small', 'grey')] [('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 7: No. Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 8: No. Do you see a pair of dots, where the bottom right dot is small-sized and grey and the top left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 9: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 1.709831957705319 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 6.122233089059591 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.4, -0.8, -0.3333333333333333, 0.41333333333333333], [0.49, 0.22, -0.6666666666666666, 0.08], [-0.195, 0.35, 0.6666666666666666, -0.5333333333333333], [0.47, -0.695, -0.6666666666666666, 0.38666666666666666], [-0.28, 0.05, -0.3333333333333333, 0.5733333333333334], [0.28, 0.855, 0.0, -0.9866666666666667], [-0.445, -0.43, -0.3333333333333333, -0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 7.8662433959543705 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey?
Type:
Classify: 2.1413443898782134 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
95
Understand: 13.691388669423759 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.065, 0.525, -0.6666666666666666, 0.6666666666666666], [-0.19, -0.18, 0.3333333333333333, 0.32], [-0.59, -0.78, -0.3333333333333333, 0.38666666666666666], [0.33, 0.155, 0.0, 0.05333333333333334], [-0.73, -0.01, 1.0, -0.9866666666666667], [-0.595, 0.49, -0.6666666666666666, 0.6533333333333333], [-0.92, 0.125, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 15.873927262611687 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.3674857162075522
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot left of those?
Type:
Classify: 2.4757044902071357 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
42
Understand: 6.156068220734596 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.45, 0.025, -0.6666666666666666, 0.6666666666666666], [-0.575, -0.68, 0.3333333333333333, 0.32], [-0.055, -0.345, 0.0, 0.05333333333333334], [-0.98, -0.01, -0.6666666666666666, 0.6533333333333333], [-0.34, 0.835, 0.3333333333333333, 0.52], [0.965, 0.08, 0.6666666666666666, -0.6], [0.405, 0.425, -0.6666666666666666, -0.96]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes. Is there a small size and light color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 3)]
Read after code: 8.661372632719576 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8296219150641728
GENERATE SELECT
[('medium', 'grey')] [('small', 'light'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.6926646614447236 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 5.189455479383469 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.065, 0.525, -0.6666666666666666, 0.6666666666666666], [-0.19, -0.18, 0.3333333333333333, 0.32], [-0.59, -0.78, -0.3333333333333333, 0.38666666666666666], [0.33, 0.155, 0.0, 0.05333333333333334], [-0.73, -0.01, 1.0, -0.9866666666666667], [-0.595, 0.49, -0.6666666666666666, 0.6533333333333333], [-0.92, 0.125, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 7.913860937580466 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
Type:
Classify: 1.6420198371633887 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
92
Understand: 13.538178972899914 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.425, 0.865, 0.3333333333333333, 0.06666666666666667], [0.15, -0.105, 0.6666666666666666, -0.2], [-0.765, 0.265, 0.0, 0.7733333333333333], [0.185, 0.78, 0.0, 0.49333333333333335], [-0.115, -0.945, -1.0, -0.09333333333333334], [-0.215, -0.775, -0.6666666666666666, 0.6266666666666667], [0.14, -0.78, 1.0, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 15.220365116372705 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5240833954187727
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and light-colored dot to the left and above those?
Type:
Classify: 2.4837432643398643 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)
```
56
Understand: 10.760582652874291 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.315, 0.465, 0.6666666666666666, -0.2], [0.49, 0.18, 0.3333333333333333, -0.6933333333333334], [0.555, -0.29, 0.6666666666666666, -0.12], [-0.58, -0.37, -1.0, -0.09333333333333334], [-0.68, -0.2, -0.6666666666666666, 0.6266666666666667], [0.715, -0.19, -1.0, 0.26666666666666666], [-0.325, -0.21, 1.0, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_left_a
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.276353737339377 seconds
Followup config inclusion prob: 0.5071325316494564
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a small size and light color dot to the left and above those?
Type:
Classify: 2.414130153134465 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 6.736796167679131 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.425, 0.865, 0.3333333333333333, 0.06666666666666667], [0.15, -0.105, 0.6666666666666666, -0.2], [-0.765, 0.265, 0.0, 0.7733333333333333], [0.185, 0.78, 0.0, 0.49333333333333335], [-0.115, -0.945, -1.0, -0.09333333333333334], [-0.215, -0.775, -0.6666666666666666, 0.6266666666666667], [0.14, -0.78, 1.0, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: No, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5, 6)]
Read after code: 9.187546673230827 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8596648629848175
GENERATE SELECT
[('small', 'grey')] [('small', 'light'), ('large', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 4.119939665310085 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 5.759378314949572 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.315, 0.465, 0.6666666666666666, -0.2], [0.49, 0.18, 0.3333333333333333, -0.6933333333333334], [0.555, -0.29, 0.6666666666666666, -0.12], [-0.58, -0.37, -1.0, -0.09333333333333334], [-0.68, -0.2, -0.6666666666666666, 0.6266666666666667], [0.715, -0.19, -1.0, 0.26666666666666666], [-0.325, -0.21, 1.0, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 4, 6)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 9.910414190031588 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark?
Type:
Classify: 1.5340790273621678 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 13.173592863604426 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.29, 0.33, 0.6666666666666666, -0.6666666666666666], [-0.365, -0.67, 0.6666666666666666, -0.08], [0.88, -0.055, 0.0, -0.4266666666666667], [-0.91, -0.015, 0.0, -0.76], [0.065, 0.785, 0.3333333333333333, -0.6266666666666667], [-0.23, 0.22, -0.6666666666666666, 0.9066666666666666], [0.65, 0.125, 0.3333333333333333, -0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.748580175451934 seconds
Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is medium-sized and dark?
Type:
Classify: 1.5744558619335294 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 12.757839914411306 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.655, -0.17, 0.6666666666666666, -0.6666666666666666], [0.39, 0.57, 0.3333333333333333, 0.9866666666666667], [0.235, 0.835, 0.3333333333333333, 0.52], [-0.815, 0.52, -0.3333333333333333, -0.4], [-0.545, -0.51, 0.0, -0.76], [0.435, 0.285, 0.3333333333333333, -0.6266666666666667], [0.14, -0.275, -0.6666666666666666, 0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.373029557988048 seconds
Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark?
Type:
Classify: 1.6768417125567794 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 13.585696380585432 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.29, 0.33, 0.6666666666666666, -0.6666666666666666], [-0.365, -0.67, 0.6666666666666666, -0.08], [0.88, -0.055, 0.0, -0.4266666666666667], [-0.91, -0.015, 0.0, -0.76], [0.065, 0.785, 0.3333333333333333, -0.6266666666666667], [-0.23, 0.22, -0.6666666666666666, 0.9066666666666666], [0.65, 0.125, 0.3333333333333333, -0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.304952101781964 seconds
Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark?
Type:
Classify: 1.717938868328929 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 14.751285676844418 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.655, -0.17, 0.6666666666666666, -0.6666666666666666], [0.39, 0.57, 0.3333333333333333, 0.9866666666666667], [0.235, 0.835, 0.3333333333333333, 0.52], [-0.815, 0.52, -0.3333333333333333, -0.4], [-0.545, -0.51, 0.0, -0.76], [0.435, 0.285, 0.3333333333333333, -0.6266666666666667], [0.14, -0.275, -0.6666666666666666, 0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.510148679837584 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is medium-sized and light?
Type:
Classify: 1.5587359620258212 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_medium_size = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
88
Understand: 15.662710511125624 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.29, 0.33, 0.6666666666666666, -0.6666666666666666], [-0.365, -0.67, 0.6666666666666666, -0.08], [0.88, -0.055, 0.0, -0.4266666666666667], [-0.91, -0.015, 0.0, -0.76], [0.065, 0.785, 0.3333333333333333, -0.6266666666666667], [-0.23, 0.22, -0.6666666666666666, 0.9066666666666666], [0.65, 0.125, 0.3333333333333333, -0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is medium-sized and light, and the top dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_medium_size = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium_size
                    and check_a_light
                    and check_b_top
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.26346716005355 seconds
Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light?
Type:
Classify: 2.657069514505565 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 12.53366565424949 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.655, -0.17, 0.6666666666666666, -0.6666666666666666], [0.39, 0.57, 0.3333333333333333, 0.9866666666666667], [0.235, 0.835, 0.3333333333333333, 0.52], [-0.815, 0.52, -0.3333333333333333, -0.4], [-0.545, -0.51, 0.0, -0.76], [0.435, 0.285, 0.3333333333333333, -0.6266666666666667], [0.14, -0.275, -0.6666666666666666, 0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 6)]
Read after code: 15.23170281946659 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7030932162235763
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: Yes, is there a medium-sized and light-colored dot above those?
Type:
Classify: 93.5083007644862 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
45
Understand: 7.631302529014647 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.29, 0.33, 0.6666666666666666, -0.6666666666666666], [-0.365, -0.67, 0.6666666666666666, -0.08], [0.88, -0.055, 0.0, -0.4266666666666667], [-0.91, -0.015, 0.0, -0.76], [0.065, 0.785, 0.3333333333333333, -0.6266666666666667], [-0.23, 0.22, -0.6666666666666666, 0.9066666666666666], [0.65, 0.125, 0.3333333333333333, -0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 101.17120854649693 seconds
Followup config inclusion prob: 0.7306204800241429
GENERATE SELECT
[('small', 'light')] [('large', 'dark')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is small-sized and dark and the bottom right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the top left dot is large-sized and dark and the bottom right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom dot is medium-sized and light and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 6: Yes. Is there a medium size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: No, let's select the small size and light color one. <selection>.
Type:
Classify: 2.169314448721707 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 4.416663610376418 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.655, -0.17, 0.6666666666666666, -0.6666666666666666], [0.39, 0.57, 0.3333333333333333, 0.9866666666666667], [0.235, 0.835, 0.3333333333333333, 0.52], [-0.815, 0.52, -0.3333333333333333, -0.4], [-0.545, -0.51, 0.0, -0.76], [0.435, 0.285, 0.3333333333333333, -0.6266666666666667], [0.14, -0.275, -0.6666666666666666, 0.9066666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 6)]


# Turn 0
# Them: No, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 6.623166911303997 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is small-sized and light?
Type:
Classify: 1.420858295634389 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
90
Understand: 11.5732003999874 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.405, 0.875, -0.3333333333333333, 0.6933333333333334], [-0.28, -0.13, -0.3333333333333333, -0.05333333333333334], [-0.115, -0.73, 0.0, -0.52], [0.865, 0.225, -0.6666666666666666, 0.4], [0.125, 0.185, 1.0, 0.12], [-0.465, 0.135, -0.6666666666666666, 0.9466666666666667], [-0.71, 0.61, 0.3333333333333333, -0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_grey
                    and check_b_top
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 13.027969868853688 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7195763519058268
GENERATE SELECT
[('small', 'grey')] [('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.1535585401579738 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 4.156439823098481 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.38, -0.265, -0.3333333333333333, -0.05333333333333334], [-0.51, 0.195, -0.3333333333333333, 0.5333333333333333], [-0.345, 0.61, -1.0, 0.9066666666666666], [0.785, 0.05, 1.0, 0.12], [0.195, -0.0, -0.6666666666666666, 0.9466666666666667], [-0.05, 0.475, 0.3333333333333333, -0.49333333333333335], [-0.695, 0.19, -0.3333333333333333, -0.38666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 6.345228934660554 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type:
Classify: 2.371436906978488 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 15.270768074318767 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.58, -0.805, -1.0, -0.7466666666666667], [0.915, -0.33, 0.0, -0.48], [0.205, 0.975, 1.0, -0.49333333333333335], [-0.005, 0.79, 0.0, 0.36], [-0.42, 0.705, 0.3333333333333333, -0.5466666666666666], [0.21, 0.145, -1.0, -0.36], [0.115, -0.58, 0.3333333333333333, 0.10666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.68435127194971 seconds
Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type:
Classify: 2.428174608387053 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 104.84058833867311 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.83, 0.445, 1.0, 0.38666666666666666], [0.075, 0.095, 1.0, -0.49333333333333335], [-0.135, -0.09, 0.0, 0.36], [-0.89, 0.415, 0.3333333333333333, 0.9466666666666667], [-0.555, -0.175, 0.3333333333333333, -0.5466666666666666], [0.08, -0.735, -1.0, -0.36], [0.125, 0.555, -0.3333333333333333, 0.6933333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 107.3077745847404 seconds
Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the right dot is large-sized and dark and the left dot is medium-sized and light?
Type:
Classify: 1.3977645840495825 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is large-sized and dark and the left dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 13.785673594102263 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.58, -0.805, -1.0, -0.7466666666666667], [0.915, -0.33, 0.0, -0.48], [0.205, 0.975, 1.0, -0.49333333333333335], [-0.005, 0.79, 0.0, 0.36], [-0.42, 0.705, 0.3333333333333333, -0.5466666666666666], [0.21, 0.145, -1.0, -0.36], [0.115, -0.58, 0.3333333333333333, 0.10666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is large-sized and dark and the left dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_light
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 15.225860214792192 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6974531176443066
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a small size and dark color dot to the right and below those?
Type:
Classify: 3.155172273516655 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
```
59
Understand: 6.709133334457874 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.83, 0.445, 1.0, 0.38666666666666666], [0.075, 0.095, 1.0, -0.49333333333333335], [-0.135, -0.09, 0.0, 0.36], [-0.89, 0.415, 0.3333333333333333, 0.9466666666666667], [-0.555, -0.175, 0.3333333333333333, -0.5466666666666666], [0.08, -0.735, -1.0, -0.36], [0.125, 0.555, -0.3333333333333333, 0.6933333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_below_ab = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    and check_c_below_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 5)]
Read after code: 9.896385408937931 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8955613633628896
GENERATE SELECT
[('medium', 'light')] [('large', 'dark'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is medium-sized and light and the bottom right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 2.295769950374961 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 5.1431903801858425 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.58, -0.805, -1.0, -0.7466666666666667], [0.915, -0.33, 0.0, -0.48], [0.205, 0.975, 1.0, -0.49333333333333335], [-0.005, 0.79, 0.0, 0.36], [-0.42, 0.705, 0.3333333333333333, -0.5466666666666666], [0.21, 0.145, -1.0, -0.36], [0.115, -0.58, 0.3333333333333333, 0.10666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 5)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 7.470410231500864 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark?
Type:
Classify: 2.065316289663315 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 10.320254190824926 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.765, 0.26, 0.6666666666666666, -0.04], [-0.435, -0.685, 1.0, -0.18666666666666668], [-0.95, -0.02, 0.6666666666666666, 0.38666666666666666], [0.285, -0.695, 0.0, 0.48], [0.09, 0.41, -0.3333333333333333, 0.49333333333333335], [0.3, 0.03, -0.3333333333333333, 0.32], [0.745, -0.285, 0.0, -0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.428613693453372 seconds
Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is small-sized and light and the bottom right dot is small-sized and grey?
Type:
Classify: 1.8752698432654142 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and light and the bottom right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 13.146516280248761 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.895, -0.04, 0.6666666666666666, -0.04], [0.36, 0.715, -0.3333333333333333, -0.44], [-0.82, -0.32, 0.6666666666666666, 0.38666666666666666], [-0.345, 0.66, -0.3333333333333333, -0.4], [0.22, 0.11, -0.3333333333333333, 0.49333333333333335], [0.43, -0.27, -0.3333333333333333, 0.32], [0.76, 0.635, 0.3333333333333333, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and light and the bottom right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_light
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5)]
Read after code: 15.060678626410663 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7122456138087664
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and dark color dot above those?
Type:
Classify: 1.9496353520080447 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
44
Understand: 7.231454653665423 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.765, 0.26, 0.6666666666666666, -0.04], [-0.435, -0.685, 1.0, -0.18666666666666668], [-0.95, -0.02, 0.6666666666666666, 0.38666666666666666], [0.285, -0.695, 0.0, 0.48], [0.09, 0.41, -0.3333333333333333, 0.49333333333333335], [0.3, 0.03, -0.3333333333333333, 0.32], [0.745, -0.285, 0.0, -0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.204385504126549 seconds
Followup config inclusion prob: 0.71090738191303
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, is there a medium-sized and light-colored dot below those?
Type:
Classify: 3.286180176772177 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and light-colored dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
44
Understand: 5.695745925419033 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.895, -0.04, 0.6666666666666666, -0.04], [0.36, 0.715, -0.3333333333333333, -0.44], [-0.82, -0.32, 0.6666666666666666, 0.38666666666666666], [-0.345, 0.66, -0.3333333333333333, -0.4], [0.22, 0.11, -0.3333333333333333, 0.49333333333333335], [0.43, -0.27, -0.3333333333333333, 0.32], [0.76, 0.635, 0.3333333333333333, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: No, is there a medium-sized and light-colored dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.011451139114797 seconds
Followup config inclusion prob: 0.7122456138087664
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and dark color dot above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Is there a medium size and light color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a large size and grey color dot to the right of those?
Type:
Classify: 2.2028614059090614 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a large size and grey color dot to the right of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
44
Understand: 6.210493863560259 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.765, 0.26, 0.6666666666666666, -0.04], [-0.435, -0.685, 1.0, -0.18666666666666668], [-0.95, -0.02, 0.6666666666666666, 0.38666666666666666], [0.285, -0.695, 0.0, 0.48], [0.09, 0.41, -0.3333333333333333, 0.49333333333333335], [0.3, 0.03, -0.3333333333333333, 0.32], [0.745, -0.285, 0.0, -0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: No. Is there a large size and grey color dot to the right of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4, 5), (1, 4, 5), (2, 4, 5)]
Read after code: 8.448181231506169 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8958623818680693
GENERATE SELECT
[('small', 'grey')] [('large', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and light and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and dark color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Is there a medium size and light color dot below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a large size and grey color dot right of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.6747106770053506 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 4.035986261442304 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.895, -0.04, 0.6666666666666666, -0.04], [0.36, 0.715, -0.3333333333333333, -0.44], [-0.82, -0.32, 0.6666666666666666, 0.38666666666666666], [-0.345, 0.66, -0.3333333333333333, -0.4], [0.22, 0.11, -0.3333333333333333, 0.49333333333333335], [0.43, -0.27, -0.3333333333333333, 0.32], [0.76, 0.635, 0.3333333333333333, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 6.7419878682121634 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
Type:
Classify: 2.0562629904597998 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
92
Understand: 11.316297341138124 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.185, -0.705, -0.3333333333333333, -0.02666666666666667], [0.095, 0.57, -0.3333333333333333, 0.38666666666666666], [-0.28, -0.57, 1.0, 0.44], [0.265, -0.33, 1.0, 0.13333333333333333], [-0.125, -0.74, 0.0, 0.72], [0.62, 0.635, -0.3333333333333333, -0.6533333333333333], [-0.73, -0.185, -0.6666666666666666, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_grey
                    and check_b_top
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3)]
Read after code: 13.414815104566514 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7198424868885243
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and light color dot to the left and above those?
Type:
Classify: 3.8491712929680943 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 7.264380280859768 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.225, 0.095, -1.0, -0.9866666666666667], [-0.405, 0.245, -0.3333333333333333, -0.02666666666666667], [0.61, 0.005, 1.0, 0.04], [-0.87, 0.38, 1.0, 0.44], [-0.325, 0.615, 1.0, 0.13333333333333333], [-0.715, 0.205, 0.0, 0.72], [0.485, 0.62, 0.6666666666666666, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: Yes, is there a small size and light color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.145130234770477 seconds
Followup config inclusion prob: 0.5511113242018943
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No, is there a medium-sized and light-colored dot to the left and below those?
Type:
Classify: 2.1658525951206684 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and light-colored dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
58
Understand: 8.497512461617589 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.185, -0.705, -0.3333333333333333, -0.02666666666666667], [0.095, 0.57, -0.3333333333333333, 0.38666666666666666], [-0.28, -0.57, 1.0, 0.44], [0.265, -0.33, 1.0, 0.13333333333333333], [-0.125, -0.74, 0.0, 0.72], [0.62, 0.635, -0.3333333333333333, -0.6533333333333333], [-0.73, -0.185, -0.6666666666666666, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: No, is there a medium-sized and light-colored dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 4)]
Read after code: 10.702778582461178 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9055664022879314
GENERATE SELECT
[('large', 'grey')] [('small', 'grey'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and light color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a medium size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 1.9018223714083433 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 4.519619836471975 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.225, 0.095, -1.0, -0.9866666666666667], [-0.405, 0.245, -0.3333333333333333, -0.02666666666666667], [0.61, 0.005, 1.0, 0.04], [-0.87, 0.38, 1.0, 0.44], [-0.325, 0.615, 1.0, 0.13333333333333333], [-0.715, 0.205, 0.0, 0.72], [0.485, 0.62, 0.6666666666666666, 0.3333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4, 5)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.455287097021937 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
Type:
Classify: 2.0387237817049026 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
87
Understand: 13.254906194284558 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.96, 0.045, 0.6666666666666666, 0.0], [-0.845, -0.12, 0.3333333333333333, -0.6266666666666667], [-0.315, -0.33, 0.6666666666666666, 0.56], [-0.26, -0.89, 0.0, 0.7066666666666667], [0.39, -0.845, -0.6666666666666666, -0.6533333333333333], [-0.35, -0.05, -0.6666666666666666, 0.4533333333333333], [0.1, -0.35, -0.6666666666666666, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.336865871213377 seconds
Do you see a pair of dots, where the left dot is large-sized and light and the right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the left dot is large-sized and light and the right dot is small-sized and grey?
Type:
Classify: 1.9242467815056443 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is large-sized and light and the right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 19.142129621468484 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.35, 0.475, -0.6666666666666666, -0.6266666666666667], [-0.825, -0.29, -0.3333333333333333, -0.38666666666666666], [-0.635, -0.595, 0.3333333333333333, -0.6266666666666667], [0.12, 0.555, 0.6666666666666666, -0.7333333333333333], [-0.105, -0.805, 0.6666666666666666, 0.56], [-0.14, -0.525, -0.6666666666666666, 0.4533333333333333], [0.31, -0.825, -0.6666666666666666, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is large-sized and light and the right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 21.10946659743786 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7029586693074843
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is large-sized and light and the right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a small size and dark color dot to the left and above those?
Type:
Classify: 2.369586625136435 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 8.10013644117862 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.96, 0.045, 0.6666666666666666, 0.0], [-0.845, -0.12, 0.3333333333333333, -0.6266666666666667], [-0.315, -0.33, 0.6666666666666666, 0.56], [-0.26, -0.89, 0.0, 0.7066666666666667], [0.39, -0.845, -0.6666666666666666, -0.6533333333333333], [-0.35, -0.05, -0.6666666666666666, 0.4533333333333333], [0.1, -0.35, -0.6666666666666666, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.502472671680152 seconds
Followup config inclusion prob: 0.7262195974597928
GENERATE SELECT
[('small', 'grey')] [('large', 'light')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the left dot is large-sized and light and the right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.236379399895668 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 5.219817032106221 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.35, 0.475, -0.6666666666666666, -0.6266666666666667], [-0.825, -0.29, -0.3333333333333333, -0.38666666666666666], [-0.635, -0.595, 0.3333333333333333, -0.6266666666666667], [0.12, 0.555, 0.6666666666666666, -0.7333333333333333], [-0.105, -0.805, 0.6666666666666666, 0.56], [-0.14, -0.525, -0.6666666666666666, 0.4533333333333333], [0.31, -0.825, -0.6666666666666666, -0.12]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: No, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 7.491714160889387 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light?
Type:
Classify: 2.1108233723789454 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
95
Understand: 12.525513720698655 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.01, 0.415, -0.6666666666666666, 0.68], [0.38, -0.825, 0.0, 0.4266666666666667], [-0.865, 0.29, -0.6666666666666666, 0.09333333333333334], [-0.775, -0.545, 0.0, 0.8533333333333334], [-0.405, -0.87, -0.3333333333333333, 0.4], [-0.37, -0.08, 0.0, 0.4666666666666667], [-0.28, -0.28, -0.6666666666666666, 0.24]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 14.680789161473513 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.17502233381316
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and light-colored dot above those?
Type:
Classify: 2.007268825545907 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
45
Understand: 5.920688488520682 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.605, -0.48, -0.3333333333333333, -0.16], [-0.365, 0.26, -0.6666666666666666, 0.68], [0.025, -0.98, 0.0, 0.4266666666666667], [-0.475, 0.85, 1.0, 0.37333333333333335], [-0.725, -0.235, 0.0, 0.4666666666666667], [-0.635, -0.435, -0.6666666666666666, 0.24], [0.905, 0.245, -0.6666666666666666, 0.26666666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 4)]
Read after code: 7.963100912049413 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8321810436208119
GENERATE SELECT
[('medium', 'light')] [('small', 'grey'), ('medium', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and grey and the bottom left dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 1.8451455440372229 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 3.4844725532457232 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.01, 0.415, -0.6666666666666666, 0.68], [0.38, -0.825, 0.0, 0.4266666666666667], [-0.865, 0.29, -0.6666666666666666, 0.09333333333333334], [-0.775, -0.545, 0.0, 0.8533333333333334], [-0.405, -0.87, -0.3333333333333333, 0.4], [-0.37, -0.08, 0.0, 0.4666666666666667], [-0.28, -0.28, -0.6666666666666666, 0.24]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 5, 6)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (3,)]
Read after code: 5.36444272659719 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey?
Type:
Classify: 1.7087520863860846 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
97
Understand: 11.148522946983576 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.2, 0.6666666666666666, -0.9333333333333333], [-0.3, -0.91, 0.3333333333333333, 0.64], [-0.385, -0.73, -0.3333333333333333, -0.52], [0.69, -0.18, -0.6666666666666666, 0.9066666666666666], [0.845, 0.26, 0.0, 0.6533333333333333], [-0.77, 0.56, -0.6666666666666666, 0.18666666666666668], [0.04, 0.73, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.902629906311631 seconds
Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top dot is large-sized and dark and the bottom dot is small-sized and light?
Type:
Classify: 1.767453445121646 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is large-sized and dark and the bottom dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 16.536098565906286 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, -0.86, 0.3333333333333333, 0.64], [-1.0, 0.005, 0.0, -0.17333333333333334], [-0.08, -0.68, -0.3333333333333333, -0.52], [-0.715, 0.31, -1.0, 0.29333333333333333], [-0.465, 0.61, -0.6666666666666666, 0.18666666666666668], [-0.465, -0.77, 0.0, -0.36], [0.345, 0.78, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is large-sized and dark and the bottom dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 18.347028986550868 seconds
Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the left dot is small-sized and grey and the right dot is large-sized and dark?
Type:
Classify: 1.6201436426490545 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and grey and the right dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 11.818220926448703 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.2, 0.6666666666666666, -0.9333333333333333], [-0.3, -0.91, 0.3333333333333333, 0.64], [-0.385, -0.73, -0.3333333333333333, -0.52], [0.69, -0.18, -0.6666666666666666, 0.9066666666666666], [0.845, 0.26, 0.0, 0.6533333333333333], [-0.77, 0.56, -0.6666666666666666, 0.18666666666666668], [0.04, 0.73, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and grey and the right dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.481768849305809 seconds
Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom left dot is large-sized and dark, and the top right dot is medium-sized and light?
Type:
Classify: 1.7156900763511658 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is large-sized and dark, and the top right dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
93
Understand: 12.202247445471585 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, -0.86, 0.3333333333333333, 0.64], [-1.0, 0.005, 0.0, -0.17333333333333334], [-0.08, -0.68, -0.3333333333333333, -0.52], [-0.715, 0.31, -1.0, 0.29333333333333333], [-0.465, 0.61, -0.6666666666666666, 0.18666666666666668], [-0.465, -0.77, 0.0, -0.36], [0.345, 0.78, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is large-sized and dark, and the top right dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_large
                    and check_a_dark
                    and check_b_top_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.964841383509338 seconds
Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey?
Type:
Classify: 1.428441715426743 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 14.391652490012348 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.2, 0.6666666666666666, -0.9333333333333333], [-0.3, -0.91, 0.3333333333333333, 0.64], [-0.385, -0.73, -0.3333333333333333, -0.52], [0.69, -0.18, -0.6666666666666666, 0.9066666666666666], [0.845, 0.26, 0.0, 0.6533333333333333], [-0.77, 0.56, -0.6666666666666666, 0.18666666666666668], [0.04, 0.73, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_grey
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.863453605212271 seconds
Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and dark?
Type:
Classify: 2.185938944108784 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 13.052596358582377 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, -0.86, 0.3333333333333333, 0.64], [-1.0, 0.005, 0.0, -0.17333333333333334], [-0.08, -0.68, -0.3333333333333333, -0.52], [-0.715, 0.31, -1.0, 0.29333333333333333], [-0.465, 0.61, -0.6666666666666666, 0.18666666666666668], [-0.465, -0.77, 0.0, -0.36], [0.345, 0.78, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_large
                    and check_a_dark
                    and check_b_top_left
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.281601094640791 seconds
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 6: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is medium-sized and dark?
Type:
Classify: 2.1838165018707514 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.627735834568739 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.2, 0.6666666666666666, -0.9333333333333333], [-0.3, -0.91, 0.3333333333333333, 0.64], [-0.385, -0.73, -0.3333333333333333, -0.52], [0.69, -0.18, -0.6666666666666666, 0.9066666666666666], [0.845, 0.26, 0.0, 0.6533333333333333], [-0.77, 0.56, -0.6666666666666666, 0.18666666666666668], [0.04, 0.73, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.852760129608214 seconds
Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 7: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
Type:
Classify: 2.036482360213995 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 12.107937873341143 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, -0.86, 0.3333333333333333, 0.64], [-1.0, 0.005, 0.0, -0.17333333333333334], [-0.08, -0.68, -0.3333333333333333, -0.52], [-0.715, 0.31, -1.0, 0.29333333333333333], [-0.465, 0.61, -0.6666666666666666, 0.18666666666666668], [-0.465, -0.77, 0.0, -0.36], [0.345, 0.78, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_medium
                    and check_a_light
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2)]
Read after code: 14.185999540612102 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6956645655394994
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 6: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 7: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 8: Yes, is there a small size and grey color dot to the left and above those?
Type:
Classify: 2.0355077646672726 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
57
Understand: 10.134451543912292 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.665, 0.2, 0.6666666666666666, -0.9333333333333333], [-0.3, -0.91, 0.3333333333333333, 0.64], [-0.385, -0.73, -0.3333333333333333, -0.52], [0.69, -0.18, -0.6666666666666666, 0.9066666666666666], [0.845, 0.26, 0.0, 0.6533333333333333], [-0.77, 0.56, -0.6666666666666666, 0.18666666666666668], [0.04, 0.73, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 5)]
Read after code: 12.201861920766532 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8575124147775285
GENERATE SELECT
[('small', 'dark')] [('medium', 'light'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is large-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is large-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is large-sized and dark and the top right dot is medium-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 7: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 8: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 9: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 2.6393288522958755 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 5.179178413935006 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.005, -0.86, 0.3333333333333333, 0.64], [-1.0, 0.005, 0.0, -0.17333333333333334], [-0.08, -0.68, -0.3333333333333333, -0.52], [-0.715, 0.31, -1.0, 0.29333333333333333], [-0.465, 0.61, -0.6666666666666666, 0.18666666666666668], [-0.465, -0.77, 0.0, -0.36], [0.345, 0.78, 0.6666666666666666, -0.7866666666666666]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 2, 3)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2,)]
Read after code: 7.85172856785357 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is medium-sized and grey?
Type:
Classify: 1.6893156645819545 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 12.079592715017498 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.42, 0.26, 0.0, -0.4533333333333333], [-0.47, 0.085, 0.3333333333333333, 0.13333333333333333], [0.04, 0.81, 0.6666666666666666, 0.06666666666666667], [0.42, -0.18, 0.6666666666666666, 0.28], [-0.04, -0.385, -0.6666666666666666, 0.4533333333333333], [-0.265, -0.52, -1.0, -0.4266666666666667], [0.39, 0.85, -1.0, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1)]
Read after code: 13.810899262316525 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7191434908700226
GENERATE SELECT
[('medium', 'dark')] [('medium', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is medium-sized and dark and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.8726093312725425 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_medium_size = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
```
29
Understand: 4.547108445316553 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.0, -0.365, 0.0, -0.4533333333333333], [-0.54, -0.235, 0.6666666666666666, 0.8533333333333334], [0.035, 0.525, 0.6666666666666666, -0.41333333333333333], [-0.05, -0.535, 0.3333333333333333, 0.13333333333333333], [0.46, 0.19, 0.6666666666666666, 0.06666666666666667], [-0.555, 0.22, -0.3333333333333333, 0.8], [0.815, 0.23, -1.0, -0.48]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_medium_size = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                
                if (
                    True 
                    and check_a_medium_size
                    and check_a_dark
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0,)]
Read after code: 6.450807049870491 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light?
Type:
Classify: 3.156023799441755 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
94
Understand: 10.135437480174005 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.185, 0.79, 0.0, 0.06666666666666667], [0.44, -0.485, -0.3333333333333333, -0.8933333333333333], [0.8, -0.485, -0.3333333333333333, -0.10666666666666667], [0.02, 0.69, 0.0, -0.96], [0.035, 0.095, 0.6666666666666666, 0.9466666666666667], [0.715, 0.06, -1.0, -0.44], [-0.765, 0.32, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_grey
                    and check_b_top_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.33524835202843 seconds
Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and grey?
Type:
Classify: 1.3685935316607356 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 12.757879216223955 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.705, 0.545, 0.0, 0.06666666666666667], [-0.81, -0.335, -0.3333333333333333, -0.22666666666666666], [-0.245, -0.95, 0.6666666666666666, -0.18666666666666668], [0.54, 0.445, 0.0, -0.96], [-0.69, 0.675, 1.0, 0.4], [0.555, -0.145, 0.6666666666666666, 0.9466666666666667], [-0.245, 0.075, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and dark and the right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.165102509781718 seconds
Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
Type:
Classify: 1.658272742293775 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
96
Understand: 12.743089781142771 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.185, 0.79, 0.0, 0.06666666666666667], [0.44, -0.485, -0.3333333333333333, -0.8933333333333333], [0.8, -0.485, -0.3333333333333333, -0.10666666666666667], [0.02, 0.69, 0.0, -0.96], [0.035, 0.095, 0.6666666666666666, 0.9466666666666667], [0.715, 0.06, -1.0, -0.44], [-0.765, 0.32, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3), (1, 2)]
Read after code: 14.44574729166925 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7063345785249922
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a small size and dark color dot to the right and below those?
Type:
Classify: 2.9546368392184377 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
81
Understand: 7.861651205457747 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.705, 0.545, 0.0, 0.06666666666666667], [-0.81, -0.335, -0.3333333333333333, -0.22666666666666666], [-0.245, -0.95, 0.6666666666666666, -0.18666666666666668], [0.54, 0.445, 0.0, -0.96], [-0.69, 0.675, 1.0, 0.4], [0.555, -0.145, 0.6666666666666666, 0.9466666666666667], [-0.245, 0.075, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 10.848727013915777 seconds
Followup config inclusion prob: 0.6946147140368906
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No. Is there a small size and light color dot to the left and below those?
Type:
Classify: 3.0569447055459023 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)```
57
Understand: 7.912804991006851 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.185, 0.79, 0.0, 0.06666666666666667], [0.44, -0.485, -0.3333333333333333, -0.8933333333333333], [0.8, -0.485, -0.3333333333333333, -0.10666666666666667], [0.02, 0.69, 0.0, -0.96], [0.035, 0.095, 0.6666666666666666, 0.9466666666666667], [0.715, 0.06, -1.0, -0.44], [-0.765, 0.32, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3), (1, 2)]


# Turn 0
# Them: No. Is there a small size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 3, 6), (1, 2, 6)]
Read after code: 11.006653140299022 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8837981105890171
GENERATE SELECT
[('medium', 'dark')] [('medium', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is small-sized and grey and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the left dot is small-sized and dark and the right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 4: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 2.000208425335586 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 3.3576739272102714 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.705, 0.545, 0.0, 0.06666666666666667], [-0.81, -0.335, -0.3333333333333333, -0.22666666666666666], [-0.245, -0.95, 0.6666666666666666, -0.18666666666666668], [0.54, 0.445, 0.0, -0.96], [-0.69, 0.675, 1.0, 0.4], [0.555, -0.145, 0.6666666666666666, 0.9466666666666667], [-0.245, 0.075, -0.6666666666666666, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 6)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 5.387741574086249 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey?
Type:
Classify: 1.331434884108603 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
95
Understand: 15.023520866408944 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.455, -0.76, 1.0, 0.38666666666666666], [-0.13, -0.915, -0.3333333333333333, -0.7333333333333333], [-0.825, -0.03, -1.0, 0.28], [0.21, 0.64, -0.6666666666666666, -0.6], [-0.33, 0.08, 0.3333333333333333, 0.26666666666666666], [0.79, -0.595, 0.0, 0.08], [-0.1, 0.34, 0.0, 0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom_left
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 16.39924205467105 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5378530691210337
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 2.9642311204224825 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_left_b = is_left(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
83
Understand: 14.024418047629297 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.625, 0.62, 0.0, -0.52], [-0.815, -0.295, -1.0, 0.28], [0.825, 0.495, 1.0, 0.24], [0.22, 0.37, -0.6666666666666666, -0.6], [-0.315, -0.19, 0.3333333333333333, 0.26666666666666666], [0.055, 0.9, 0.6666666666666666, 0.5066666666666667], [-0.085, 0.075, 0.0, 0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 6)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_left_b = is_left(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    and check_c_below_a
                    and check_c_left_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3, 6)]
Read after code: 17.021716387942433 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6213095373099677
GENERATE SELECT
[('small', 'dark')] [('small', 'grey'), ('medium', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top right dot is small-sized and dark and the bottom left dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.682919505983591 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 5.702077004127204 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.455, -0.76, 1.0, 0.38666666666666666], [-0.13, -0.915, -0.3333333333333333, -0.7333333333333333], [-0.825, -0.03, -1.0, 0.28], [0.21, 0.64, -0.6666666666666666, -0.6], [-0.33, 0.08, 0.3333333333333333, 0.26666666666666666], [0.79, -0.595, 0.0, 0.08], [-0.1, 0.34, 0.0, 0.21333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 4)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 7.416662201285362 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark?
Type:
Classify: 1.8029629494994879 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
89
Understand: 11.179075334221125 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.78, 0.35, -1.0, 0.76], [0.07, 0.39, -0.3333333333333333, -0.26666666666666666], [0.635, 0.145, 0.6666666666666666, 0.8], [0.38, 0.28, -1.0, 0.013333333333333334], [-0.475, 0.19, -1.0, -0.22666666666666666], [0.48, -0.875, -0.6666666666666666, 0.7466666666666667], [0.63, -0.405, 0.3333333333333333, -0.56]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_light
                    and check_b_top
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5, 6)]
Read after code: 13.025031608529389 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7069169812708288
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and above those?
Type:
Classify: 2.480357320047915 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
57
Understand: 8.978680266067386 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.435, 0.785, 0.6666666666666666, 0.8], [0.18, 0.92, -1.0, 0.013333333333333334], [-0.05, -0.615, 0.0, -0.38666666666666666], [0.735, -0.32, -0.6666666666666666, -0.6], [0.275, -0.235, -0.6666666666666666, 0.7466666666666667], [0.425, 0.235, 0.3333333333333333, -0.56], [-0.965, -0.145, 0.0, -0.2]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4, 5)]
Read after code: 11.495413079857826 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8989328291362675
GENERATE SELECT
[('medium', 'dark')] [('small', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and dark color one. <selection>.
Type:
Classify: 1.83562714420259 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
29
Understand: 320.55460946355015 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.78, 0.35, -1.0, 0.76], [0.07, 0.39, -0.3333333333333333, -0.26666666666666666], [0.635, 0.145, 0.6666666666666666, 0.8], [0.38, 0.28, -1.0, 0.013333333333333334], [-0.475, 0.19, -1.0, -0.22666666666666666], [0.48, -0.875, -0.6666666666666666, 0.7466666666666667], [0.63, -0.405, 0.3333333333333333, -0.56]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 5, 6)]


# Turn 0
# Them: Yes, let's select the medium size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 322.42452652100474 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light?
Type:
Classify: 1.9372420217841864 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
87
Understand: 11.347068388946354 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.525, -0.045, 0.6666666666666666, -0.6666666666666666], [-0.17, -0.945, -0.6666666666666666, 0.06666666666666667], [0.41, -0.25, 0.3333333333333333, -0.7466666666666667], [-0.97, 0.19, 0.3333333333333333, -0.3333333333333333], [-0.05, 0.33, 1.0, -0.10666666666666667], [-0.085, 0.685, 0.0, 0.7466666666666667], [-0.855, -0.27, -1.0, -0.13333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_large
                    and check_a_grey
                    and check_b_top
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 5)]
Read after code: 13.327249416150153 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7066280901708213
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and dark color dot to the left and below those?
Type:
Classify: 2.164191583171487 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and dark color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
check_c_below = is_below(c, [a,b], ctx)
```
57
Understand: 9.733904717490077 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.325, -0.755, 0.6666666666666666, -0.6666666666666666], [-0.85, -0.01, -0.3333333333333333, 0.9066666666666666], [-0.77, -0.52, 0.3333333333333333, -0.3333333333333333], [0.6, 0.73, 0.0, -0.9066666666666666], [0.155, -0.385, 1.0, -0.10666666666666667], [0.115, -0.03, 0.0, 0.7466666666666667], [0.85, 0.425, -0.3333333333333333, 0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, is there a large size and dark color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left = is_left(c, [a,b], ctx)
                check_c_below = is_below(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4, 5), (2, 4, 5)]
Read after code: 11.932698871940374 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9039143750707146
GENERATE SELECT
[('medium', 'light')] [('large', 'dark'), ('large', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is large-sized and grey and the top dot is medium-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and dark color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 2.0065410621464252 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 4.537256994284689 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.525, -0.045, 0.6666666666666666, -0.6666666666666666], [-0.17, -0.945, -0.6666666666666666, 0.06666666666666667], [0.41, -0.25, 0.3333333333333333, -0.7466666666666667], [-0.97, 0.19, 0.3333333333333333, -0.3333333333333333], [-0.05, 0.33, 1.0, -0.10666666666666667], [-0.085, 0.685, 0.0, 0.7466666666666667], [-0.855, -0.27, -1.0, -0.13333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 6.576720897108316 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark?
Type:
Classify: 92.92836053296924 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
92
Understand: 111.1505131283775 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.145, -0.485, 0.6666666666666666, -0.6133333333333333], [0.99, -0.025, -0.6666666666666666, -0.24], [0.21, 0.92, -0.6666666666666666, 0.7066666666666667], [0.75, -0.535, 0.3333333333333333, -0.4533333333333333], [0.24, -0.95, -0.3333333333333333, 0.8], [0.025, 0.99, -1.0, -0.6133333333333333], [0.7, 0.19, 0.6666666666666666, 0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_small
                    and check_a_light
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 5)]
Read after code: 204.1234449967742 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5502479347875324
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the right and below those?
Type:
Classify: 4.426921106874943 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 7.7783117685467005 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.375, -0.775, 0.6666666666666666, -0.6133333333333333], [-0.64, 0.62, 0.6666666666666666, -0.38666666666666666], [-0.775, -0.17, 0.6666666666666666, 0.28], [0.435, 0.63, -0.6666666666666666, 0.7066666666666667], [-0.2, 0.69, 0.3333333333333333, -0.3333333333333333], [0.25, 0.705, -1.0, -0.6133333333333333], [0.93, -0.095, 0.6666666666666666, 0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 5)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 5, 6)]
Read after code: 12.239804805256426 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8938323603625451
GENERATE SELECT
[('small', 'dark')] [('small', 'light'), ('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.7888376275077462 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 6.16450987290591 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.145, -0.485, 0.6666666666666666, -0.6133333333333333], [0.99, -0.025, -0.6666666666666666, -0.24], [0.21, 0.92, -0.6666666666666666, 0.7066666666666667], [0.75, -0.535, 0.3333333333333333, -0.4533333333333333], [0.24, -0.95, -0.3333333333333333, 0.8], [0.025, 0.99, -1.0, -0.6133333333333333], [0.7, 0.19, 0.6666666666666666, 0.7333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5, 6)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 7.985262519679964 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
Type:
Classify: 2.8557914160192013 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_right = a == get_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_left = b == get_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
88
Understand: 18.67515408899635 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.015, 0.325, -0.6666666666666666, -0.25333333333333335], [0.175, -0.095, 0.6666666666666666, -0.5733333333333334], [-0.555, -0.715, 0.6666666666666666, -0.88], [-0.665, -0.585, 0.6666666666666666, -0.3466666666666667], [-0.42, 0.35, 1.0, 0.6266666666666667], [-0.61, -0.03, -0.3333333333333333, 0.9333333333333333], [-0.655, 0.17, -0.3333333333333333, -0.4533333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_right = a == get_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_left = b == get_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_right
                    and check_a_large
                    and check_a_light
                    and check_b_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 21.57486781757325 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7220904315394314
GENERATE SELECT
[('small', 'dark')] [('large', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.7578585594892502 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 4.328633381053805 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.69, -0.205, -0.6666666666666666, -0.25333333333333335], [0.225, 0.495, -0.6666666666666666, -0.21333333333333335], [0.255, -0.18, 1.0, 0.6266666666666667], [0.065, -0.56, -0.3333333333333333, 0.9333333333333333], [0.04, 0.26, 0.3333333333333333, -0.4266666666666667], [0.02, -0.36, -0.3333333333333333, -0.4533333333333333], [0.39, 0.565, -1.0, -0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 6.119480793364346 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark?
Type:
Classify: 1.6208541160449386 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 11.71421733405441 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.195, 0.96, -0.3333333333333333, -0.28], [-0.95, 0.215, 0.0, 0.4], [-0.54, 0.505, 0.0, -0.4], [-0.115, -0.415, -0.3333333333333333, -0.37333333333333335], [-0.565, 0.255, 0.6666666666666666, 0.0], [0.615, -0.12, -0.6666666666666666, 0.25333333333333335], [0.845, -0.395, -0.3333333333333333, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.377242353744805 seconds
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
Type:
Classify: 2.4643383668735623 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 15.019947906956077 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, 0.255, -0.3333333333333333, -0.28], [0.735, -0.165, 0.0, 0.72], [0.34, 0.085, -0.6666666666666666, -0.4533333333333333], [-0.92, 0.195, -0.6666666666666666, 0.9066666666666666], [-0.87, -0.2, 0.0, -0.4], [-0.89, -0.45, 0.6666666666666666, 0.0], [0.29, -0.82, -0.6666666666666666, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.526839774101973 seconds
Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
Type:
Classify: 2.041490724310279 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
93
Understand: 15.595790813677013 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.195, 0.96, -0.3333333333333333, -0.28], [-0.95, 0.215, 0.0, 0.4], [-0.54, 0.505, 0.0, -0.4], [-0.115, -0.415, -0.3333333333333333, -0.37333333333333335], [-0.565, 0.255, 0.6666666666666666, 0.0], [0.615, -0.12, -0.6666666666666666, 0.25333333333333335], [0.845, -0.395, -0.3333333333333333, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is medium-sized and light, and the top left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_medium
                    and check_a_light
                    and check_b_top_left
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.680408323183656 seconds
Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom left dot is small-sized and dark, and the top right dot is small-sized and grey?
Type:
Classify: 1.577629515901208 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is small-sized and dark, and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
94
Understand: 15.327358422800899 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, 0.255, -0.3333333333333333, -0.28], [0.735, -0.165, 0.0, 0.72], [0.34, 0.085, -0.6666666666666666, -0.4533333333333333], [-0.92, 0.195, -0.6666666666666666, 0.9066666666666666], [-0.87, -0.2, 0.0, -0.4], [-0.89, -0.45, 0.6666666666666666, 0.0], [0.29, -0.82, -0.6666666666666666, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is small-sized and dark, and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_dark
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.94563320465386 seconds
Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and grey?
Type:
Classify: 1.9611125346273184 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 13.682163915596902 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.195, 0.96, -0.3333333333333333, -0.28], [-0.95, 0.215, 0.0, 0.4], [-0.54, 0.505, 0.0, -0.4], [-0.115, -0.415, -0.3333333333333333, -0.37333333333333335], [-0.565, 0.255, 0.6666666666666666, 0.0], [0.615, -0.12, -0.6666666666666666, 0.25333333333333335], [0.845, -0.395, -0.3333333333333333, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is medium-sized and dark and the bottom dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_dark
                    and check_b_bottom
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4)]
Read after code: 15.68646299932152 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7130296938938597
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 5: Yes, is there a small size and dark color dot to the right and below those?
Type:
Classify: 5.723411423154175 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
81
Understand: 18.412578460760415 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, 0.255, -0.3333333333333333, -0.28], [0.735, -0.165, 0.0, 0.72], [0.34, 0.085, -0.6666666666666666, -0.4533333333333333], [-0.92, 0.195, -0.6666666666666666, 0.9066666666666666], [-0.87, -0.2, 0.0, -0.4], [-0.89, -0.45, 0.6666666666666666, 0.0], [0.29, -0.82, -0.6666666666666666, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 5)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 24.169687386602163 seconds
Followup config inclusion prob: 0.7000010160960857
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 5: Yes. Is there a small size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Is there a small size and grey color dot to the right and above those?
Type:
Classify: 2.7619210882112384 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
61
Understand: 9.818985713645816 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.195, 0.96, -0.3333333333333333, -0.28], [-0.95, 0.215, 0.0, 0.4], [-0.54, 0.505, 0.0, -0.4], [-0.115, -0.415, -0.3333333333333333, -0.37333333333333335], [-0.565, 0.255, 0.6666666666666666, 0.0], [0.615, -0.12, -0.6666666666666666, 0.25333333333333335], [0.845, -0.395, -0.3333333333333333, 0.29333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 4)]
Read after code: 12.616663607768714 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8853590231929305
GENERATE SELECT
[('large', 'grey')] [('small', 'grey'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the left dot is small-sized and grey and the right dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the bottom right dot is medium-sized and light and the top left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the top dot is medium-sized and dark and the bottom dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 5: Yes. Is there a small size and dark color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 6: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 1.780115531757474 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 4.092352504841983 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.135, 0.255, -0.3333333333333333, -0.28], [0.735, -0.165, 0.0, 0.72], [0.34, 0.085, -0.6666666666666666, -0.4533333333333333], [-0.92, 0.195, -0.6666666666666666, 0.9066666666666666], [-0.87, -0.2, 0.0, -0.4], [-0.89, -0.45, 0.6666666666666666, 0.0], [0.29, -0.82, -0.6666666666666666, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4, 5)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 5.904390938580036 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey?
Type:
Classify: 1.5820216899737716 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 15.635347398929298 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.23, -0.045, 1.0, 0.8666666666666667], [-0.655, -0.04, 0.0, -0.10666666666666667], [0.11, 0.52, 0.6666666666666666, 0.36], [-0.825, 0.125, -1.0, 0.4533333333333333], [-0.285, -0.61, 0.0, -0.6], [0.325, -0.94, 1.0, 0.17333333333333334], [-0.53, -0.64, 0.6666666666666666, -0.17333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_dark
                    and check_b_top
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.25802579149604 seconds
Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is large-sized and grey?
Type:
Classify: 2.6279969438910484 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_dark = is_dark(b, ctx)
```
87
Understand: 13.493100995197892 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.005, 0.64, 0.0, -0.10666666666666667], [-0.175, 0.8, -1.0, 0.4533333333333333], [-0.205, -0.94, -0.6666666666666666, 0.8666666666666667], [0.22, -0.315, -0.3333333333333333, -0.36], [0.37, 0.07, 0.0, -0.6], [0.44, -0.755, -0.6666666666666666, -0.05333333333333334], [0.125, 0.04, 0.6666666666666666, -0.17333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is medium-sized and dark and the left dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_medium
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6), (3, 6)]
Read after code: 16.16287997737527 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7234665830236582
GENERATE SELECT
[('large', 'grey')] [('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is small-sized and dark and the top dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 2.012439143843949 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 9.188053332269192 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.23, -0.045, 1.0, 0.8666666666666667], [-0.655, -0.04, 0.0, -0.10666666666666667], [0.11, 0.52, 0.6666666666666666, 0.36], [-0.825, 0.125, -1.0, 0.4533333333333333], [-0.285, -0.61, 0.0, -0.6], [0.325, -0.94, 1.0, 0.17333333333333334], [-0.53, -0.64, 0.6666666666666666, -0.17333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 11.232662042602897 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light?
Type:
Classify: 2.1587902288883924 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
83
Understand: 11.030293816700578 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.175, 0.57, 0.6666666666666666, -0.22666666666666666], [0.31, -0.77, -0.6666666666666666, 0.68], [-0.055, 0.58, -0.6666666666666666, 0.9466666666666667], [0.09, 0.91, 0.6666666666666666, 0.8933333333333333], [-0.085, -0.7, 0.0, -0.24], [0.41, 0.61, 0.6666666666666666, 0.76], [-0.14, 0.095, -0.3333333333333333, 0.05333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.231330166570842 seconds
Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
Type:
Classify: 1.6144387740641832 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
90
Understand: 13.026931620202959 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.025, -0.58, 0.6666666666666666, -0.22666666666666666], [-0.26, -0.575, -0.6666666666666666, 0.9466666666666667], [-0.115, -0.245, 0.6666666666666666, 0.8933333333333333], [0.56, -0.355, -1.0, -0.4533333333333333], [0.24, 0.315, 0.0, -0.7866666666666666], [0.205, -0.54, 0.6666666666666666, 0.76], [0.185, 0.06, -0.3333333333333333, -0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and light and the bottom dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_light
                    and check_b_bottom
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.685280746780336 seconds
Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light?
Type:
Classify: 1.6926676975563169 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = a == get_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = b == get_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
90
Understand: 16.782632102258503 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.175, 0.57, 0.6666666666666666, -0.22666666666666666], [0.31, -0.77, -0.6666666666666666, 0.68], [-0.055, 0.58, -0.6666666666666666, 0.9466666666666667], [0.09, 0.91, 0.6666666666666666, 0.8933333333333333], [-0.085, -0.7, 0.0, -0.24], [0.41, 0.61, 0.6666666666666666, 0.76], [-0.14, 0.095, -0.3333333333333333, 0.05333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No. Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = a == get_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = b == get_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 5)]
Read after code: 18.51713511440903 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7150796113061771
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 3: Yes, is there a small size and grey color dot to the left and below those?
Type:
Classify: 2.457109904848039 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_left_b = is_left(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
```
83
Understand: 15.400985720567405 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.025, -0.58, 0.6666666666666666, -0.22666666666666666], [-0.26, -0.575, -0.6666666666666666, 0.9466666666666667], [-0.115, -0.245, 0.6666666666666666, 0.8933333333333333], [0.56, -0.355, -1.0, -0.4533333333333333], [0.24, 0.315, 0.0, -0.7866666666666666], [0.205, -0.54, 0.6666666666666666, 0.76], [0.185, 0.06, -0.3333333333333333, -0.8]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_left_b = is_left(c, b, ctx)
                check_c_below_b = is_below(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    and check_c_below_a
                    and check_c_left_b
                    and check_c_below_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.88865889236331 seconds
Followup config inclusion prob: 0.7239238733136224
GENERATE SELECT
[('large', 'light')] [('large', 'grey')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the left dot is large-sized and grey and the right dot is large-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and grey color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: No, let's select the one that is large in size and light in color. <selection>.
Type:
Classify: 3.8680799594148993 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the one that is large in size and light in color. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
```
27
Understand: 4.798769305460155 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.175, 0.57, 0.6666666666666666, -0.22666666666666666], [0.31, -0.77, -0.6666666666666666, 0.68], [-0.055, 0.58, -0.6666666666666666, 0.9466666666666667], [0.09, 0.91, 0.6666666666666666, 0.8933333333333333], [-0.085, -0.7, 0.0, -0.24], [0.41, 0.61, 0.6666666666666666, 0.76], [-0.14, 0.095, -0.3333333333333333, 0.05333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 5)]


# Turn 0
# Them: No, let's select the one that is large in size and light in color. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_light
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 8.701331377960742 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey?
Type:
Classify: 1.3750202534720302 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
89
Understand: 12.413747840560973 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.505, -0.295, -1.0, 0.3333333333333333], [0.895, 0.4, 1.0, -0.05333333333333334], [0.18, 0.69, 0.3333333333333333, -0.6], [-0.03, 0.365, -1.0, -0.06666666666666667], [0.695, -0.215, -0.3333333333333333, -0.4533333333333333], [-0.39, 0.53, -0.6666666666666666, 0.013333333333333334], [-0.635, 0.66, 0.0, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5, 6)]
Read after code: 13.830714041367173 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.4974034791857169
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type:
Classify: 2.0088325794786215 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and dark-colored dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)```
82
Understand: 9.827158440835774 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.87, -0.36, 0.3333333333333333, 0.7066666666666667], [-0.71, 0.27, -0.6666666666666666, -0.9333333333333333], [0.53, -0.02, 0.3333333333333333, -0.6], [0.32, -0.34, -1.0, -0.06666666666666667], [-0.04, -0.175, -0.6666666666666666, 0.013333333333333334], [-0.18, 0.665, -0.6666666666666666, 0.32], [-0.285, -0.045, 0.0, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes, is there a medium-sized and dark-colored dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4, 6)]
Read after code: 11.868445172905922 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6246151312732824
GENERATE SELECT
[('medium', 'grey')] [('medium', 'dark'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is medium-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a medium size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 2.4551200261339545 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 4.845878700725734 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.505, -0.295, -1.0, 0.3333333333333333], [0.895, 0.4, 1.0, -0.05333333333333334], [0.18, 0.69, 0.3333333333333333, -0.6], [-0.03, 0.365, -1.0, -0.06666666666666667], [0.695, -0.215, -0.3333333333333333, -0.4533333333333333], [-0.39, 0.53, -0.6666666666666666, 0.013333333333333334], [-0.635, 0.66, 0.0, 0.25333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 7.333151433616877 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
Type:
Classify: 2.491681075654924 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
85
Understand: 12.639379645697773 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.185, 0.02, 0.0, -0.3333333333333333], [-0.445, 0.225, 0.6666666666666666, -0.72], [-0.005, 0.78, 0.6666666666666666, -0.76], [-0.8, 0.575, 1.0, -0.14666666666666667], [0.175, -0.67, -0.6666666666666666, -0.5866666666666667], [-0.985, -0.045, -0.6666666666666666, 0.12], [-0.195, -0.73, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.171881177462637 seconds
Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and grey?
Type:
Classify: 2.0462303599342704 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_dark = is_dark(b, ctx)
```
94
Understand: 14.133906875737011 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.29, 0.435, 0.6666666666666666, -0.9733333333333334], [0.25, -0.81, 0.0, -0.3333333333333333], [-0.01, -0.6, 0.6666666666666666, -0.72], [0.435, -0.05, 0.6666666666666666, -0.76], [-0.365, -0.255, 1.0, -0.14666666666666667], [-0.16, -0.025, 0.3333333333333333, 0.88], [-0.905, 0.35, 0.3333333333333333, -0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom right dot is large-sized and dark, and the top left dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4)]
Read after code: 16.222045501694083 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.1810810738127303
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes, is there a medium-sized and light-colored dot above those?
Type:
Classify: 2.0607008142396808 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_above_ab = is_above(c, [a, b], ctx)
45
Understand: 6.385552499443293 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.185, 0.02, 0.0, -0.3333333333333333], [-0.445, 0.225, 0.6666666666666666, -0.72], [-0.005, 0.78, 0.6666666666666666, -0.76], [-0.8, 0.575, 1.0, -0.14666666666666667], [0.175, -0.67, -0.6666666666666666, -0.5866666666666667], [-0.985, -0.045, -0.6666666666666666, 0.12], [-0.195, -0.73, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 8.477792395278811 seconds
Followup config inclusion prob: 0.5642973419521062
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, is there a large size and dark color dot to the right and above those?
Type:
Classify: 2.1479388838633895 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right = is_right(c, [a,b], ctx)
check_c_above = is_above(c, [a,b], ctx)
```
57
Understand: 7.168636815622449 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.29, 0.435, 0.6666666666666666, -0.9733333333333334], [0.25, -0.81, 0.0, -0.3333333333333333], [-0.01, -0.6, 0.6666666666666666, -0.72], [0.435, -0.05, 0.6666666666666666, -0.76], [-0.365, -0.255, 1.0, -0.14666666666666667], [-0.16, -0.025, 0.3333333333333333, 0.88], [-0.905, 0.35, 0.3333333333333333, -0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 4)]


# Turn 0
# Them: No, is there a large size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right = is_right(c, [a,b], ctx)
                check_c_above = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_right
                    and check_c_above
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3, 4)]
Read after code: 9.350020630285144 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5472748205385523
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium size and light color dot above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Is there a large size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, is there a medium-sized and light-colored dot above those?
Type:
Classify: 3.6668465612456203 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a medium-sized and light-colored dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,c,
New dots: d,
Save dots:
a,b,c,d
Code:
```
check_d_medium = is_medium_size(d, ctx)
check_d_light = is_light(d, ctx)
check_d_above_abc = is_above(d, [a,b,c], ctx)
47
Understand: 6.283156733028591 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.185, 0.02, 0.0, -0.3333333333333333], [-0.445, 0.225, 0.6666666666666666, -0.72], [-0.005, 0.78, 0.6666666666666666, -0.76], [-0.8, 0.575, 1.0, -0.14666666666666667], [0.175, -0.67, -0.6666666666666666, -0.5866666666666667], [-0.985, -0.045, -0.6666666666666666, 0.12], [-0.195, -0.73, 0.6666666666666666, -0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 3)]


# Turn 0
# Them: Yes, is there a medium-sized and light-colored dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for d, in get1idxs(idxs, exclude=[a,b,c,]):
                check_d_medium = is_medium_size(d, ctx)
                check_d_light = is_light(d, ctx)
                
                if (
                    True 
                    and check_d_medium
                    and check_d_light
                    
                ):
                    dots = frozenset([a,b,c,d,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 9.979375147260725 seconds
Followup config inclusion prob: 0.6490655831524025
GENERATE SELECT
[('large', 'grey')] [('large', 'dark'), ('large', 'dark')]
no select ambiguity
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and dark and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the bottom right dot is large-sized and dark and the top left dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a medium size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Is there a large size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 2
End
Turn 4: Yes. Is there a medium size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, let's select the one that's large in size and grey in color. <selection>.
Type:
Classify: 2.0263699647039175 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the one that's large in size and grey in color. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 4.593537617474794 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.29, 0.435, 0.6666666666666666, -0.9733333333333334], [0.25, -0.81, 0.0, -0.3333333333333333], [-0.01, -0.6, 0.6666666666666666, -0.72], [0.435, -0.05, 0.6666666666666666, -0.76], [-0.365, -0.255, 1.0, -0.14666666666666667], [-0.16, -0.025, 0.3333333333333333, 0.88], [-0.905, 0.35, 0.3333333333333333, -0.7733333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 4)]


# Turn 0
# Them: No, let's select the one that's large in size and grey in color. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 6.6561349183321 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark?
Type:
Classify: 1.8587078088894486 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
84
Understand: 12.651304609142244 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.19, -0.96, -0.6666666666666666, -0.28], [0.425, 0.73, -0.3333333333333333, 0.6266666666666667], [0.585, 0.2, -0.3333333333333333, -0.7466666666666667], [-0.025, -0.24, 0.0, -0.4], [0.495, -0.72, 0.6666666666666666, 0.18666666666666668], [0.435, -0.33, -0.3333333333333333, -0.49333333333333335], [0.495, -0.5, -0.3333333333333333, -0.7466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_light
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2)]
Read after code: 14.552653548307717 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5003641119422084
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot below those?
Type:
Classify: 4.77624418400228 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
43
Understand: 6.324444647878408 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.1, 0.645, -0.6666666666666666, 0.84], [-0.6, 0.485, -0.3333333333333333, 0.6266666666666667], [-0.44, -0.045, -0.3333333333333333, -0.7466666666666667], [0.15, -0.97, 1.0, 0.6133333333333333], [-0.585, -0.58, -0.3333333333333333, -0.49333333333333335], [-0.53, -0.75, -0.3333333333333333, -0.7466666666666667], [0.64, -0.465, -0.3333333333333333, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 2, 4), (1, 2, 5)]
Read after code: 11.131807865574956 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6176848727144537
GENERATE SELECT
[('small', 'light')] [('small', 'dark'), ('small', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 1.6331330137327313 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 5.9418019130826 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.19, -0.96, -0.6666666666666666, -0.28], [0.425, 0.73, -0.3333333333333333, 0.6266666666666667], [0.585, 0.2, -0.3333333333333333, -0.7466666666666667], [-0.025, -0.24, 0.0, -0.4], [0.495, -0.72, 0.6666666666666666, 0.18666666666666668], [0.435, -0.33, -0.3333333333333333, -0.49333333333333335], [0.495, -0.5, -0.3333333333333333, -0.7466666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 2, 5)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1,)]
Read after code: 7.605678332038224 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark?
Type:
Classify: 2.612439351156354 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 10.702009508386254 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.83, -0.3333333333333333, -0.92], [-0.58, 0.505, -0.3333333333333333, 0.3333333333333333], [0.835, -0.365, -0.6666666666666666, -0.12], [0.35, -0.545, -0.3333333333333333, 0.64], [0.905, 0.19, -0.6666666666666666, -0.3466666666666667], [-0.99, 0.095, -0.3333333333333333, -0.24], [-0.76, -0.545, -0.6666666666666666, 0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5)]
Read after code: 13.357552551664412 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.4491762793827391
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and dark color dot to the right and above those?
Type:
Classify: 2.2405424378812313 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
81
Understand: 12.09019679389894 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.695, -0.37, -1.0, 0.8], [-0.15, 0.55, -0.3333333333333333, 0.3333333333333333], [-0.725, -0.605, 0.3333333333333333, 0.6266666666666667], [0.78, -0.5, -0.3333333333333333, 0.64], [-0.565, 0.14, -0.3333333333333333, -0.24], [-0.335, -0.5, -0.6666666666666666, 0.14666666666666667], [-0.655, 0.665, -1.0, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 6)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.360425227321684 seconds
Followup config inclusion prob: 0.45555629384884944
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the left and below those?
Type:
Classify: 2.4779682150110602 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 12.663884548470378 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.83, -0.3333333333333333, -0.92], [-0.58, 0.505, -0.3333333333333333, 0.3333333333333333], [0.835, -0.365, -0.6666666666666666, -0.12], [0.35, -0.545, -0.3333333333333333, 0.64], [0.905, 0.19, -0.6666666666666666, -0.3466666666666667], [-0.99, 0.095, -0.3333333333333333, -0.24], [-0.76, -0.545, -0.6666666666666666, 0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 5)]


# Turn 0
# Them: No. Is there a small size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.178308684378862 seconds
Followup config inclusion prob: 0.4491762793827391
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
Type:
Classify: 1.817731799557805 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 12.407450717873871 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.695, -0.37, -1.0, 0.8], [-0.15, 0.55, -0.3333333333333333, 0.3333333333333333], [-0.725, -0.605, 0.3333333333333333, 0.6266666666666667], [0.78, -0.5, -0.3333333333333333, 0.64], [-0.565, 0.14, -0.3333333333333333, -0.24], [-0.335, -0.5, -0.6666666666666666, 0.14666666666666667], [-0.655, 0.665, -1.0, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 4)]
Read after code: 14.265357938595116 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.19465941423803151
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: Yes, is there a small size and dark color dot to the left and above those?
Type:
Classify: 2.1673887046054006 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)
```
55
Understand: 13.839422480203211 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.83, -0.3333333333333333, -0.92], [-0.58, 0.505, -0.3333333333333333, 0.3333333333333333], [0.835, -0.365, -0.6666666666666666, -0.12], [0.35, -0.545, -0.3333333333333333, 0.64], [0.905, 0.19, -0.6666666666666666, -0.3466666666666667], [-0.99, 0.095, -0.3333333333333333, -0.24], [-0.76, -0.545, -0.6666666666666666, 0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_left_a
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.041496524587274 seconds
Followup config inclusion prob: 0.5415073330903737
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Is there a small size and dark color dot to the right and above those?
Type:
Classify: 2.327759434469044 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
59
Understand: 8.737227451056242 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.695, -0.37, -1.0, 0.8], [-0.15, 0.55, -0.3333333333333333, 0.3333333333333333], [-0.725, -0.605, 0.3333333333333333, 0.6266666666666667], [0.78, -0.5, -0.3333333333333333, 0.64], [-0.565, 0.14, -0.3333333333333333, -0.24], [-0.335, -0.5, -0.6666666666666666, 0.14666666666666667], [-0.655, 0.665, -1.0, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: No. Is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.098540515638888 seconds
Followup config inclusion prob: 0.19465941423803151
Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the left and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
Type:
Classify: 1.8325353041291237 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 10.60264710150659 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.105, 0.83, -0.3333333333333333, -0.92], [-0.58, 0.505, -0.3333333333333333, 0.3333333333333333], [0.835, -0.365, -0.6666666666666666, -0.12], [0.35, -0.545, -0.3333333333333333, 0.64], [0.905, 0.19, -0.6666666666666666, -0.3466666666666667], [-0.99, 0.095, -0.3333333333333333, -0.24], [-0.76, -0.545, -0.6666666666666666, 0.14666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and light, and the top dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_light
                    and check_b_top
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 3)]
Read after code: 12.476750602014363 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8506775300707767
GENERATE SELECT
[('small', 'grey')] [('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and grey and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 4: Yes. Is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the bottom dot is small-sized and light and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 7: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.137258330360055 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 5.090753921307623 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.695, -0.37, -1.0, 0.8], [-0.15, 0.55, -0.3333333333333333, 0.3333333333333333], [-0.725, -0.605, 0.3333333333333333, 0.6266666666666667], [0.78, -0.5, -0.3333333333333333, 0.64], [-0.565, 0.14, -0.3333333333333333, -0.24], [-0.335, -0.5, -0.6666666666666666, 0.14666666666666667], [-0.655, 0.665, -1.0, -0.6133333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 7.261081368662417 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light?
Type:
Classify: 2.0237568020820618 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = a == get_bottom([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = b == get_top([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
91
Understand: 11.83448744751513 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.075, -0.055, -0.6666666666666666, -0.8133333333333334], [-0.25, 0.05, -0.6666666666666666, 0.6533333333333333], [-0.93, 0.335, 1.0, 0.32], [-0.29, 0.35, 1.0, 0.22666666666666666], [0.59, 0.225, 0.0, 0.21333333333333335], [0.78, -0.14, 0.0, 0.08], [0.625, 0.58, -0.6666666666666666, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = a == get_bottom([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = b == get_top([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_grey
                    and check_b_top
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4, 6)]
Read after code: 13.901596422307193 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7125526470563979
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot left of those?
Type:
Classify: 2.2005266593769193 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a large size and grey color dot left of those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left = is_left(c, [a,b], ctx)
44
Understand: 8.200060640461743 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.77, -0.365, -0.6666666666666666, -0.8133333333333334], [0.355, 0.48, -1.0, 0.8666666666666667], [0.87, -0.3, 1.0, -0.26666666666666666], [0.175, 0.795, 1.0, -0.04], [-0.25, -0.085, 0.0, 0.21333333333333335], [-0.06, -0.455, 0.0, 0.08], [-0.215, 0.27, -0.6666666666666666, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(4, 6)]


# Turn 0
# Them: Yes. Is there a large size and grey color dot left of those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_grey = is_grey(c, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_grey
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 4, 6), (2, 4, 6)]
Read after code: 10.43550181016326 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.829768302332398
GENERATE SELECT
[('medium', 'grey')] [('large', 'grey'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and grey color dot left of those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the medium size and grey color one. <selection>.
Type:
Classify: 1.4896128177642822 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
31
Understand: 6.752182511612773 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.075, -0.055, -0.6666666666666666, -0.8133333333333334], [-0.25, 0.05, -0.6666666666666666, 0.6533333333333333], [-0.93, 0.335, 1.0, 0.32], [-0.29, 0.35, 1.0, 0.22666666666666666], [0.59, 0.225, 0.0, 0.21333333333333335], [0.78, -0.14, 0.0, 0.08], [0.625, 0.58, -0.6666666666666666, 0.8666666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(3, 4, 6)]


# Turn 0
# Them: Yes, let's select the medium size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(4,)]
Read after code: 8.275554735213518 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light?
Type:
Classify: 1.8040383867919445 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_right = a == get_bottom_right([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_left = b == get_top_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 13.011319201439619 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.065, 0.06, -0.3333333333333333, -0.5333333333333333], [-0.575, -0.045, 0.6666666666666666, -0.24], [-0.64, -0.23, -0.3333333333333333, -0.24], [0.265, 0.805, 0.3333333333333333, 0.4266666666666667], [0.61, -0.48, 0.6666666666666666, 0.18666666666666668], [-0.29, 0.935, -0.6666666666666666, -0.56], [-0.145, 0.8, 0.0, -0.9866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_right = a == get_bottom_right([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_left = b == get_top_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_right
                    and check_a_small
                    and check_a_light
                    and check_b_top_left
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.856567293405533 seconds
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is large-sized and grey?
Type:
Classify: 3.046978552825749 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
86
Understand: 14.262030424550176 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.615, -0.165, -0.3333333333333333, -0.5333333333333333], [0.875, 0.215, -1.0, 0.38666666666666666], [-0.285, 0.585, 0.3333333333333333, 0.4266666666666667], [0.055, -0.7, 0.6666666666666666, 0.18666666666666668], [0.7, 0.145, -0.3333333333333333, 0.84], [0.335, 0.36, -1.0, 0.38666666666666666], [-0.695, 0.575, 0.0, -0.9866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is small-sized and dark and the left dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_large
                    and check_a_grey
                    and check_b_right
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.351176884956658 seconds
Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is medium-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the right dot is medium-sized and light and the left dot is medium-sized and dark?
Type:
Classify: 2.321410925127566 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is medium-sized and light and the left dot is medium-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
86
Understand: 12.248089227825403 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.065, 0.06, -0.3333333333333333, -0.5333333333333333], [-0.575, -0.045, 0.6666666666666666, -0.24], [-0.64, -0.23, -0.3333333333333333, -0.24], [0.265, 0.805, 0.3333333333333333, 0.4266666666666667], [0.61, -0.48, 0.6666666666666666, 0.18666666666666668], [-0.29, 0.935, -0.6666666666666666, -0.56], [-0.145, 0.8, 0.0, -0.9866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is medium-sized and light and the left dot is medium-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_right
                    and check_b_medium
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 6)]
Read after code: 14.609516081400216 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7034281330321517
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is medium-sized and dark
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and dark color dot below those?
Type:
Classify: 2.344626611098647 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and dark color dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
43
Understand: 5.143672920763493 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.615, -0.165, -0.3333333333333333, -0.5333333333333333], [0.875, 0.215, -1.0, 0.38666666666666666], [-0.285, 0.585, 0.3333333333333333, 0.4266666666666667], [0.055, -0.7, 0.6666666666666666, 0.18666666666666668], [0.7, 0.145, -0.3333333333333333, 0.84], [0.335, 0.36, -1.0, 0.38666666666666666], [-0.695, 0.575, 0.0, -0.9866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes. Is there a small size and dark color dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 2, 6)]
Read after code: 7.518381653353572 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.8929647061307011
GENERATE SELECT
[('medium', 'light')] [('small', 'dark'), ('medium', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom right dot is small-sized and light and the top left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the right dot is medium-sized and light and the left dot is medium-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 3: Yes. Is there a small size and dark color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 4: Yes, let's select the medium size and light color one. <selection>.
Type:
Classify: 1.689736227504909 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the medium size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_medium_size = is_medium_size(b, ctx)
check_b_light = is_light(b, ctx)
```
29
Understand: 5.438076487742364 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.065, 0.06, -0.3333333333333333, -0.5333333333333333], [-0.575, -0.045, 0.6666666666666666, -0.24], [-0.64, -0.23, -0.3333333333333333, -0.24], [0.265, 0.805, 0.3333333333333333, 0.4266666666666667], [0.61, -0.48, 0.6666666666666666, 0.18666666666666668], [-0.29, 0.935, -0.6666666666666666, -0.56], [-0.145, 0.8, 0.0, -0.9866666666666667]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 6)]


# Turn 0
# Them: Yes, let's select the medium size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_medium_size = is_medium_size(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_medium_size
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 7.151451733894646 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey?
Type:
Classify: 1.3979918919503689 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_right = is_right(a, b, ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_left = is_left(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)```
86
Understand: 11.846481527201831 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.89, 0.185, -1.0, 0.17333333333333334], [-0.15, 0.795, -0.3333333333333333, 0.2], [0.655, 0.28, 0.6666666666666666, 0.6133333333333333], [-0.295, -0.385, -0.6666666666666666, -0.44], [0.225, -0.48, -0.6666666666666666, 0.5733333333333334], [-0.1, 0.615, -1.0, 0.6533333333333333], [0.4, 0.79, -0.3333333333333333, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_right = is_right(a, b, ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_left = is_left(b, a, ctx)
                check_b_small = is_small(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_right
                    and check_a_large
                    and check_a_light
                    and check_b_left
                    and check_b_small
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 6)]
Read after code: 13.288003930822015 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.5328615451064744
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and grey color dot to the left and above those?
Type:
Classify: 2.9980094581842422 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
57
Understand: 8.62876163981855 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.7, 0.645, 0.6666666666666666, 0.6133333333333333], [-0.315, -0.62, 0.6666666666666666, 0.72], [-0.25, -0.02, -0.6666666666666666, -0.44], [0.265, -0.11, -0.6666666666666666, 0.5733333333333334], [-0.585, -0.745, -1.0, 0.17333333333333334], [-0.06, 0.985, -1.0, 0.6533333333333333], [-0.035, -0.84, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: Yes, is there a small size and grey color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.654960873536766 seconds
Followup config inclusion prob: 0.5682669243519582
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the right and above those?
Type:
Classify: 2.164471716620028 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
59
Understand: 12.117257440462708 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.89, 0.185, -1.0, 0.17333333333333334], [-0.15, 0.795, -0.3333333333333333, 0.2], [0.655, 0.28, 0.6666666666666666, 0.6133333333333333], [-0.295, -0.385, -0.6666666666666666, -0.44], [0.225, -0.48, -0.6666666666666666, 0.5733333333333334], [-0.1, 0.615, -1.0, 0.6533333333333333], [0.4, 0.79, -0.3333333333333333, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: No. Is there a small size and light color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.319946305826306 seconds
Followup config inclusion prob: 0.5328615451064744
Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
Type:
Classify: 1.8503874000161886 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 12.836247476749122 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.7, 0.645, 0.6666666666666666, 0.6133333333333333], [-0.315, -0.62, 0.6666666666666666, 0.72], [-0.25, -0.02, -0.6666666666666666, -0.44], [0.265, -0.11, -0.6666666666666666, 0.5733333333333334], [-0.585, -0.745, -1.0, 0.17333333333333334], [-0.06, 0.985, -1.0, 0.6533333333333333], [-0.035, -0.84, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the left dot is small-sized and light and the right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 14.72972107399255 seconds
Followup config inclusion prob: 0.5682669243519582
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and dark color dot to the right and above those?
Type:
Classify: 2.7481495533138514 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
59
Understand: 8.450080074369907 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.89, 0.185, -1.0, 0.17333333333333334], [-0.15, 0.795, -0.3333333333333333, 0.2], [0.655, 0.28, 0.6666666666666666, 0.6133333333333333], [-0.295, -0.385, -0.6666666666666666, -0.44], [0.225, -0.48, -0.6666666666666666, 0.5733333333333334], [-0.1, 0.615, -1.0, 0.6533333333333333], [0.4, 0.79, -0.3333333333333333, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: No. Is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.234954264946282 seconds
Followup config inclusion prob: 0.5328615451064744
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
Type:
Classify: 1.8616157229989767 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
94
Understand: 14.216762631200254 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.7, 0.645, 0.6666666666666666, 0.6133333333333333], [-0.315, -0.62, 0.6666666666666666, 0.72], [-0.25, -0.02, -0.6666666666666666, -0.44], [0.265, -0.11, -0.6666666666666666, 0.5733333333333334], [-0.585, -0.745, -1.0, 0.17333333333333334], [-0.06, 0.985, -1.0, 0.6533333333333333], [-0.035, -0.84, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is small-sized and grey and the bottom right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.119658334180713 seconds
Followup config inclusion prob: 0.5682669243519582
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: No, is there a medium-sized and light-colored dot to the right and below those?
Type:
Classify: 2.1631541457027197 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, is there a medium-sized and light-colored dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_medium = is_medium_size(c, ctx)
check_c_light = is_light(c, ctx)
check_c_right = is_right(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
60
Understand: 9.947180110029876 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.89, 0.185, -1.0, 0.17333333333333334], [-0.15, 0.795, -0.3333333333333333, 0.2], [0.655, 0.28, 0.6666666666666666, 0.6133333333333333], [-0.295, -0.385, -0.6666666666666666, -0.44], [0.225, -0.48, -0.6666666666666666, 0.5733333333333334], [-0.1, 0.615, -1.0, 0.6533333333333333], [0.4, 0.79, -0.3333333333333333, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: No, is there a medium-sized and light-colored dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_medium = is_medium_size(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_right = is_right(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_medium
                    and check_c_light
                    and check_c_right
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.148260356858373 seconds
Followup config inclusion prob: 0.5328615451064744
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and light color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Is there a medium size and light color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: No. Is there a small size and light color dot above those?
Type:
Classify: 2.175032712519169 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and light color dot above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
43
Understand: 5.8860212825238705 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.7, 0.645, 0.6666666666666666, 0.6133333333333333], [-0.315, -0.62, 0.6666666666666666, 0.72], [-0.25, -0.02, -0.6666666666666666, -0.44], [0.265, -0.11, -0.6666666666666666, 0.5733333333333334], [-0.585, -0.745, -1.0, 0.17333333333333334], [-0.06, 0.985, -1.0, 0.6533333333333333], [-0.035, -0.84, 0.0, 0.72]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 4)]


# Turn 0
# Them: No. Is there a small size and light color dot above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3, 4), (1, 4, 5)]
Read after code: 8.098307212814689 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6685357509813071
GENERATE SELECT
[('small', 'grey')] [('large', 'light'), ('small', 'light')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is large-sized and light and the left dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and grey color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and light color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the left dot is small-sized and light and the right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 6: No. Is there a medium size and light color dot to the right and below those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 7: No. Is there a small size and light color dot above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 8: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 1.9889348922297359 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 3.4584728805348277 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.89, 0.185, -1.0, 0.17333333333333334], [-0.15, 0.795, -0.3333333333333333, 0.2], [0.655, 0.28, 0.6666666666666666, 0.6133333333333333], [-0.295, -0.385, -0.6666666666666666, -0.44], [0.225, -0.48, -0.6666666666666666, 0.5733333333333334], [-0.1, 0.615, -1.0, 0.6533333333333333], [0.4, 0.79, -0.3333333333333333, 0.52]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5, 6)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 5.4777800077572465 seconds
Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey?
Type:
Classify: 1.752659771591425 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
95
Understand: 15.3575057098642 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.23, -0.6, 0.3333333333333333, -0.4533333333333333], [-0.22, 0.275, -1.0, -0.9466666666666667], [-0.83, -0.31, -0.6666666666666666, 0.06666666666666667], [-0.945, 0.095, 0.6666666666666666, 0.12], [-0.335, -0.105, -0.3333333333333333, 0.013333333333333334], [-0.67, -0.62, -0.3333333333333333, 0.30666666666666664], [-0.555, 0.795, -0.3333333333333333, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_medium
                    and check_a_dark
                    and check_b_top_right
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 4)]
Read after code: 17.152723597362638 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.17598100274876577
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a small size and dark color dot to the right and above those?
Type:
Classify: 2.439196642488241 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_above_a = is_above(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_above_b = is_above(c, b, ctx)
```
81
Understand: 17.441055526025593 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.635, 0.305, 0.3333333333333333, -0.4533333333333333], [0.035, 0.6, -0.6666666666666666, 0.06666666666666667], [-0.58, -0.405, 0.3333333333333333, -0.6533333333333333], [-0.725, 0.545, -1.0, -0.72], [0.535, 0.805, -0.3333333333333333, 0.013333333333333334], [-0.27, 0.04, -0.3333333333333333, -0.12], [0.195, 0.29, -0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5)]


# Turn 0
# Them: Yes, is there a small size and dark color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_above_a = is_above(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                check_c_above_b = is_above(c, b, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_right_a
                    and check_c_above_a
                    and check_c_right_b
                    and check_c_above_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.913343919441104 seconds
Followup config inclusion prob: 0.48871231205258364
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type:
Classify: 1.946355507709086 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
61
Understand: 9.557026646099985 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.23, -0.6, 0.3333333333333333, -0.4533333333333333], [-0.22, 0.275, -1.0, -0.9466666666666667], [-0.83, -0.31, -0.6666666666666666, 0.06666666666666667], [-0.945, 0.095, 0.6666666666666666, 0.12], [-0.335, -0.105, -0.3333333333333333, 0.013333333333333334], [-0.67, -0.62, -0.3333333333333333, 0.30666666666666664], [-0.555, 0.795, -0.3333333333333333, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.538408605381846 seconds
Followup config inclusion prob: 0.17598100274876577
Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No, do you see a pair of dots where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
Type:
Classify: 1.9175005098804832 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
88
Understand: 14.121955535374582 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.635, 0.305, 0.3333333333333333, -0.4533333333333333], [0.035, 0.6, -0.6666666666666666, 0.06666666666666667], [-0.58, -0.405, 0.3333333333333333, -0.6533333333333333], [-0.725, 0.545, -1.0, -0.72], [0.535, 0.805, -0.3333333333333333, 0.013333333333333334], [-0.27, 0.04, -0.3333333333333333, -0.12], [0.195, 0.29, -0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is small-sized and grey and the top dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_small
                    and check_a_grey
                    and check_b_top
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.08354499284178 seconds
Followup config inclusion prob: 0.48871231205258364
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and grey color dot to the right and above those?
Type:
Classify: 2.597342130728066 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_grey = is_grey(c, ctx)
check_c_right_ab = is_right(c, [a,b], ctx)
check_c_above_ab = is_above(c, [a,b], ctx)
```
61
Understand: 8.874523622915149 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.23, -0.6, 0.3333333333333333, -0.4533333333333333], [-0.22, 0.275, -1.0, -0.9466666666666667], [-0.83, -0.31, -0.6666666666666666, 0.06666666666666667], [-0.945, 0.095, 0.6666666666666666, 0.12], [-0.335, -0.105, -0.3333333333333333, 0.013333333333333334], [-0.67, -0.62, -0.3333333333333333, 0.30666666666666664], [-0.555, 0.795, -0.3333333333333333, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: No. Is there a small size and grey color dot to the right and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_grey = is_grey(c, ctx)
                check_c_right_ab = is_right(c, [a,b], ctx)
                check_c_above_ab = is_above(c, [a,b], ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_grey
                    and check_c_right_ab
                    and check_c_above_ab
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 11.508326473645866 seconds
Followup config inclusion prob: 0.17598100274876577
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No, do you see a pair of dots where the top dot is small-sized and dark, and the bottom dot is small-sized and grey?
Type:
Classify: 1.5810966929420829 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and dark, and the bottom dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
86
Understand: 17.830161856487393 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.635, 0.305, 0.3333333333333333, -0.4533333333333333], [0.035, 0.6, -0.6666666666666666, 0.06666666666666667], [-0.58, -0.405, 0.3333333333333333, -0.6533333333333333], [-0.725, 0.545, -1.0, -0.72], [0.535, 0.805, -0.3333333333333333, 0.013333333333333334], [-0.27, 0.04, -0.3333333333333333, -0.12], [0.195, 0.29, -0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and dark, and the bottom dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 19.455233819782734 seconds
Followup config inclusion prob: 0.48871231205258364
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 6: No. Is there a small size and dark color dot to the left and above those?
Type:
Classify: 2.8381180772557855 seconds
Follow up question, new dots.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No. Is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: ,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_left_a = is_left(c, a, ctx)
check_c_above_b = is_above(c, b, ctx)```
55
Understand: 8.408060248941183 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.23, -0.6, 0.3333333333333333, -0.4533333333333333], [-0.22, 0.275, -1.0, -0.9466666666666667], [-0.83, -0.31, -0.6666666666666666, 0.06666666666666667], [-0.945, 0.095, 0.6666666666666666, 0.12], [-0.335, -0.105, -0.3333333333333333, 0.013333333333333334], [-0.67, -0.62, -0.3333333333333333, 0.30666666666666664], [-0.555, 0.795, -0.3333333333333333, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 4)]


# Turn 0
# Them: No. Is there a small size and dark color dot to the left and above those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for , in get0idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_left_a = is_left(c, a, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_dark
                    and check_c_left_a
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
None
Read after code: 11.282267129048705 seconds
Followup config inclusion prob: 0.17598100274876577
Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 2: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Is there a small size and grey color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 5: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Is there a small size and dark color dot to the left and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 7: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and grey?
Type:
Classify: 1.7753220992162824 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
92
Understand: 15.598677799105644 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.635, 0.305, 0.3333333333333333, -0.4533333333333333], [0.035, 0.6, -0.6666666666666666, 0.06666666666666667], [-0.58, -0.405, 0.3333333333333333, -0.6533333333333333], [-0.725, 0.545, -1.0, -0.72], [0.535, 0.805, -0.3333333333333333, 0.013333333333333334], [-0.27, 0.04, -0.3333333333333333, -0.12], [0.195, 0.29, -0.3333333333333333, 0.30666666666666664]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 6), (5, 6), (1, 4)]
Read after code: 17.415561164729297 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.749337285781134
GENERATE SELECT
[('small', 'grey')] [('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the bottom left dot is medium-sized and dark and the top right dot is small-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a small size and dark color dot to the right and above those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is small-sized and grey and the top dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Is there a small size and grey color dot to the right and above those? <eos>
Type: Follow up question, new dots.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 6: No. Is there a small size and dark color dot to the left and above those? <eos>
Type: No op.
New dots: 0
End
Turn 7: Do you see a pair of dots, where the top dot is small-sized and grey and the bottom dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 8: Yes, let's select the small size and grey color one. <selection>.
Type:
Classify: 2.2641493156552315 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
29
Understand: 3.580015075393021 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.23, -0.6, 0.3333333333333333, -0.4533333333333333], [-0.22, 0.275, -1.0, -0.9466666666666667], [-0.83, -0.31, -0.6666666666666666, 0.06666666666666667], [-0.945, 0.095, 0.6666666666666666, 0.12], [-0.335, -0.105, -0.3333333333333333, 0.013333333333333334], [-0.67, -0.62, -0.3333333333333333, 0.30666666666666664], [-0.555, 0.795, -0.3333333333333333, 0.64]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 5)]


# Turn 0
# Them: Yes, let's select the small size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,), (2,)]
Read after code: 5.875975931994617 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light?
Type:
Classify: 2.1184396976605058 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
85
Understand: 13.051754849031568 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.27, 0.265, 0.3333333333333333, 0.02666666666666667], [-0.07, -0.31, -0.3333333333333333, -0.7733333333333333], [-0.315, 0.8, 0.3333333333333333, 0.8933333333333333], [-0.13, 0.02, 1.0, -0.64], [0.24, -0.26, 0.6666666666666666, 0.6266666666666667], [-0.84, -0.08, 1.0, -0.7866666666666666], [-0.34, 0.38, -0.6666666666666666, 0.4]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_medium
                    and check_a_light
                    and check_b_bottom
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 6)]
Read after code: 15.211653884500265 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7132922530886574
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and dark color dot to the right and below those?
Type:
Classify: 2.3805938130244613 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and dark color dot to the right and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_dark = is_dark(c, ctx)
check_c_right_a = is_right(c, a, ctx)
check_c_below_a = is_below(c, a, ctx)
check_c_right_b = is_right(c, b, ctx)
check_c_below_b = is_below(c, b, ctx)
80
Understand: 16.63736578822136 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.495, -0.515, 0.3333333333333333, 0.02666666666666667], [-0.725, 0.225, 0.6666666666666666, -0.68], [-0.095, 0.015, 0.3333333333333333, 0.8933333333333333], [-0.395, 0.8, -0.3333333333333333, -0.64], [0.09, -0.765, 1.0, -0.64], [-0.78, -0.34, 0.0, 0.16], [-0.115, -0.4, -0.6666666666666666, 0.4]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 6)]


# Turn 0
# Them: Yes, is there a large size and dark color dot to the right and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_dark = is_dark(c, ctx)
                check_c_right_a = is_right(c, a, ctx)
                check_c_below_a = is_below(c, a, ctx)
                check_c_right_b = is_right(c, b, ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_dark
                    and check_c_right_a
                    and check_c_below_a
                    and check_c_right_b
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(2, 4, 6)]
Read after code: 19.050595399923623 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9032000114446463
GENERATE SELECT
[('small', 'light')] [('medium', 'light'), ('large', 'dark')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is medium-sized and light and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and dark color dot to the right and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the small size and light color one. <selection>.
Type:
Classify: 2.06835113465786 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and light color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
27
Understand: 3.753231629729271 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.27, 0.265, 0.3333333333333333, 0.02666666666666667], [-0.07, -0.31, -0.3333333333333333, -0.7733333333333333], [-0.315, 0.8, 0.3333333333333333, 0.8933333333333333], [-0.13, 0.02, 1.0, -0.64], [0.24, -0.26, 0.6666666666666666, 0.6266666666666667], [-0.84, -0.08, 1.0, -0.7866666666666666], [-0.34, 0.38, -0.6666666666666666, 0.4]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(2, 3, 6)]


# Turn 0
# Them: Yes, let's select the small size and light color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(6,)]
Read after code: 5.85185784380883 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey?
Type:
Classify: 1.4889199379831553 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_large = is_large(b, ctx)
check_b_grey = is_grey(b, ctx)
```
96
Understand: 24.643685827963054 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.035, 0.5, 0.6666666666666666, 0.6266666666666667], [-0.845, 0.33, -1.0, -0.41333333333333333], [0.355, -0.13, -1.0, -0.36], [0.245, 0.63, -0.3333333333333333, -0.08], [0.045, -0.815, -0.6666666666666666, 0.29333333333333333], [0.385, 0.505, 0.6666666666666666, -0.28], [-0.04, -0.46, 1.0, 0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_large = is_large(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_small
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_large
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3, 5)]
Read after code: 26.177703355439007 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.7092553663235496
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey
Type: New question.
New dots: 2
End
Turn 1: Yes, is there a large size and light color dot to the left and below those?
Type:
Classify: 1.9885135190561414 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, is there a large size and light color dot to the left and below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_large = is_large(c, ctx)
check_c_light = is_light(c, ctx)
check_c_left = is_left(c, [a, b], ctx)
check_c_below = is_below(c, [a, b], ctx)
```
59
Understand: 12.982613227330148 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.52, -0.375, 1.0, 0.22666666666666666], [-0.69, 0.21, 0.6666666666666666, 0.6266666666666667], [0.78, -0.265, 0.0, -0.32], [-0.46, 0.745, -0.3333333333333333, 0.0], [-0.295, -0.415, -1.0, -0.36], [-0.41, 0.34, -0.3333333333333333, -0.08], [-0.27, 0.215, 0.6666666666666666, -0.28]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(5, 6)]


# Turn 0
# Them: Yes, is there a large size and light color dot to the left and below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_large = is_large(c, ctx)
                check_c_light = is_light(c, ctx)
                check_c_left = is_left(c, [a, b], ctx)
                check_c_below = is_below(c, [a, b], ctx)
                
                if (
                    True 
                    and check_c_large
                    and check_c_light
                    and check_c_left
                    and check_c_below
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 5, 6)]
Read after code: 15.002992265857756 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6067227042440997
GENERATE SELECT
[('large', 'grey')] [('large', 'light'), ('small', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top left dot is small-sized and grey and the bottom right dot is large-sized and grey <eos>
Type: New question.
New dots: 2
End
Turn 1: Yes. Is there a large size and light color dot to the left and below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 2: Yes, let's select the large size and grey color one. <selection>.
Type:
Classify: 3.3441205015406013 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the large size and grey color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
```
29
Understand: 7.196243450976908 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.035, 0.5, 0.6666666666666666, 0.6266666666666667], [-0.845, 0.33, -1.0, -0.41333333333333333], [0.355, -0.13, -1.0, -0.36], [0.245, 0.63, -0.3333333333333333, -0.08], [0.045, -0.815, -0.6666666666666666, 0.29333333333333333], [0.385, 0.505, 0.6666666666666666, -0.28], [-0.04, -0.46, 1.0, 0.49333333333333335]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 3, 5)]


# Turn 0
# Them: Yes, let's select the large size and grey color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                
                if (
                    True 
                    and check_a_large
                    and check_a_grey
                    
                ):
                    dots = frozenset([a])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(5,)]
Read after code: 10.571732719428837 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey?
Type:
Classify: 2.3969427393749356 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 13.246986930258572 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.09, -0.675, -0.6666666666666666, 0.6933333333333334], [0.23, 0.105, 0.0, 0.18666666666666668], [-0.505, -0.165, 0.6666666666666666, 0.6933333333333334], [0.03, -0.065, -0.3333333333333333, -0.6666666666666666], [-0.215, 0.31, 0.3333333333333333, -0.68], [0.155, -0.925, -0.6666666666666666, 0.22666666666666666], [-0.875, 0.31, 0.0, -0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_light
                    and check_b_bottom
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.686446724459529 seconds
Do you see a pair of dots, where the right dot is medium-sized and grey and the left dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the right dot is medium-sized and grey and the left dot is small-sized and dark?
Type:
Classify: 2.808370896615088 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the right dot is medium-sized and grey and the left dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_medium = is_medium_size(b, ctx)
check_b_grey = is_grey(b, ctx)
```
87
Understand: 13.542639563791454 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.42, -0.05, -0.6666666666666666, 0.6933333333333334], [-0.28, 0.73, 0.0, 0.18666666666666668], [0.465, 0.1, -0.3333333333333333, 0.5466666666666666], [-0.48, 0.555, -0.3333333333333333, -0.6666666666666666], [-0.36, -0.3, -0.6666666666666666, 0.22666666666666666], [0.535, -0.315, 0.0, 0.2], [0.05, -0.815, 1.0, 0.5333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the right dot is medium-sized and grey and the left dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_medium = is_medium_size(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_dark
                    and check_b_right
                    and check_b_medium
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(1, 3)]
Read after code: 16.392367149703205 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.6999436851027075
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and grey and the left dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and light color dot below those?
Type:
Classify: 3.9029613006860018 seconds
Follow up question, new dots.
New dots: 1
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes. Is there a small size and light color dot below those?
Type: Follow up question, new dots.
Previous dots: a,b,
New dots: c,
Save dots:
a,b,c
Code:
```
check_c_small = is_small(c, ctx)
check_c_light = is_light(c, ctx)
check_c_below_ab = is_below(c, [a,b], ctx)
43
Understand: 6.6520131435245275 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.09, -0.675, -0.6666666666666666, 0.6933333333333334], [0.23, 0.105, 0.0, 0.18666666666666668], [-0.505, -0.165, 0.6666666666666666, 0.6933333333333334], [0.03, -0.065, -0.3333333333333333, -0.6666666666666666], [-0.215, 0.31, 0.3333333333333333, -0.68], [0.155, -0.925, -0.6666666666666666, 0.22666666666666666], [-0.875, 0.31, 0.0, -0.013333333333333334]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(1, 3)]


# Turn 0
# Them: Yes. Is there a small size and light color dot below those?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b, in permutations(config):
            for c, in get1idxs(idxs, exclude=[a,b,]):
                check_c_small = is_small(c, ctx)
                check_c_light = is_light(c, ctx)
                
                if (
                    True 
                    and check_c_small
                    and check_c_light
                    
                ):
                    dots = frozenset([a,b,c,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(0, 1, 3), (1, 3, 5)]
Read after code: 10.590512034483254 seconds
UPDATED BELIEF we see
Followup config inclusion prob: 0.9035477699248794
GENERATE SELECT
[('small', 'dark')] [('small', 'light'), ('medium', 'grey')]
no select ambiguity
IN READ
Yes
UPDATED BELIEF confirmed
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the top dot is small-sized and light and the bottom dot is medium-sized and grey
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the right dot is medium-sized and grey and the left dot is small-sized and dark <eos>
Type: New question.
New dots: 2
End
Turn 2: Yes. Is there a small size and light color dot below those?
Type: Follow up question, new dots.
New dots: 1
End
Turn 3: Yes, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.8879068242385983 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Yes, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: a,b,c,
Save dots:
b
Code:
```
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
27
Understand: 3.6113844588398933 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.42, -0.05, -0.6666666666666666, 0.6933333333333334], [-0.28, 0.73, 0.0, 0.18666666666666668], [0.465, 0.1, -0.3333333333333333, 0.5466666666666666], [-0.48, 0.555, -0.3333333333333333, -0.6666666666666666], [-0.36, -0.3, -0.6666666666666666, 0.22666666666666666], [0.535, -0.315, 0.0, 0.2], [0.05, -0.815, 1.0, 0.5333333333333333]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = [(0, 1, 3)]


# Turn 0
# Them: Yes, let's select the small size and dark color one. <selection>.
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in state:
        for a,b,c, in permutations(config):
            for _ in [0]:
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([b])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=True)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[(3,)]
Read after code: 5.532014166004956 seconds
UPDATED BELIEF we see
Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
IN READ
None
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light?
Type:
Classify: 1.468994677066803 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_left = is_left(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_light = is_light(a, ctx)
check_b_right = is_right(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
83
Understand: 15.155389241874218 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.38, 0.33, 0.0, -0.28], [0.87, 0.315, 1.0, 0.24], [1.0, -0.0, -0.6666666666666666, -0.84], [-0.925, -0.005, -1.0, 0.0], [0.1, -0.93, 0.6666666666666666, 0.68], [0.32, 0.115, -0.3333333333333333, 0.88], [-0.555, 0.565, -0.6666666666666666, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_left = is_left(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_right = is_right(b, a, ctx)
                check_b_small = is_small(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_left
                    and check_a_small
                    and check_a_light
                    and check_b_right
                    and check_b_small
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 16.663953815586865 seconds
Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No, do you see a pair of dots where the top right dot is large-sized and grey and the bottom left dot is small-sized and light?
Type:
Classify: 1.8124304534867406 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is large-sized and grey and the bottom left dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
94
Understand: 13.896411738358438 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.68, -0.25, -0.6666666666666666, -0.72], [-0.535, 0.755, 0.0, -0.28], [-0.245, -0.93, 0.0, 0.09333333333333334], [0.845, 0.425, -0.6666666666666666, -0.84], [0.75, -0.07, -0.3333333333333333, 0.8666666666666667], [-0.055, -0.505, 0.6666666666666666, 0.68], [0.165, 0.54, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is large-sized and grey and the bottom left dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 15.749979752115905 seconds
Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light?
Type:
Classify: 2.3714851438999176 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_left = a == get_top_left([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_right = b == get_bottom_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
95
Understand: 20.340869328938425 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.38, 0.33, 0.0, -0.28], [0.87, 0.315, 1.0, 0.24], [1.0, -0.0, -0.6666666666666666, -0.84], [-0.925, -0.005, -1.0, 0.0], [0.1, -0.93, 0.6666666666666666, 0.68], [0.32, 0.115, -0.3333333333333333, 0.88], [-0.555, 0.565, -0.6666666666666666, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_left = a == get_top_left([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_right = b == get_bottom_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_left
                    and check_a_medium
                    and check_a_grey
                    and check_b_bottom_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 22.755989778786898 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 3: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and grey?
Type:
Classify: 2.1672637183219194 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
89
Understand: 10.726894511841238 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.68, -0.25, -0.6666666666666666, -0.72], [-0.535, 0.755, 0.0, -0.28], [-0.245, -0.93, 0.0, 0.09333333333333334], [0.845, 0.425, -0.6666666666666666, -0.84], [0.75, -0.07, -0.3333333333333333, 0.8666666666666667], [-0.055, -0.505, 0.6666666666666666, 0.68], [0.165, 0.54, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_grey
                    and check_b_top
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 12.935950668528676 seconds
Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No, do you see a pair of dots where the bottom left dot is small-sized and dark and the top right dot is small-sized and light?
Type:
Classify: 1.6402817545458674 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is small-sized and dark and the top right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 12.031844452954829 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.38, 0.33, 0.0, -0.28], [0.87, 0.315, 1.0, 0.24], [1.0, -0.0, -0.6666666666666666, -0.84], [-0.925, -0.005, -1.0, 0.0], [0.1, -0.93, 0.6666666666666666, 0.68], [0.32, 0.115, -0.3333333333333333, 0.88], [-0.555, 0.565, -0.6666666666666666, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is small-sized and dark and the top right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_small
                    and check_a_dark
                    and check_b_top_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.71120204590261 seconds
Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 5: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey?
Type:
Classify: 3.170234613120556 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top_right = a == get_top_right([a,b], ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom_left = b == get_bottom_left([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
```
97
Understand: 17.275241597555578 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.68, -0.25, -0.6666666666666666, -0.72], [-0.535, 0.755, 0.0, -0.28], [-0.245, -0.93, 0.0, 0.09333333333333334], [0.845, 0.425, -0.6666666666666666, -0.84], [0.75, -0.07, -0.3333333333333333, 0.8666666666666667], [-0.055, -0.505, 0.6666666666666666, 0.68], [0.165, 0.54, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top_right = a == get_top_right([a,b], ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom_left = b == get_bottom_left([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_grey = is_grey(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top_right
                    and check_a_medium
                    and check_a_grey
                    and check_b_bottom_left
                    and check_b_small
                    and check_b_grey
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 20.48711696267128 seconds
Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 6: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and light?
Type:
Classify: 1.7447842080146074 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = is_above(a, b, ctx)
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
check_b_bottom = is_below(b, a, ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
84
Understand: 11.456384791992605 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.38, 0.33, 0.0, -0.28], [0.87, 0.315, 1.0, 0.24], [1.0, -0.0, -0.6666666666666666, -0.84], [-0.925, -0.005, -1.0, 0.0], [0.1, -0.93, 0.6666666666666666, 0.68], [0.32, 0.115, -0.3333333333333333, 0.88], [-0.555, 0.565, -0.6666666666666666, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is small-sized and dark and the bottom dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = is_above(a, b, ctx)
                check_a_small = is_small(a, ctx)
                check_a_dark = is_dark(a, ctx)
                check_b_bottom = is_below(b, a, ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_small
                    and check_a_dark
                    and check_b_bottom
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.242326515726745 seconds
Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is small-sized and dark
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 7: No, do you see a pair of dots where the top dot is large-sized and grey and the bottom dot is small-sized and dark?
Type:
Classify: 1.673681752756238 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the top dot is large-sized and grey and the bottom dot is small-sized and dark?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_top = a == get_top([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_bottom = b == get_bottom([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_dark = is_dark(b, ctx)
```
90
Understand: 15.539016554132104 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.68, -0.25, -0.6666666666666666, -0.72], [-0.535, 0.755, 0.0, -0.28], [-0.245, -0.93, 0.0, 0.09333333333333334], [0.845, 0.425, -0.6666666666666666, -0.84], [0.75, -0.07, -0.3333333333333333, 0.8666666666666667], [-0.055, -0.505, 0.6666666666666666, 0.68], [0.165, 0.54, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the top dot is large-sized and grey and the bottom dot is small-sized and dark?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_top = a == get_top([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_bottom = b == get_bottom([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_dark = is_dark(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_top
                    and check_a_large
                    and check_a_grey
                    and check_b_bottom
                    and check_b_small
                    and check_b_dark
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 17.2532590450719 seconds
Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is large-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 6: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 7: No. Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 8: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is large-sized and light?
Type:
Classify: 1.8265494490042329 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is large-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom = is_below(a, b, ctx)
check_a_medium = is_medium_size(a, ctx)
check_a_grey = is_grey(a, ctx)
check_b_top = is_above(b, a, ctx)
check_b_large = is_large(b, ctx)
check_b_light = is_light(b, ctx)
```
87
Understand: 11.992678222246468 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[-0.38, 0.33, 0.0, -0.28], [0.87, 0.315, 1.0, 0.24], [1.0, -0.0, -0.6666666666666666, -0.84], [-0.925, -0.005, -1.0, 0.0], [0.1, -0.93, 0.6666666666666666, 0.68], [0.32, 0.115, -0.3333333333333333, 0.88], [-0.555, 0.565, -0.6666666666666666, 0.0]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom dot is medium-sized and grey and the top dot is large-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom = is_below(a, b, ctx)
                check_a_medium = is_medium_size(a, ctx)
                check_a_grey = is_grey(a, ctx)
                check_b_top = is_above(b, a, ctx)
                check_b_large = is_large(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom
                    and check_a_medium
                    and check_a_grey
                    and check_b_top
                    and check_b_large
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 13.860973048955202 seconds
Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and light
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 5: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey <eos>
Type: New question.
New dots: 0
End
Turn 6: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 7: No. Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is small-sized and dark <eos>
Type: New question.
New dots: 0
End
Turn 8: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is large-sized and light
Type: New question.
New dots: 2
End
Turn 9: No, do you see a pair of dots where the bottom left dot is large-sized and light, and the top right dot is small-sized and light?
Type:
Classify: 1.9476170856505632 seconds
New question.
New dots: 2
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, do you see a pair of dots where the bottom left dot is large-sized and light, and the top right dot is small-sized and light?
Type: New question.
Dots: a,b,
Save dots:
a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_a_bottom_left = a == get_bottom_left([a,b], ctx)
check_a_large = is_large(a, ctx)
check_a_light = is_light(a, ctx)
check_b_top_right = b == get_top_right([a,b], ctx)
check_b_small = is_small(b, ctx)
check_b_light = is_light(b, ctx)
```
92
Understand: 23.89112581498921 seconds


from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations


def get_ctx():
    ctx = np.array([[0.68, -0.25, -0.6666666666666666, -0.72], [-0.535, 0.755, 0.0, -0.28], [-0.245, -0.93, 0.0, 0.09333333333333334], [0.845, 0.425, -0.6666666666666666, -0.84], [0.75, -0.07, -0.3333333333333333, 0.8666666666666667], [-0.055, -0.505, 0.6666666666666666, 0.68], [0.165, 0.54, -0.3333333333333333, 0.88]])
    return ctx

idxs = list(range(7))

# New.
ctx = get_ctx()
state = None


# Turn 0
# Them: No, do you see a pair of dots where the bottom left dot is large-sized and light, and the top right dot is small-sized and light?
def turn(state):
    results = set()
    orderedresults = []
    parents = []
    for config in getsets(idxs, 2):
        for a,b, in permutations(config):
            for _ in [0]:
                check_ab_pair = all_close([a,b], ctx)
                check_a_bottom_left = a == get_bottom_left([a,b], ctx)
                check_a_large = is_large(a, ctx)
                check_a_light = is_light(a, ctx)
                check_b_top_right = b == get_top_right([a,b], ctx)
                check_b_small = is_small(b, ctx)
                check_b_light = is_light(b, ctx)
                
                if (
                    True 
                    and check_ab_pair
                    and check_a_bottom_left
                    and check_a_large
                    and check_a_light
                    and check_b_top_right
                    and check_b_small
                    and check_b_light
                    
                ):
                    dots = frozenset([a,b,])
                    if dots not in results:
                        results.add(dots)
                        orderedresults.append(dots)
                        parents.append(config)
    return sort_state(orderedresults, parents, ctx, select=False)
state = turn(state)


if state is not None:
    print([tuple(x) for x in state])
else:
    print("None")
[]
Read after code: 25.882193432189524 seconds
IN READ
None
NO UPDATED BELIEF none
Turn 0: Got a triangle of 3 light grey dots by itself.
Type: New question.
New dots: 3
End
Turn 1: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
New dots: 0
End
Turn 2: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
New dots: 2
End
Turn 3: No.
Type: No op.
New dots: 0
End
Turn 4: What about a large medium grey dot near the center?
Type: New question.
New dots: 1
End
Turn 5: Is there a smaller black one next to it?
Type: Follow up question, new dots.
New dots: 1
End
Turn 6: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
New dots: 3
End
Turn 7: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
New dots: 0
End
Turn 8: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
New dots: 0
End
Turn 9: Yes, let's select the large one. <selection>.
Type: Select a dot.
New dots: 0
End
Turn 0: Do you see a large black dot on the bottom left?
Type: New question.
New dots: 1
End
Turn 1: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
New dots: 3
End
Turn 2: Select the largest one.
Type: Select a dot.
New dots: 0
End
Turn 3: Yes.
Type: No op.
New dots: 0
End
Turn 4: Okay. <selection>.
Type: No op.
New dots: 0
End


Turn 0: Do you see a pair of dots, where the right dot is small-sized and dark and the left dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 1: No. Do you see a pair of dots, where the top right dot is large-sized and grey and the bottom left dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 2: No. Do you see a pair of dots, where the top left dot is medium-sized and grey and the bottom right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 3: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 4: No. Do you see a pair of dots, where the bottom left dot is small-sized and dark and the top right dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 5: No. Do you see a pair of dots, where the top right dot is medium-sized and grey and the bottom left dot is small-sized and grey
Type: New question.
New dots: 2
End
Turn 6: No. Do you see a pair of dots, where the top dot is small-sized and dark and the bottom dot is small-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 7: No. Do you see a pair of dots, where the top dot is large-sized and grey and the bottom dot is small-sized and dark
Type: New question.
New dots: 2
End
Turn 8: No. Do you see a pair of dots, where the bottom dot is medium-sized and grey and the top dot is large-sized and light <eos>
Type: New question.
New dots: 0
End
Turn 9: No. Do you see a pair of dots, where the bottom left dot is large-sized and light and the top right dot is small-sized and light
Type: New question.
New dots: 2
End
Turn 10: No, let's select the small size and dark color one. <selection>.
Type:
Classify: 1.5171661600470543 seconds
Select a dot.
New dots: 0
Translate the text into code.
These are the available functions.
```
from oc.fns.context import get_ctx
from oc.fns.shapes import is_triangle, is_line, is_square
from oc.fns.spatial import all_close, is_above, is_below, is_right, is_left, is_middle
from oc.fns.spatial import get_top, get_bottom, get_right, get_left
from oc.fns.spatial import get_top_right, get_top_left, get_bottom_right, get_bottom_left
from oc.fns.spatial import get_middle
from oc.fns.spatial import get_distance, get_minimum_radius
from oc.fns.color import is_dark, is_grey, is_light, lightest, darkest, same_color, different_color, is_darker, is_lighter
from oc.fns.size import is_large, is_small, is_medium_size, largest, smallest, same_size, different_size, is_larger, is_smaller
from oc.fns.iterators import get1idxs, get2idxs, get3idxs, getsets
from oc.fns.lists import add
from oc.fns.lists import sort_state
import numpy as np
from functools import partial
from itertools import permutations

```
`idxs = list(range(7))` corresponds to the available dots.

Here are some examples.

Text: Got a triangle of 3 light grey dots by itself.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_triangle = is_triangle([a,b,c], ctx)
check_abc_light = all([is_light(dot, ctx) for dot in [a,b,c]])
check_abc_alone = all([not all_close([a,b,c,dot], ctx) for dot in idxs if dot not in [a,b,c]])
```

Text: Could be. One on right is largest with a tiny gray on top??
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_right = a == get_right([a,b,c], ctx)
check_a_largest = a == largest([a,b,c], ctx)
check_b_tiny = is_small(b, ctx)
check_b_grey = is_grey(b, ctx)
check_b_top = b == get_top([a,b,c], ctx)
```

Text: Nevermind. Do you see a pair of dark dots? One with another above and to the right of it? Same size as well.
Type: New question.
Dots: a,b
Save dots: a,b
Code:
```
check_ab_pair = all_close([a,b], ctx)
check_ab_dark = is_dark(a, ctx) and is_dark(b, ctx)
check_b_right_a = is_right(b, a, ctx)
check_b_above_a = is_above(b, a, ctx)
check_ab_same_size = same_size([a,b], ctx)
```

Text: No.
Type: No op.
Code:
```
pass
```

Text: What about a large medium grey dot near the center?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
check_a_grey = is_grey(a, ctx)
check_a_center = is_middle(a, None, ctx)
```

Text: Is there a smaller black one next to it?
Type: Follow up question, new dots.
Previous dots: a,
New dots: b,
Save dots: a,b
Code:
```
check_b_smaller_a = is_smaller(b, a, ctx)
check_b_dark = is_dark(b, ctx)
check_b_next_to_a = all_close([a,b], ctx)
```

Text: No. Do you see three dots in a diagonal line, where the top left dot is light, middle dot is grey, and bottom right dot is dark?
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_line = is_line([a,b,c], ctx)
check_a_top_left = a == get_top_left([a,b,c], ctx)
check_a_light = is_light(a, ctx)
check_b_middle = is_middle(b, [a,b,c], ctx)
check_b_grey = is_grey(y, ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
check_c_dark = is_dark(c, ctx)
```

Text: Yes. Is the top one close to the middle darker one?
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_a_top = a == get_top([a,b,c], ctx)
check_b_middle = b == get_middle([a,b,c], ctx)
check_ab_close = all_close([a, b], ctx)
check_b_darker_a = is_darker(b, a, ctx)
```

Text: Yes. And the smallest is on the bottom right.
Type: Follow up question, no new dots.
Previous dots: a,b,c
Save dots: a,b,c
Code:
```
check_c_smallest = c == smallest([a,b,c], ctx)
check_c_bottom_right = c == get_bottom_right([a,b,c], ctx)
```

Text: Yes, let's select the large one. <selection>.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_large = is_large(a, ctx)
```

Text: Do you see a large black dot on the bottom left?
Type: New question.
Dots: a
Save dots: a
Code:
```
check_a_large = is_large(a, cta)
check_a_dark = is_dark(a, cta)
check_a_below_left = is_below(a, None, cta) and is_left(a, None, cta)
```

Text: I see a large black dot next to two smaller lighter dots. The two smaller ones are the same size and color. We have different views though.
Type: New question.
Dots: a,b,c
Save dots: a,b,c
Code:
```
check_abc_close = all_close([a,b,c], ctx)
check_a_large = is_large(a, ctx)
check_c_dark = is_dark(c, ctx)
check_b_smaller_a = is_smaller(b, a, ctx)
check_c_smaller_a = is_smaller(c, a, ctx)
check_b_lighter_a = is_lighter(b, a, ctx)
check_c_lighter_a = is_lighter(c, a, ctx)
check_bc_same_size = same_size([b,c], ctx)
check_bc_same_color = same_color([b,c], ctx)
```

Text: Select the largest one.
Type: Select a dot.
Previous dots: a,b,c
New dots: _
Save dots: a
Code:
```
check_a_largest = a == get_largest([a,b,c], ctx)
```

Text: Yes.
Type: No op.
Code:
```
pass
```

Text: Okay. <selection>.
Type: No op.
Code:
```
pass
```

Text: No, let's select the small size and dark color one. <selection>.
Type: Select a dot.
Previous dots: None
Save dots:
a
Code:
```
check_a_small = is_small(a, ctx)
check_a_dark = is_dark(a, ctx)
```
27
Understand: 4.55546925868839 seconds
